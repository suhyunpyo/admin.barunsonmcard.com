using System;
using Barunn.MobileInvitation.Dac.Models.BarShop;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Barunn.MobileInvitation.Dac.Contexts
{
    public partial class BarShopContext : DbContext
    {
        public BarShopContext()
        {
        }

        public BarShopContext(DbContextOptions<BarShopContext> options)
            : base(options)
        {
        }
        #region 프로퍼티
        public virtual DbSet<ADMIN_CONNECT> ADMIN_CONNECTs { get; set; }
        public virtual DbSet<ADMIN_LST> ADMIN_LSTs { get; set; }
        public virtual DbSet<ADMIN_PRICE_LOGINFO> ADMIN_PRICE_LOGINFOs { get; set; }
        public virtual DbSet<APP_VERSION_MST> APP_VERSION_MSTs { get; set; }
        public virtual DbSet<AUTO_CHOAN_APP_STATUS_LOG> AUTO_CHOAN_APP_STATUS_LOGs { get; set; }
        public virtual DbSet<AUTO_CHOAN_LOG> AUTO_CHOAN_LOGs { get; set; }
        public virtual DbSet<Admin_LoginIpInfo> Admin_LoginIpInfos { get; set; }
        public virtual DbSet<Admin_Menu> Admin_Menus { get; set; }
        public virtual DbSet<AgaBarunson_Member> AgaBarunson_Members { get; set; }
        public virtual DbSet<AliveCheck> AliveChecks { get; set; }
        public virtual DbSet<AliveCheck_Info> AliveCheck_Infos { get; set; }
        public virtual DbSet<Authorization_SM> Authorization_SMs { get; set; }
        public virtual DbSet<BANNER_MST> BANNER_MSTs { get; set; }
        public virtual DbSet<BARUNN_INTEGRATE_USER_CHANGE_PROGRESS_LOG> BARUNN_INTEGRATE_USER_CHANGE_PROGRESS_LOGs { get; set; }
        public virtual DbSet<BC_Career> BC_Careers { get; set; }
        public virtual DbSet<BC_CareerContent> BC_CareerContents { get; set; }
        public virtual DbSet<BEAUTYBOX_ITEM_MST> BEAUTYBOX_ITEM_MSTs { get; set; }
        public virtual DbSet<BENEFIT_BANNER> BENEFIT_BANNERs { get; set; }
        public virtual DbSet<BEWEDDING_CONTENT> BEWEDDING_CONTENTs { get; set; }
        public virtual DbSet<BEWEDDING_CONTENT_IMAGE> BEWEDDING_CONTENT_IMAGEs { get; set; }
        public virtual DbSet<BEWEDDING_NAVIGATION> BEWEDDING_NAVIGATIONs { get; set; }
        public virtual DbSet<BEWEDDING_SOURCE> BEWEDDING_SOURCEs { get; set; }
        public virtual DbSet<BEWEDDING_SOURCE_IMAGE> BEWEDDING_SOURCE_IMAGEs { get; set; }
        public virtual DbSet<BHANDS_MEMBER_TEMP_TABLE> BHANDS_MEMBER_TEMP_TABLEs { get; set; }
        public virtual DbSet<BHANDS_WEEKLY_HOTDEAL> BHANDS_WEEKLY_HOTDEALs { get; set; }
        public virtual DbSet<BRANCH_MEMBER_OUT> BRANCH_MEMBER_OUTs { get; set; }
        public virtual DbSet<BRANCH_VISIT_SITE> BRANCH_VISIT_SITEs { get; set; }
        public virtual DbSet<BRANCH_WISHMADE_UPDATE> BRANCH_WISHMADE_UPDATEs { get; set; }
        public virtual DbSet<BSMALL_MAIN_PRODUCT> BSMALL_MAIN_PRODUCTs { get; set; }
        public virtual DbSet<BSTORE_DAILY_MM> BSTORE_DAILY_MMs { get; set; }
        public virtual DbSet<BestRanking> BestRankings { get; set; }
        public virtual DbSet<BestRankingB2B> BestRankingB2Bs { get; set; }
        public virtual DbSet<BestRanking_new> BestRanking_news { get; set; }
        public virtual DbSet<Branch_Card_Plan> Branch_Card_Plans { get; set; }
        public virtual DbSet<Branch_Member> Branch_Members { get; set; }
        public virtual DbSet<Branch_QA_Tbl> Branch_QA_Tbls { get; set; }
        public virtual DbSet<Branch_card_discount_Rate> Branch_card_discount_Rates { get; set; }
        public virtual DbSet<Branch_card_discount_season> Branch_card_discount_seasons { get; set; }
        public virtual DbSet<Branch_card_display> Branch_card_displays { get; set; }
        public virtual DbSet<Branch_notice> Branch_notices { get; set; }
        public virtual DbSet<Branch_special_discount_rate> Branch_special_discount_rates { get; set; }
        public virtual DbSet<Branch_user_comment> Branch_user_comments { get; set; }
        public virtual DbSet<CALLCENTER_SIGNAL_LAMP_MST> CALLCENTER_SIGNAL_LAMP_MSTs { get; set; }
        public virtual DbSet<CARD> CARDs { get; set; }
        public virtual DbSet<CARD_BRAND> CARD_BRANDs { get; set; }
        public virtual DbSet<CARD_CATE> CARD_CATEs { get; set; }
        public virtual DbSet<CARD_CATEGORY> CARD_CATEGORies { get; set; }
        public virtual DbSet<CARD_COREL> CARD_CORELs { get; set; }
        public virtual DbSet<CARD_ChoanBasic> CARD_ChoanBasics { get; set; }
        public virtual DbSet<CARD_Cont> CARD_Conts { get; set; }
        public virtual DbSet<CARD_DISCOUNT_RATE> CARD_DISCOUNT_RATEs { get; set; }
        public virtual DbSet<CARD_DISCOUNT_RATE_WED> CARD_DISCOUNT_RATE_WEDs { get; set; }
        public virtual DbSet<CARD_DISPLAY_POLICY> CARD_DISPLAY_POLICies { get; set; }
        public virtual DbSet<CARD_Dev> CARD_Devs { get; set; }
        public virtual DbSet<CARD_ENV> CARD_ENVs { get; set; }
        public virtual DbSet<CARD_ISHAVE_HISTORY> CARD_ISHAVE_HISTORies { get; set; }
        public virtual DbSet<CARD_JAEGO> CARD_JAEGOs { get; set; }
        public virtual DbSet<CARD_JAEGO_HISTORY> CARD_JAEGO_HISTORies { get; set; }
        public virtual DbSet<CARD_SEASON_IMAGE_STR> CARD_SEASON_IMAGE_STRs { get; set; }
        public virtual DbSet<CARD_SEASON_STYLE> CARD_SEASON_STYLEs { get; set; }
        public virtual DbSet<CARD_SEASON_STYLEITEM> CARD_SEASON_STYLEITEMs { get; set; }
        public virtual DbSet<CARD_SET> CARD_SETs { get; set; }
        public virtual DbSet<CARD_SETItem> CARD_SETItems { get; set; }
        public virtual DbSet<CARD_STYLE> CARD_STYLEs { get; set; }
        public virtual DbSet<CARD_USER_COMMNET> CARD_USER_COMMNETs { get; set; }
        public virtual DbSet<CARD_VSTAT> CARD_VSTATs { get; set; }
        public virtual DbSet<CARD_WEIGHT> CARD_WEIGHTs { get; set; }
        public virtual DbSet<CARD_corelinfo> CARD_corelinfos { get; set; }
        public virtual DbSet<CART> CARTs { get; set; }
        public virtual DbSet<CASAMIA_DAILY_INFO> CASAMIA_DAILY_INFOs { get; set; }
        public virtual DbSet<CHG_ENV_log> CHG_ENV_logs { get; set; }
        public virtual DbSet<CHOAN_CALENDAR_ITEM> CHOAN_CALENDAR_ITEMs { get; set; }
        public virtual DbSet<CHOAN_CORELDRAW_ITEM> CHOAN_CORELDRAW_ITEMs { get; set; }
        public virtual DbSet<CHOAN_OBJECT_COMMON_CODE> CHOAN_OBJECT_COMMON_CODEs { get; set; }
        public virtual DbSet<CJ_DELCODE> CJ_DELCODEs { get; set; }
        public virtual DbSet<CJ_DELCODE_ERROR> CJ_DELCODE_ERRORs { get; set; }
        public virtual DbSet<CJ_DELCODE_EXCEPT> CJ_DELCODE_EXCEPTs { get; set; }
        public virtual DbSet<CJ_DELCODE_TEMP> CJ_DELCODE_TEMPs { get; set; }
        public virtual DbSet<CJ_DELCODE_UPDATE> CJ_DELCODE_UPDATEs { get; set; }
        public virtual DbSet<CJ_DELCODE_USAGE_LOG> CJ_DELCODE_USAGE_LOGs { get; set; }
        public virtual DbSet<CJ_ZIPCODE> CJ_ZIPCODEs { get; set; }
        public virtual DbSet<CMS_LOG> CMS_LOGs { get; set; }
        public virtual DbSet<COMMON_CODE> COMMON_CODEs { get; set; }
        public virtual DbSet<COMPANY> COMPANies { get; set; }
        public virtual DbSet<COMPANY_MEMO> COMPANY_MEMOs { get; set; }
        public virtual DbSet<COMPANY_Nanum_History> COMPANY_Nanum_Histories { get; set; }
        public virtual DbSet<COMPANY_Nanum_Price> COMPANY_Nanum_Prices { get; set; }
        public virtual DbSet<COMPETITOR_CARD_MST> COMPETITOR_CARD_MSTs { get; set; }
        public virtual DbSet<CONNECT> CONNECTs { get; set; }
        public virtual DbSet<CONNECT_PATH> CONNECT_PATHs { get; set; }
        public virtual DbSet<CONTRACT_TBL> CONTRACT_TBLs { get; set; }
        public virtual DbSet<COOP_DISCOUNT> COOP_DISCOUNTs { get; set; }
        public virtual DbSet<COOP_VSTAT> COOP_VSTATs { get; set; }
        public virtual DbSet<COUPON> COUPONs { get; set; }
        public virtual DbSet<COUPON_APPLY_CARD> COUPON_APPLY_CARDs { get; set; }
        public virtual DbSet<COUPON_APPLY_SERVICE> COUPON_APPLY_SERVICEs { get; set; }
        public virtual DbSet<COUPON_APPLY_SITE> COUPON_APPLY_SITEs { get; set; }
        public virtual DbSet<COUPON_APPLY_USER> COUPON_APPLY_USERs { get; set; }
        public virtual DbSet<COUPON_DETAIL> COUPON_DETAILs { get; set; }
        public virtual DbSet<COUPON_ISSUE> COUPON_ISSUEs { get; set; }
        public virtual DbSet<COUPON_MST> COUPON_MSTs { get; set; }
        public virtual DbSet<CS_HappyCall> CS_HappyCalls { get; set; }
        public virtual DbSet<CUCKOOS_DAILY_INFO> CUCKOOS_DAILY_INFOs { get; set; }
        public virtual DbSet<CUCKOOS_DAILY_INFO_CANCEL> CUCKOOS_DAILY_INFO_CANCELs { get; set; }
        public virtual DbSet<CUCKOOS_INBOUND> CUCKOOS_INBOUNDs { get; set; }
        public virtual DbSet<CUSTOM_CARD_DISPLAY_POLICY> CUSTOM_CARD_DISPLAY_POLICies { get; set; }
        public virtual DbSet<CUSTOM_CART_SP> CUSTOM_CART_SPs { get; set; }
        public virtual DbSet<CUSTOM_ETC_ORDER> CUSTOM_ETC_ORDERs { get; set; }
        public virtual DbSet<CUSTOM_ETC_ORDER_GIFT_ITEM> CUSTOM_ETC_ORDER_GIFT_ITEMs { get; set; }
        public virtual DbSet<CUSTOM_ETC_ORDER_ITEM> CUSTOM_ETC_ORDER_ITEMs { get; set; }
        public virtual DbSet<CUSTOM_ETC_ORDER_WeddInfo> CUSTOM_ETC_ORDER_WeddInfos { get; set; }
        public virtual DbSet<CUSTOM_ORDER_ADMIN_MENT> CUSTOM_ORDER_ADMIN_MENTs { get; set; }
        public virtual DbSet<CUSTOM_ORDER_CHASU> CUSTOM_ORDER_CHASUs { get; set; }
        public virtual DbSet<CUSTOM_ORDER_COPY> CUSTOM_ORDER_COPies { get; set; }
        public virtual DbSet<CUSTOM_ORDER_COPY_DETAIL> CUSTOM_ORDER_COPY_DETAILs { get; set; }
        public virtual DbSet<CUSTOM_ORDER_COPY_PlcCode> CUSTOM_ORDER_COPY_PlcCodes { get; set; }
        public virtual DbSet<CUSTOM_ORDER_COUPON> CUSTOM_ORDER_COUPONs { get; set; }
        public virtual DbSet<CUSTOM_PRIVATE_CHOICE> CUSTOM_PRIVATE_CHOICEs { get; set; }
        public virtual DbSet<CUSTOM_SAMPLE_ORDER> CUSTOM_SAMPLE_ORDERs { get; set; }
        public virtual DbSet<CUSTOM_SAMPLE_ORDER_ITEM> CUSTOM_SAMPLE_ORDER_ITEMs { get; set; }
        public virtual DbSet<CUSTOM_SAMPLE_ORDER_ITEM_COUNT> CUSTOM_SAMPLE_ORDER_ITEM_COUNTs { get; set; }
        public virtual DbSet<Callcenter_Log> Callcenter_Logs { get; set; }
        public virtual DbSet<CardRanking> CardRankings { get; set; }
        public virtual DbSet<Card_Disrate_View> Card_Disrate_Views { get; set; }
        public virtual DbSet<Category_Manage> Category_Manages { get; set; }
        public virtual DbSet<Category_Manage_Plu> Category_Manage_Plus { get; set; }
        public virtual DbSet<CopperPlateExclude> CopperPlateExcludes { get; set; }
        public virtual DbSet<CopperPlateInfo> CopperPlateInfos { get; set; }
        public virtual DbSet<Custom_etc_basket> Custom_etc_baskets { get; set; }
        public virtual DbSet<Custom_order_Group> Custom_order_Groups { get; set; }
        public virtual DbSet<DACOM_PayTBL> DACOM_PayTBLs { get; set; }
        public virtual DbSet<DD_BANLIST> DD_BANLISTs { get; set; }
        public virtual DbSet<DD_JEHU_LINK> DD_JEHU_LINKs { get; set; }
        public virtual DbSet<DEARDEER_JEHU> DEARDEER_JEHUs { get; set; }
        public virtual DbSet<DEARDEER_SAMPLE_ORDER_ITEM> DEARDEER_SAMPLE_ORDER_ITEMs { get; set; }
        public virtual DbSet<DEARDEER_SAMPLE_ORDER_MST> DEARDEER_SAMPLE_ORDER_MSTs { get; set; }
        public virtual DbSet<DELIVERY_INFO> DELIVERY_INFOs { get; set; }
        public virtual DbSet<DELIVERY_INFO_DELCODE> DELIVERY_INFO_DELCODEs { get; set; }
        public virtual DbSet<DELIVERY_INFO_DETAIL> DELIVERY_INFO_DETAILs { get; set; }
        public virtual DbSet<DELIVERY_INFO_GROUP> DELIVERY_INFO_GROUPs { get; set; }
        public virtual DbSet<DELIVERY_SEND_LOG> DELIVERY_SEND_LOGs { get; set; }
        public virtual DbSet<DISCOUNT_POLICY> DISCOUNT_POLICies { get; set; }
        public virtual DbSet<DISPLAY_CATEGORY> DISPLAY_CATEGORies { get; set; }
        public virtual DbSet<Database> Databases { get; set; }
        public virtual DbSet<DatabaseChangeHistory> DatabaseChangeHistories { get; set; }
        public virtual DbSet<DesignBettle> DesignBettles { get; set; }
        public virtual DbSet<Designer> Designers { get; set; }
        public virtual DbSet<Discount_Delete_Admin_Log> Discount_Delete_Admin_Logs { get; set; }
        public virtual DbSet<Discount_Paper> Discount_Papers { get; set; }
        public virtual DbSet<ENV_SIZE> ENV_SIZEs { get; set; }
        public virtual DbSet<ERP_Price> ERP_Prices { get; set; }
        public virtual DbSet<ERR_TBL> ERR_TBLs { get; set; }
        public virtual DbSet<ESTIMATE_REQUEST> ESTIMATE_REQUESTs { get; set; }
        public virtual DbSet<EVENT_5hang> EVENT_5hangs { get; set; }
        public virtual DbSet<EVENT_5hang_str> EVENT_5hang_strs { get; set; }
        public virtual DbSet<EVENT_DigitalPhoto> EVENT_DigitalPhotos { get; set; }
        public virtual DbSet<EVENT_ENTER_MEMBER> EVENT_ENTER_MEMBERs { get; set; }
        public virtual DbSet<EVENT_ETLAND> EVENT_ETLANDs { get; set; }
        public virtual DbSet<EVENT_FACEBOOKSHARE> EVENT_FACEBOOKSHAREs { get; set; }
        public virtual DbSet<EVENT_LMS_CONTENT> EVENT_LMS_CONTENTs { get; set; }
        public virtual DbSet<EVENT_MARKETING_AGREEMENT> EVENT_MARKETING_AGREEMENTs { get; set; }
        public virtual DbSet<EVENT_SAMSUNG> EVENT_SAMSUNGs { get; set; }
        public virtual DbSet<EVENT_talklove> EVENT_talkloves { get; set; }
        public virtual DbSet<EVTPAGE_MARKETING_AGREEMENT_LOG> EVTPAGE_MARKETING_AGREEMENT_LOGs { get; set; }
        public virtual DbSet<EVT_BHANDS_COUPLE> EVT_BHANDS_COUPLEs { get; set; }
        public virtual DbSet<EVT_BHANDS_COUPLES_VOTE> EVT_BHANDS_COUPLES_VOTEs { get; set; }
        public virtual DbSet<EVT_HOLLOWEEN> EVT_HOLLOWEENs { get; set; }
        public virtual DbSet<EVT_HOTDEAL_STOCK> EVT_HOTDEAL_STOCKs { get; set; }
        public virtual DbSet<EVT_LINK_HIT> EVT_LINK_HITs { get; set; }
        public virtual DbSet<Error_User> Error_Users { get; set; }
        public virtual DbSet<EveCard_Order_Info> EveCard_Order_Infos { get; set; }
        public virtual DbSet<EveCard_Prd_Info> EveCard_Prd_Infos { get; set; }
        public virtual DbSet<EverydayCard> EverydayCards { get; set; }
        public virtual DbSet<Evt_Banner> Evt_Banners { get; set; }
        public virtual DbSet<Evt_Plus_Friend> Evt_Plus_Friends { get; set; }
        public virtual DbSet<Evt_Plus_Friends_uid> Evt_Plus_Friends_uids { get; set; }
        public virtual DbSet<Evt_three_six_nine_board> Evt_three_six_nine_boards { get; set; }
        public virtual DbSet<Ewedd_After_Note> Ewedd_After_Notes { get; set; }
        public virtual DbSet<GIFT_DAILY_MM> GIFT_DAILY_MMs { get; set; }
        public virtual DbSet<GREETING> GREETINGs { get; set; }
        public virtual DbSet<GREETING_CATEGORY> GREETING_CATEGORies { get; set; }
        public virtual DbSet<Greeting_barshop> Greeting_barshops { get; set; }
        public virtual DbSet<HANJIN_ZIPCODE> HANJIN_ZIPCODEs { get; set; }
        public virtual DbSet<HardCodingList> HardCodingLists { get; set; }
        public virtual DbSet<HeadCol_TEMP> HeadCol_TEMPs { get; set; }
        public virtual DbSet<ILOOM_DAILY_INFO> ILOOM_DAILY_INFOs { get; set; }
        public virtual DbSet<INTEGRATION_ADMIN_MENU> INTEGRATION_ADMIN_MENUs { get; set; }
        public virtual DbSet<INTEGRATION_ADMIN_MENU_AUTH> INTEGRATION_ADMIN_MENU_AUTHs { get; set; }
        public virtual DbSet<INTEGRATION_MEMBER_SIGN_UP_LOG> INTEGRATION_MEMBER_SIGN_UP_LOGs { get; set; }
        public virtual DbSet<JEHU_MARKETING_DAILY_INFO> JEHU_MARKETING_DAILY_INFOs { get; set; }
        public virtual DbSet<LMS_SEND_TARGET_GROUP> LMS_SEND_TARGET_GROUPs { get; set; }
        public virtual DbSet<LMS_SEND_TARGET_USER> LMS_SEND_TARGET_USERs { get; set; }
        public virtual DbSet<LOGO_CATEGORY> LOGO_CATEGORies { get; set; }
        public virtual DbSet<LOG_AGENT_CHECK> LOG_AGENT_CHECKs { get; set; }
        public virtual DbSet<LOG_MST> LOG_MSTs { get; set; }
        public virtual DbSet<Logo_TBL> Logo_TBLs { get; set; }
        public virtual DbSet<MAIN_POPUP_IMAGE> MAIN_POPUP_IMAGEs { get; set; }
        public virtual DbSet<MAIN_POPUP_MST> MAIN_POPUP_MSTs { get; set; }
        public virtual DbSet<MARKET_PRICE> MARKET_PRICEs { get; set; }
        public virtual DbSet<MCARD_IMAGE_DELETE> MCARD_IMAGE_DELETEs { get; set; }
        public virtual DbSet<MCARD_INVITATION_FLOW> MCARD_INVITATION_FLOWs { get; set; }
        public virtual DbSet<MCARD_INVITATION_FOR_OTHER_SITE> MCARD_INVITATION_FOR_OTHER_SITEs { get; set; }
        public virtual DbSet<MD_GIFT_EVENT_CHANEL> MD_GIFT_EVENT_CHANELs { get; set; }
        public virtual DbSet<MEMPLUS_DAILY_INFO> MEMPLUS_DAILY_INFOs { get; set; }
        public virtual DbSet<MEMPLUS_DAILY_INFO_CANCEL> MEMPLUS_DAILY_INFO_CANCELs { get; set; }
        public virtual DbSet<MMS_LOG> MMS_LOGs { get; set; }
        public virtual DbSet<MMS_MSG> MMS_MSGs { get; set; }
        public virtual DbSet<MMS_TARGET_CUSTOMER> MMS_TARGET_CUSTOMERs { get; set; }
        public virtual DbSet<MO_MAP> MO_MAPs { get; set; }
        public virtual DbSet<MO_TRAN> MO_TRANs { get; set; }
        public virtual DbSet<MYOMEE_DAILY_INFO> MYOMEE_DAILY_INFOs { get; set; }
        public virtual DbSet<Mcard_MoneyGift> Mcard_MoneyGifts { get; set; }
        public virtual DbSet<NAVER_MAINADD_MOBILE> NAVER_MAINADD_MOBILEs { get; set; }
        public virtual DbSet<OB_CATALOGUE> OB_CATALOGUEs { get; set; }
        public virtual DbSet<OB_MD_ITEM> OB_MD_ITEMs { get; set; }
        public virtual DbSet<OB_NOTICE_T> OB_NOTICE_Ts { get; set; }
        public virtual DbSet<OB_REF_CODE> OB_REF_CODEs { get; set; }
        public virtual DbSet<ORDER_DETAIL_CHANGE> ORDER_DETAIL_CHANGEs { get; set; }
        public virtual DbSet<OUTLET_CARD> OUTLET_CARDs { get; set; }
        public virtual DbSet<OUTLET_ORDER> OUTLET_ORDERs { get; set; }
        public virtual DbSet<OUTSOURCING_ORDER_MST> OUTSOURCING_ORDER_MSTs { get; set; }
        public virtual DbSet<OUTSOURCING_ORDER_MST_BACK_DATum> OUTSOURCING_ORDER_MST_BACK_DATAs { get; set; }
        public virtual DbSet<PHOTOBOOK_ADMIN_MENT> PHOTOBOOK_ADMIN_MENTs { get; set; }
        public virtual DbSet<PHOTOBOOK_BASKET> PHOTOBOOK_BASKETs { get; set; }
        public virtual DbSet<PHOTOBOOK_BOARD_RE> PHOTOBOOK_BOARD_REs { get; set; }
        public virtual DbSet<PHOTOBOOK_COMMENT> PHOTOBOOK_COMMENTs { get; set; }
        public virtual DbSet<PHOTOBOOK_COUPON> PHOTOBOOK_COUPONs { get; set; }
        public virtual DbSet<PHOTOBOOK_EVENT_BLOG> PHOTOBOOK_EVENT_BLOGs { get; set; }
        public virtual DbSet<PHOTOBOOK_EVENT_COUPON> PHOTOBOOK_EVENT_COUPONs { get; set; }
        public virtual DbSet<PHOTOBOOK_EVENT_PHOTOCLIP> PHOTOBOOK_EVENT_PHOTOCLIPs { get; set; }
        public virtual DbSet<PHOTOBOOK_EVENT_PHOTOCLIP_REPLY> PHOTOBOOK_EVENT_PHOTOCLIP_REPLies { get; set; }
        public virtual DbSet<PHOTOBOOK_EVENT_REMIND> PHOTOBOOK_EVENT_REMINDs { get; set; }
        public virtual DbSet<PHOTOBOOK_EVENT_REPLY> PHOTOBOOK_EVENT_REPLies { get; set; }
        public virtual DbSet<PHOTOBOOK_FAQ> PHOTOBOOK_FAQs { get; set; }
        public virtual DbSet<PHOTOBOOK_MEMBER> PHOTOBOOK_MEMBERs { get; set; }
        public virtual DbSet<PHOTOBOOK_MEMBER_OUT> PHOTOBOOK_MEMBER_OUTs { get; set; }
        public virtual DbSet<PHOTOBOOK_MEMBER_tmp> PHOTOBOOK_MEMBER_tmps { get; set; }
        public virtual DbSet<PHOTOBOOK_MYCOUPON> PHOTOBOOK_MYCOUPONs { get; set; }
        public virtual DbSet<PHOTOBOOK_OPEN> PHOTOBOOK_OPENs { get; set; }
        public virtual DbSet<PHOTOBOOK_ORDER> PHOTOBOOK_ORDERs { get; set; }
        public virtual DbSet<PHOTOBOOK_ORDER_DETAIL> PHOTOBOOK_ORDER_DETAILs { get; set; }
        public virtual DbSet<PHOTOBOOK_POINT> PHOTOBOOK_POINTs { get; set; }
        public virtual DbSet<PHOTOBOOK_PROD> PHOTOBOOK_PRODs { get; set; }
        public virtual DbSet<PHOTOBOOK_PROD_B2B> PHOTOBOOK_PROD_B2Bs { get; set; }
        public virtual DbSet<PHOTOBOOK_PROD_DETAIL> PHOTOBOOK_PROD_DETAILs { get; set; }
        public virtual DbSet<PHOTOBOOK_PROD_ERP> PHOTOBOOK_PROD_ERPs { get; set; }
        public virtual DbSet<PHOTOBOOK_PROD_OPTION> PHOTOBOOK_PROD_OPTIONs { get; set; }
        public virtual DbSet<PHOTOBOOK_SKIN> PHOTOBOOK_SKINs { get; set; }
        public virtual DbSet<PHOTOBOOK_TROUBLE> PHOTOBOOK_TROUBLEs { get; set; }
        public virtual DbSet<PHOTOBOOK_ZZIM> PHOTOBOOK_ZZIMs { get; set; }
        public virtual DbSet<POLLCONTENT> POLLCONTENTs { get; set; }
        public virtual DbSet<POLLCOUNT> POLLCOUNTs { get; set; }
        public virtual DbSet<PREVIEW> PREVIEWs { get; set; }
        public virtual DbSet<PREVIEW_NOTICE> PREVIEW_NOTICEs { get; set; }
        public virtual DbSet<PREVIEW_OPINION> PREVIEW_OPINIONs { get; set; }
        public virtual DbSet<PRE_CARD_INFO> PRE_CARD_INFOs { get; set; }
        public virtual DbSet<PRIVATE_CHOICE> PRIVATE_CHOICEs { get; set; }
        public virtual DbSet<PrintChasuGroup> PrintChasuGroups { get; set; }
        public virtual DbSet<PrintChasuGroupDetail> PrintChasuGroupDetails { get; set; }
        public virtual DbSet<RECENT_VIEW_CARD_ITEM> RECENT_VIEW_CARD_ITEMs { get; set; }
        public virtual DbSet<RECENT_VIEW_CARD_MST> RECENT_VIEW_CARD_MSTs { get; set; }
        public virtual DbSet<RESEARCH_AN> RESEARCH_ANs { get; set; }
        public virtual DbSet<RESEARCH_CARD> RESEARCH_CARDs { get; set; }
        public virtual DbSet<RESEARCH_QLIST> RESEARCH_QLISTs { get; set; }
        public virtual DbSet<Roulette_Item> Roulette_Items { get; set; }
        public virtual DbSet<Roulette_Main> Roulette_Mains { get; set; }
        public virtual DbSet<Roulette_Member> Roulette_Members { get; set; }
        public virtual DbSet<Roulette_ST> Roulette_STs { get; set; }
        public virtual DbSet<S2_Acc> S2_Accs { get; set; }
        public virtual DbSet<S2_Accgr> S2_Accgrs { get; set; }
        public virtual DbSet<S2_AdminList> S2_AdminLists { get; set; }
        public virtual DbSet<S2_BestTotalRanking> S2_BestTotalRankings { get; set; }
        public virtual DbSet<S2_CARD_ERP_STOCK> S2_CARD_ERP_STOCKs { get; set; }
        public virtual DbSet<S2_CARD_ERP_STOCK_DEARDEER> S2_CARD_ERP_STOCK_DEARDEERs { get; set; }
        public virtual DbSet<S2_CARD_FREE_FOOD_TICKET_MST> S2_CARD_FREE_FOOD_TICKET_MSTs { get; set; }
        public virtual DbSet<S2_CARD_FREE_FOOD_TICKET_MST_TEST> S2_CARD_FREE_FOOD_TICKET_MST_TESTs { get; set; }
        public virtual DbSet<S2_CARD_FREE_GIFT> S2_CARD_FREE_GIFTs { get; set; }
        public virtual DbSet<S2_CARD_FREE_GIFT_LOG> S2_CARD_FREE_GIFT_LOGs { get; set; }
        public virtual DbSet<S2_CARD_FREE_GIFT_TARGET_CARD> S2_CARD_FREE_GIFT_TARGET_CARDs { get; set; }
        public virtual DbSet<S2_CARD_LIKE> S2_CARD_LIKEs { get; set; }
        public virtual DbSet<S2_CARD_SAMPLE_FREE_GIFT> S2_CARD_SAMPLE_FREE_GIFTs { get; set; }
        public virtual DbSet<S2_Card> S2_Cards { get; set; }
        public virtual DbSet<S2_CardCorelTemplateInfo> S2_CardCorelTemplateInfos { get; set; }
        public virtual DbSet<S2_CardDesigner> S2_CardDesigners { get; set; }
        public virtual DbSet<S2_CardDetail> S2_CardDetails { get; set; }
        public virtual DbSet<S2_CardDetailEtc> S2_CardDetailEtcs { get; set; }
        public virtual DbSet<S2_CardDetailSmart> S2_CardDetailSmarts { get; set; }
        public virtual DbSet<S2_CardDigitalColor> S2_CardDigitalColors { get; set; }
        public virtual DbSet<S2_CardDiscount> S2_CardDiscounts { get; set; }
        public virtual DbSet<S2_CardDiscountInfo> S2_CardDiscountInfos { get; set; }
        public virtual DbSet<S2_CardImage> S2_CardImages { get; set; }
        public virtual DbSet<S2_CardItemGroup> S2_CardItemGroups { get; set; }
        public virtual DbSet<S2_CardItemGroupInfo> S2_CardItemGroupInfos { get; set; }
        public virtual DbSet<S2_CardKind> S2_CardKinds { get; set; }
        public virtual DbSet<S2_CardKindInfo> S2_CardKindInfos { get; set; }
        public virtual DbSet<S2_CardOption> S2_CardOptions { get; set; }
        public virtual DbSet<S2_CardOption_UsrImg> S2_CardOption_UsrImgs { get; set; }
        public virtual DbSet<S2_CardRank> S2_CardRanks { get; set; }
        public virtual DbSet<S2_CardSalesBest> S2_CardSalesBests { get; set; }
        public virtual DbSet<S2_CardSalesPrice> S2_CardSalesPrices { get; set; }
        public virtual DbSet<S2_CardSalesSite> S2_CardSalesSites { get; set; }
        public virtual DbSet<S2_CardSamplePrice> S2_CardSamplePrices { get; set; }
        public virtual DbSet<S2_CardSet_PriceTemp> S2_CardSet_PriceTemps { get; set; }
        public virtual DbSet<S2_CardSite> S2_CardSites { get; set; }
        public virtual DbSet<S2_CardSort> S2_CardSorts { get; set; }
        public virtual DbSet<S2_CardStyle> S2_CardStyles { get; set; }
        public virtual DbSet<S2_CardStyleItem> S2_CardStyleItems { get; set; }
        public virtual DbSet<S2_CardTechnic> S2_CardTechnics { get; set; }
        public virtual DbSet<S2_CardView> S2_CardViews { get; set; }
        public virtual DbSet<S2_CardViewChasu> S2_CardViewChasus { get; set; }
        public virtual DbSet<S2_CardViewDisplay> S2_CardViewDisplays { get; set; }
        public virtual DbSet<S2_CardViewMerge> S2_CardViewMerges { get; set; }
        public virtual DbSet<S2_CardViewN> S2_CardViewNs { get; set; }
        public virtual DbSet<S2_CardViewNew> S2_CardViewNews { get; set; }
        public virtual DbSet<S2_CardViewOption> S2_CardViewOptions { get; set; }
        public virtual DbSet<S2_CardViewSMART> S2_CardViewSMARTs { get; set; }
        public virtual DbSet<S2_CardView_TEST> S2_CardView_TESTs { get; set; }
        public virtual DbSet<S2_Card_Detail_Sub> S2_Card_Detail_Subs { get; set; }
        public virtual DbSet<S2_CardxmlDatum> S2_CardxmlData { get; set; }
        public virtual DbSet<S2_CsPoll> S2_CsPolls { get; set; }
        public virtual DbSet<S2_CsPollAn> S2_CsPollAns { get; set; }
        public virtual DbSet<S2_CsPollAnsDetail> S2_CsPollAnsDetails { get; set; }
        public virtual DbSet<S2_CustomizedCard> S2_CustomizedCards { get; set; }
        public virtual DbSet<S2_Event> S2_Events { get; set; }
        public virtual DbSet<S2_EventAdmin_Log> S2_EventAdmin_Logs { get; set; }
        public virtual DbSet<S2_EventBlog> S2_EventBlogs { get; set; }
        public virtual DbSet<S2_EventUse> S2_EventUses { get; set; }
        public virtual DbSet<S2_Event_flow> S2_Event_flows { get; set; }
        public virtual DbSet<S2_Event_love> S2_Event_loves { get; set; }
        public virtual DbSet<S2_FAQ> S2_FAQs { get; set; }
        public virtual DbSet<S2_MailDomain> S2_MailDomains { get; set; }
        public virtual DbSet<S2_McardClickCount> S2_McardClickCounts { get; set; }
        public virtual DbSet<S2_MediaContent> S2_MediaContents { get; set; }
        public virtual DbSet<S2_MediaView> S2_MediaViews { get; set; }
        public virtual DbSet<S2_News> S2_News { get; set; }
        public virtual DbSet<S2_Notice> S2_Notices { get; set; }
        public virtual DbSet<S2_OrderViewMerge> S2_OrderViewMerges { get; set; }
        public virtual DbSet<S2_OrderViewMerge_For_ChasuGroupSet> S2_OrderViewMerge_For_ChasuGroupSets { get; set; }
        public virtual DbSet<S2_OrderViewMerge_For_ChasuGroupSet_Admin> S2_OrderViewMerge_For_ChasuGroupSet_Admins { get; set; }
        public virtual DbSet<S2_OrderViewMerge_New> S2_OrderViewMerge_News { get; set; }
        public virtual DbSet<S2_OrderViewMerge_New_Admin> S2_OrderViewMerge_New_Admins { get; set; }
        public virtual DbSet<S2_PTRequest> S2_PTRequests { get; set; }
        public virtual DbSet<S2_ProductImage> S2_ProductImages { get; set; }
        public virtual DbSet<S2_RecommendCard> S2_RecommendCards { get; set; }
        public virtual DbSet<S2_Report> S2_Reports { get; set; }
        public virtual DbSet<S2_SampleBasket> S2_SampleBaskets { get; set; }
        public virtual DbSet<S2_Toss_Bank> S2_Toss_Banks { get; set; }
        public virtual DbSet<S2_USERBYE_SECESSION_CAUSE> S2_USERBYE_SECESSION_CAUSEs { get; set; }
        public virtual DbSet<S2_USERINFO_AUTH_INFO> S2_USERINFO_AUTH_INFOs { get; set; }
        public virtual DbSet<S2_USERINFO_SIGNUP_DEVICE> S2_USERINFO_SIGNUP_DEVICEs { get; set; }
        public virtual DbSet<S2_USERINFO_THIRD_PARTY_MARKETING_AGREEMENT> S2_USERINFO_THIRD_PARTY_MARKETING_AGREEMENTs { get; set; }
        public virtual DbSet<S2_USER_DEVICE_TOKEN> S2_USER_DEVICE_TOKENs { get; set; }
        public virtual DbSet<S2_UserBye> S2_UserByes { get; set; }
        public virtual DbSet<S2_UserCardView> S2_UserCardViews { get; set; }
        public virtual DbSet<S2_UserComment> S2_UserComments { get; set; }
        public virtual DbSet<S2_UserCommentBest> S2_UserCommentBests { get; set; }
        public virtual DbSet<S2_UserComment_Copy> S2_UserComment_Copies { get; set; }
        public virtual DbSet<S2_UserComment_ETC_reply> S2_UserComment_ETC_replies { get; set; }
        public virtual DbSet<S2_UserComment_Reply> S2_UserComment_Replies { get; set; }
        public virtual DbSet<S2_UserComment_etc> S2_UserComment_etcs { get; set; }
        public virtual DbSet<S2_UserComment_photo> S2_UserComment_photos { get; set; }
        public virtual DbSet<S2_UserComment_photo_the> S2_UserComment_photo_thes { get; set; }
        public virtual DbSet<S2_UserInfo> S2_UserInfos { get; set; }
        public virtual DbSet<S2_UserInfo_BHand> S2_UserInfo_BHands { get; set; }
        public virtual DbSet<S2_UserInfo_Deardeer> S2_UserInfo_Deardeers { get; set; }
        public virtual DbSet<S2_UserInfo_Deardeer_Marketing> S2_UserInfo_Deardeer_Marketings { get; set; }
        public virtual DbSet<S2_UserInfo_TheCard> S2_UserInfo_TheCards { get; set; }
        public virtual DbSet<S2_UserQnA> S2_UserQnAs { get; set; }
        public virtual DbSet<S2_UserQnA_Boton> S2_UserQnA_Botons { get; set; }
        public virtual DbSet<S2_Userinfo_HiPlaza_Log> S2_Userinfo_HiPlaza_Logs { get; set; }
        public virtual DbSet<S2_Userinfo_HiPlaza_store> S2_Userinfo_HiPlaza_stores { get; set; }
        public virtual DbSet<S2_Userinfo_HiPlaza_zipcode> S2_Userinfo_HiPlaza_zipcodes { get; set; }
        public virtual DbSet<S2_UsrBasket> S2_UsrBaskets { get; set; }
        public virtual DbSet<S2_WishCard> S2_WishCards { get; set; }
        public virtual DbSet<S2_WishGreeting> S2_WishGreetings { get; set; }
        public virtual DbSet<S2_WishMap> S2_WishMaps { get; set; }
        public virtual DbSet<S2_eCardBest> S2_eCardBests { get; set; }
        public virtual DbSet<S2_eCardBoard> S2_eCardBoards { get; set; }
        public virtual DbSet<S2_eCardOrder> S2_eCardOrders { get; set; }
        public virtual DbSet<S2_mCardOrder> S2_mCardOrders { get; set; }
        public virtual DbSet<S2_medium> S2_media { get; set; }
        public virtual DbSet<S2_orderLst> S2_orderLsts { get; set; }
        public virtual DbSet<S2_orderLstN> S2_orderLstNs { get; set; }
        public virtual DbSet<S2_orderLstN_> S2_orderLstN_s { get; set; }
        public virtual DbSet<S2_orderLstN_20201113> S2_orderLstN_20201113s { get; set; }
        public virtual DbSet<S2_price_code> S2_price_codes { get; set; }
        public virtual DbSet<S2_price_tb_code> S2_price_tb_codes { get; set; }
        public virtual DbSet<S2_product> S2_products { get; set; }
        public virtual DbSet<S2_search_result> S2_search_results { get; set; }
        public virtual DbSet<S4_BHANDS_EVENT_BANNER> S4_BHANDS_EVENT_BANNERs { get; set; }
        public virtual DbSet<S4_BestTotalRanking_BHand> S4_BestTotalRanking_BHands { get; set; }
        public virtual DbSet<S4_BestTotalRanking_BSmall> S4_BestTotalRanking_BSmalls { get; set; }
        public virtual DbSet<S4_BestTotalRanking_Barunson> S4_BestTotalRanking_Barunsons { get; set; }
        public virtual DbSet<S4_BestTotalRanking_Premier> S4_BestTotalRanking_Premiers { get; set; }
        public virtual DbSet<S4_BestTotalRanking_TheCard> S4_BestTotalRanking_TheCards { get; set; }
        public virtual DbSet<S4_CART> S4_CARTs { get; set; }
        public virtual DbSet<S4_COUPON> S4_COUPONs { get; set; }
        public virtual DbSet<S4_COUPON_ADDON_CARD_SEQ> S4_COUPON_ADDON_CARD_SEQs { get; set; }
        public virtual DbSet<S4_COUPON_GURIM> S4_COUPON_GURIMs { get; set; }
        public virtual DbSet<S4_COUPON_WEEKLY_SPECIAL> S4_COUPON_WEEKLY_SPECIALs { get; set; }
        public virtual DbSet<S4_CPC_Static> S4_CPC_Statics { get; set; }
        public virtual DbSet<S4_CPC_Sub_Static> S4_CPC_Sub_Statics { get; set; }
        public virtual DbSet<S4_CS_Member> S4_CS_Members { get; set; }
        public virtual DbSet<S4_CardClickCount> S4_CardClickCounts { get; set; }
        public virtual DbSet<S4_CardImage_Str> S4_CardImage_Strs { get; set; }
        public virtual DbSet<S4_Card_Talk> S4_Card_Talks { get; set; }
        public virtual DbSet<S4_Change_intra_id> S4_Change_intra_ids { get; set; }
        public virtual DbSet<S4_Coupon_OKC> S4_Coupon_OKCs { get; set; }
        public virtual DbSet<S4_EVENT_MUSIC_REPLY_PARENT_WEDDING_EVENT> S4_EVENT_MUSIC_REPLY_PARENT_WEDDING_EVENTs { get; set; }
        public virtual DbSet<S4_EventBlog> S4_EventBlogs { get; set; }
        public virtual DbSet<S4_EventBlog_Gifticon> S4_EventBlog_Gifticons { get; set; }
        public virtual DbSet<S4_EventManager> S4_EventManagers { get; set; }
        public virtual DbSet<S4_EventManagerComment> S4_EventManagerComments { get; set; }
        public virtual DbSet<S4_EventMusic_Reply> S4_EventMusic_Replies { get; set; }
        public virtual DbSet<S4_EventMusic_Str> S4_EventMusic_Strs { get; set; }
        public virtual DbSet<S4_EventMusic_Str_Temp> S4_EventMusic_Str_Temps { get; set; }
        public virtual DbSet<S4_EventOnliving> S4_EventOnlivings { get; set; }
        public virtual DbSet<S4_EventOnliving_Count> S4_EventOnliving_Counts { get; set; }
        public virtual DbSet<S4_EventOnliving_Reply> S4_EventOnliving_Replies { get; set; }
        public virtual DbSet<S4_EventPoll> S4_EventPolls { get; set; }
        public virtual DbSet<S4_EventPoll_item> S4_EventPoll_items { get; set; }
        public virtual DbSet<S4_EventPoll_item_etc> S4_EventPoll_item_etcs { get; set; }
        public virtual DbSet<S4_EventRelay> S4_EventRelays { get; set; }
        public virtual DbSet<S4_EventRelay_Reply> S4_EventRelay_Replies { get; set; }
        public virtual DbSet<S4_Event_Blank_Keyword> S4_Event_Blank_Keywords { get; set; }
        public virtual DbSet<S4_Event_Halloween> S4_Event_Halloweens { get; set; }
        public virtual DbSet<S4_Event_Raina> S4_Event_Rainas { get; set; }
        public virtual DbSet<S4_Event_Review> S4_Event_Reviews { get; set; }
        public virtual DbSet<S4_Event_ReviewBest> S4_Event_ReviewBests { get; set; }
        public virtual DbSet<S4_Event_Review_New> S4_Event_Review_News { get; set; }
        public virtual DbSet<S4_Event_Review_Status> S4_Event_Review_Statuses { get; set; }
        public virtual DbSet<S4_Event_Review_Status_New> S4_Event_Review_Status_News { get; set; }
        public virtual DbSet<S4_Event_Review_Sub> S4_Event_Review_Subs { get; set; }
        public virtual DbSet<S4_Event_Review_photo> S4_Event_Review_photos { get; set; }
        public virtual DbSet<S4_Event_install> S4_Event_installs { get; set; }
        public virtual DbSet<S4_Holiday> S4_Holidays { get; set; }
        public virtual DbSet<S4_LinkPrice_Log> S4_LinkPrice_Logs { get; set; }
        public virtual DbSet<S4_LoginIpInfo> S4_LoginIpInfos { get; set; }
        public virtual DbSet<S4_MARKETING_AGREEMENT_LOG> S4_MARKETING_AGREEMENT_LOGs { get; set; }
        public virtual DbSet<S4_MD_Choice> S4_MD_Choices { get; set; }
        public virtual DbSet<S4_MD_Choice_ProdBanner> S4_MD_Choice_ProdBanners { get; set; }
        public virtual DbSet<S4_MD_Choice_Str> S4_MD_Choice_Strs { get; set; }
        public virtual DbSet<S4_MD_Choice_Str_UsedYN> S4_MD_Choice_Str_UsedYNs { get; set; }
        public virtual DbSet<S4_MD_Choice_Str_temp> S4_MD_Choice_Str_temps { get; set; }
        public virtual DbSet<S4_MD_Choice_UseCoupon> S4_MD_Choice_UseCoupons { get; set; }
        public virtual DbSet<S4_MD_Choice_weeklyhotdeal> S4_MD_Choice_weeklyhotdeals { get; set; }
        public virtual DbSet<S4_McardEditInfo> S4_McardEditInfos { get; set; }
        public virtual DbSet<S4_McardImageInfo> S4_McardImageInfos { get; set; }
        public virtual DbSet<S4_MyCoupon> S4_MyCoupons { get; set; }
        public virtual DbSet<S4_MySweetWedding> S4_MySweetWeddings { get; set; }
        public virtual DbSet<S4_NICE_Log> S4_NICE_Logs { get; set; }
        public virtual DbSet<S4_NonUserInfo_Sm> S4_NonUserInfo_Sms { get; set; }
        public virtual DbSet<S4_PhotoStory> S4_PhotoStories { get; set; }
        public virtual DbSet<S4_PhotoStory_Reply> S4_PhotoStory_Replies { get; set; }
        public virtual DbSet<S4_Poll> S4_Polls { get; set; }
        public virtual DbSet<S4_Poll_item> S4_Poll_items { get; set; }
        public virtual DbSet<S4_Poll_itemComment> S4_Poll_itemComments { get; set; }
        public virtual DbSet<S4_Poll_item_etc> S4_Poll_item_etcs { get; set; }
        public virtual DbSet<S4_Portfolio> S4_Portfolios { get; set; }
        public virtual DbSet<S4_Premier_Business_Card> S4_Premier_Business_Cards { get; set; }
        public virtual DbSet<S4_Premier_Business_Img> S4_Premier_Business_Imgs { get; set; }
        public virtual DbSet<S4_Premier_Movie> S4_Premier_Movies { get; set; }
        public virtual DbSet<S4_Premier_SN> S4_Premier_SNs { get; set; }
        public virtual DbSet<S4_Ranking_Sort> S4_Ranking_Sorts { get; set; }
        public virtual DbSet<S4_Ranking_Sort_Plu> S4_Ranking_Sort_Plus { get; set; }
        public virtual DbSet<S4_Ranking_Sort_Table> S4_Ranking_Sort_Tables { get; set; }
        public virtual DbSet<S4_Ranking_Sort_Table_Plu> S4_Ranking_Sort_Table_Plus { get; set; }
        public virtual DbSet<S4_Review_URL> S4_Review_URLs { get; set; }
        public virtual DbSet<S4_ShopHelper> S4_ShopHelpers { get; set; }
        public virtual DbSet<S4_ShopHelper_Reply> S4_ShopHelper_Replies { get; set; }
        public virtual DbSet<S4_Stock_Alarm> S4_Stock_Alarms { get; set; }
        public virtual DbSet<S4_UserOpinion> S4_UserOpinions { get; set; }
        public virtual DbSet<S4_mCardBoard> S4_mCardBoards { get; set; }
        public virtual DbSet<S5_Event_Item> S5_Event_Items { get; set; }
        public virtual DbSet<S5_Event_Member> S5_Event_Members { get; set; }
        public virtual DbSet<S5_Happy_Price_Item> S5_Happy_Price_Items { get; set; }
        public virtual DbSet<S5_Happy_Price_Main> S5_Happy_Price_Mains { get; set; }
        public virtual DbSet<S5_Plus_Friend> S5_Plus_Friends { get; set; }
        public virtual DbSet<S5_Plus_Friends_UID> S5_Plus_Friends_UIDs { get; set; }
        public virtual DbSet<S5_Supporters_User> S5_Supporters_Users { get; set; }
        public virtual DbSet<S5_TodayViewItem> S5_TodayViewItems { get; set; }
        public virtual DbSet<S5_nmCardBoard> S5_nmCardBoards { get; set; }
        public virtual DbSet<S5_nmCardImageInfo> S5_nmCardImageInfos { get; set; }
        public virtual DbSet<S5_nmCardOrder> S5_nmCardOrders { get; set; }
        public virtual DbSet<S5_nmCardShowInfo> S5_nmCardShowInfos { get; set; }
        public virtual DbSet<SAMPLE_DELIVERY_PRICE_INFO> SAMPLE_DELIVERY_PRICE_INFOs { get; set; }
        public virtual DbSet<SAMPLE_DIRECTION_INFO> SAMPLE_DIRECTION_INFOs { get; set; }
        public virtual DbSet<SAMPLE_LIKE_CHECK> SAMPLE_LIKE_CHECKs { get; set; }
        public virtual DbSet<SAMSUNG_BRANCH> SAMSUNG_BRANCHes { get; set; }
        public virtual DbSet<SAMSUNG_DAILY_DISCOUNT> SAMSUNG_DAILY_DISCOUNTs { get; set; }
        public virtual DbSet<SAMSUNG_DAILY_INFO> SAMSUNG_DAILY_INFOs { get; set; }
        public virtual DbSet<SAMSUNG_DELETE_MEMBER> SAMSUNG_DELETE_MEMBERs { get; set; }
        public virtual DbSet<SAMSUNG_DELIVERY> SAMSUNG_DELIVERies { get; set; }
        public virtual DbSet<SC_LOG> SC_LOGs { get; set; }
        public virtual DbSet<SC_TRAN> SC_TRANs { get; set; }
        public virtual DbSet<SEASON_MEMBER> SEASON_MEMBERs { get; set; }
        public virtual DbSet<SESSION_GENERATER> SESSION_GENERATERs { get; set; }
        public virtual DbSet<SH_Notice> SH_Notices { get; set; }
        public virtual DbSet<SMARTAD_CONTACT_U> SMARTAD_CONTACT_Us { get; set; }
        public virtual DbSet<SMARTAD_COUPON_MST> SMARTAD_COUPON_MSTs { get; set; }
        public virtual DbSet<SMARTAD_COUPON_SUB> SMARTAD_COUPON_SUBs { get; set; }
        public virtual DbSet<SMARTAD_EVENT_INFO> SMARTAD_EVENT_INFOs { get; set; }
        public virtual DbSet<SMARTAD_EVENT_REQUEST> SMARTAD_EVENT_REQUESTs { get; set; }
        public virtual DbSet<SMARTAD_MYCOUPON> SMARTAD_MYCOUPONs { get; set; }
        public virtual DbSet<SNS_CLICK> SNS_CLICKs { get; set; }
        public virtual DbSet<SQM_QA_TBL> SQM_QA_TBLs { get; set; }
        public virtual DbSet<SS_MMS_SEND_20190910> SS_MMS_SEND_20190910s { get; set; }
        public virtual DbSet<STORE_BARUNSON_ORDER_MATCHING> STORE_BARUNSON_ORDER_MATCHINGs { get; set; }
        public virtual DbSet<STORE_ORDER_DATE_SEND_LOG> STORE_ORDER_DATE_SEND_LOGs { get; set; }
        public virtual DbSet<SampleBook> SampleBooks { get; set; }
        public virtual DbSet<SampleBook_History> SampleBook_Histories { get; set; }
        public virtual DbSet<Sample_Addon> Sample_Addons { get; set; }
        public virtual DbSet<Season_estimate> Season_estimates { get; set; }
        public virtual DbSet<Sheet1_20200520> Sheet1_20200520s { get; set; }
        public virtual DbSet<SmartADNotice> SmartADNotices { get; set; }
        public virtual DbSet<SmartAD_Partner> SmartAD_Partners { get; set; }
        public virtual DbSet<SmartAD_Partner_AD> SmartAD_Partner_ADs { get; set; }
        public virtual DbSet<SmartAD_Partner_AD_IMAGE> SmartAD_Partner_AD_IMAGEs { get; set; }
        public virtual DbSet<StdMonth> StdMonths { get; set; }
        public virtual DbSet<SurveyAnswer> SurveyAnswers { get; set; }
        public virtual DbSet<SurveyMaster> SurveyMasters { get; set; }
        public virtual DbSet<SurveyQuestion> SurveyQuestions { get; set; }
        public virtual DbSet<SurveyResponse> SurveyResponses { get; set; }
        public virtual DbSet<TB_Holiday> TB_Holidays { get; set; }
        public virtual DbSet<TB_PB_COVER> TB_PB_COVERs { get; set; }
        public virtual DbSet<TB_PB_EPILOGUE> TB_PB_EPILOGUEs { get; set; }
        public virtual DbSet<TB_PB_OASI> TB_PB_OAses { get; set; }
        public virtual DbSet<TB_PB_PRODUCT> TB_PB_PRODUCTs { get; set; }
        public virtual DbSet<TB_PB_PROLOGUE> TB_PB_PROLOGUEs { get; set; }
        public virtual DbSet<TB_PB_SIZE> TB_PB_SIZEs { get; set; }
        public virtual DbSet<TB_PB_SKIN> TB_PB_SKINs { get; set; }
        public virtual DbSet<TB_PRODUCT_SIZE> TB_PRODUCT_SIZEs { get; set; }
        public virtual DbSet<TB_RESP_ACCOUNT> TB_RESP_ACCOUNTs { get; set; }
        public virtual DbSet<TB_RESP_BRANCH> TB_RESP_BRANCHes { get; set; }
        public virtual DbSet<TB_RESP_CARD> TB_RESP_CARDs { get; set; }
        public virtual DbSet<TB_RESP_CARD_BMC> TB_RESP_CARD_BMCs { get; set; }
        public virtual DbSet<TB_RESP_ETC> TB_RESP_ETCs { get; set; }
        public virtual DbSet<TB_RESP_EWED> TB_RESP_EWEDs { get; set; }
        public virtual DbSet<TB_RESP_EWEDD_BMC> TB_RESP_EWEDD_BMCs { get; set; }
        public virtual DbSet<TB_RESP_EWEDD_CBR> TB_RESP_EWEDD_CBRs { get; set; }
        public virtual DbSet<TB_RESP_LOG> TB_RESP_LOGs { get; set; }
        public virtual DbSet<TB_RESP_PHOTOBOOK_BMC> TB_RESP_PHOTOBOOK_BMCs { get; set; }
        public virtual DbSet<TB_RESP_PHOTOBOOK_CBR> TB_RESP_PHOTOBOOK_CBRs { get; set; }
        public virtual DbSet<TB_RESP_SAMPLE> TB_RESP_SAMPLEs { get; set; }
        public virtual DbSet<TB_RESP_SAMPLE_BMC> TB_RESP_SAMPLE_BMCs { get; set; }
        public virtual DbSet<TB_RESP_SAMPLE_CA> TB_RESP_SAMPLE_CAs { get; set; }
        public virtual DbSet<TB_RESP_SAMPLE_CBR> TB_RESP_SAMPLE_CBRs { get; set; }
        public virtual DbSet<TB_RESP_SEASON_BMC> TB_RESP_SEASON_BMCs { get; set; }
        public virtual DbSet<TB_RESP_SEASON_CBR> TB_RESP_SEASON_CBRs { get; set; }
        public virtual DbSet<TB_RESP_WEDD> TB_RESP_WEDDs { get; set; }
        public virtual DbSet<TB_RESP_WEDD_BMC> TB_RESP_WEDD_BMCs { get; set; }
        public virtual DbSet<TB_RESP_WEDD_CA> TB_RESP_WEDD_CAs { get; set; }
        public virtual DbSet<TB_RESP_WEDD_CBR> TB_RESP_WEDD_CBRs { get; set; }
        public virtual DbSet<THE_MEMBER_OUT> THE_MEMBER_OUTs { get; set; }
        public virtual DbSet<THE_ZZIM> THE_ZZIMs { get; set; }
        public virtual DbSet<TODAY_PRINTJOB> TODAY_PRINTJOBs { get; set; }
        public virtual DbSet<TU_Bestcard> TU_Bestcards { get; set; }
        public virtual DbSet<TU_Member> TU_Members { get; set; }
        public virtual DbSet<T_CCG> T_CCGs { get; set; }
        public virtual DbSet<The_Card_overture> The_Card_overtures { get; set; }
        public virtual DbSet<The_Card_overture_history> The_Card_overture_histories { get; set; }
        public virtual DbSet<The_Ewed_BGM> The_Ewed_BGMs { get; set; }
        public virtual DbSet<The_Ewed_Best> The_Ewed_Bests { get; set; }
        public virtual DbSet<The_Ewed_Coupon> The_Ewed_Coupons { get; set; }
        public virtual DbSet<The_Ewed_FAQ> The_Ewed_FAQs { get; set; }
        public virtual DbSet<The_Ewed_MyBGM> The_Ewed_MyBGMs { get; set; }
        public virtual DbSet<The_Ewed_Order> The_Ewed_Orders { get; set; }
        public virtual DbSet<The_Ewed_Order_DELETE> The_Ewed_Order_DELETEs { get; set; }
        public virtual DbSet<The_Ewed_Product> The_Ewed_Products { get; set; }
        public virtual DbSet<The_Member> The_Members { get; set; }
        public virtual DbSet<TiaraBestRanking> TiaraBestRankings { get; set; }
        public virtual DbSet<Tiara_Event> Tiara_Events { get; set; }
        public virtual DbSet<Tiara_Member> Tiara_Members { get; set; }
        public virtual DbSet<Tiara_ProdView> Tiara_ProdViews { get; set; }
        public virtual DbSet<Tiara_basket> Tiara_baskets { get; set; }
        public virtual DbSet<Tiara_board> Tiara_boards { get; set; }
        public virtual DbSet<UserInfo_Bhands_ci> UserInfo_Bhands_cis { get; set; }
        public virtual DbSet<UserInfo_TheCard_ci> UserInfo_TheCard_cis { get; set; }
        public virtual DbSet<UserInfo_ci> UserInfo_cis { get; set; }
        public virtual DbSet<Util_Date> Util_Dates { get; set; }
        public virtual DbSet<VSTAT_CARD> VSTAT_CARDs { get; set; }
        public virtual DbSet<VSTAT_ICON> VSTAT_ICONs { get; set; }
        public virtual DbSet<VSTAT_SITE> VSTAT_SITEs { get; set; }
        public virtual DbSet<VSTAT_SITE_EPOST> VSTAT_SITE_EPOSTs { get; set; }
        public virtual DbSet<VW_COUPONTYPE_ORDER_AMT> VW_COUPONTYPE_ORDER_AMTs { get; set; }
        public virtual DbSet<VW_COUPON_CALC_FOR_CO> VW_COUPON_CALC_FOR_COs { get; set; }
        public virtual DbSet<VW_COUPON_CALC_FOR_CO_20200303_bak> VW_COUPON_CALC_FOR_CO_20200303_baks { get; set; }
        public virtual DbSet<VW_COUPON_CALC_FOR_CO_TEST> VW_COUPON_CALC_FOR_CO_TESTs { get; set; }
        public virtual DbSet<VW_COUPON_CALC_FOR_CO_nsm> VW_COUPON_CALC_FOR_CO_nsms { get; set; }
        public virtual DbSet<VW_COUPON_USER_LIST> VW_COUPON_USER_LISTs { get; set; }
        public virtual DbSet<VW_DELIVERY_MST> VW_DELIVERY_MSTs { get; set; }
        public virtual DbSet<VW_HALL_SALES_STATIC> VW_HALL_SALES_STATICs { get; set; }
        public virtual DbSet<VW_MO_TRAN> VW_MO_TRANs { get; set; }
        public virtual DbSet<VW_OUTSOURCING_ORDER_MST> VW_OUTSOURCING_ORDER_MSTs { get; set; }
        public virtual DbSet<VW_USER_INFO> VW_USER_INFOs { get; set; }
        public virtual DbSet<VW_USER_INFO_ASTERISK> VW_USER_INFO_ASTERISKs { get; set; }
        public virtual DbSet<VW_WEDDING_HALL> VW_WEDDING_HALLs { get; set; }
        public virtual DbSet<V_BoardList> V_BoardLists { get; set; }
        public virtual DbSet<V_OrderGroupDetailList> V_OrderGroupDetailLists { get; set; }
        public virtual DbSet<V_OrderGroupList> V_OrderGroupLists { get; set; }
        public virtual DbSet<V_order_list> V_order_lists { get; set; }
        public virtual DbSet<V_order_list_v2> V_order_list_v2s { get; set; }
        public virtual DbSet<Visit_Reservation> Visit_Reservations { get; set; }
        public virtual DbSet<WEDD_FAQ> WEDD_FAQs { get; set; }
        public virtual DbSet<WEDD_MAIL> WEDD_MAILs { get; set; }
        public virtual DbSet<WeddingHall> WeddingHalls { get; set; }
        public virtual DbSet<WeddingHall_Image> WeddingHall_Images { get; set; }
        public virtual DbSet<WeddingHall_Log> WeddingHall_Logs { get; set; }
        public virtual DbSet<Weddinghall_location> Weddinghall_locations { get; set; }
        public virtual DbSet<Wish_OSI> Wish_OSIs { get; set; }
        public virtual DbSet<XBBS_ARTICLE> XBBS_ARTICLEs { get; set; }
        public virtual DbSet<XBBS_INFO> XBBS_INFOs { get; set; }
        public virtual DbSet<Yoosami> Yoosamis { get; set; }
        public virtual DbSet<antHall> antHalls { get; set; }
        public virtual DbSet<ata_banlist> ata_banlists { get; set; }
        public virtual DbSet<ata_mmt_log> ata_mmt_logs { get; set; }
        public virtual DbSet<ata_mmt_log_201803> ata_mmt_log_201803s { get; set; }
        public virtual DbSet<ata_mmt_log_201804> ata_mmt_log_201804s { get; set; }
        public virtual DbSet<ata_mmt_log_201805> ata_mmt_log_201805s { get; set; }
        public virtual DbSet<ata_mmt_log_201806> ata_mmt_log_201806s { get; set; }
        public virtual DbSet<ata_mmt_log_201807> ata_mmt_log_201807s { get; set; }
        public virtual DbSet<ata_mmt_log_201808> ata_mmt_log_201808s { get; set; }
        public virtual DbSet<ata_mmt_log_201809> ata_mmt_log_201809s { get; set; }
        public virtual DbSet<ata_mmt_log_201810> ata_mmt_log_201810s { get; set; }
        public virtual DbSet<ata_mmt_log_201811> ata_mmt_log_201811s { get; set; }
        public virtual DbSet<ata_mmt_log_201812> ata_mmt_log_201812s { get; set; }
        public virtual DbSet<ata_mmt_log_201901> ata_mmt_log_201901s { get; set; }
        public virtual DbSet<ata_mmt_log_201902> ata_mmt_log_201902s { get; set; }
        public virtual DbSet<ata_mmt_log_201903> ata_mmt_log_201903s { get; set; }
        public virtual DbSet<ata_mmt_log_201904> ata_mmt_log_201904s { get; set; }
        public virtual DbSet<ata_mmt_log_201905> ata_mmt_log_201905s { get; set; }
        public virtual DbSet<ata_mmt_log_201906> ata_mmt_log_201906s { get; set; }
        public virtual DbSet<ata_mmt_log_201907> ata_mmt_log_201907s { get; set; }
        public virtual DbSet<ata_mmt_log_201908> ata_mmt_log_201908s { get; set; }
        public virtual DbSet<ata_mmt_log_201909> ata_mmt_log_201909s { get; set; }
        public virtual DbSet<ata_mmt_log_201910> ata_mmt_log_201910s { get; set; }
        public virtual DbSet<ata_mmt_log_201911> ata_mmt_log_201911s { get; set; }
        public virtual DbSet<ata_mmt_log_201912> ata_mmt_log_201912s { get; set; }
        public virtual DbSet<ata_mmt_log_202001> ata_mmt_log_202001s { get; set; }
        public virtual DbSet<ata_mmt_log_202002> ata_mmt_log_202002s { get; set; }
        public virtual DbSet<ata_mmt_log_202003> ata_mmt_log_202003s { get; set; }
        public virtual DbSet<ata_mmt_log_202004> ata_mmt_log_202004s { get; set; }
        public virtual DbSet<ata_mmt_log_202005> ata_mmt_log_202005s { get; set; }
        public virtual DbSet<ata_mmt_log_202006> ata_mmt_log_202006s { get; set; }
        public virtual DbSet<ata_mmt_log_202007> ata_mmt_log_202007s { get; set; }
        public virtual DbSet<ata_mmt_log_202008> ata_mmt_log_202008s { get; set; }
        public virtual DbSet<ata_mmt_log_202009> ata_mmt_log_202009s { get; set; }
        public virtual DbSet<ata_mmt_log_202010> ata_mmt_log_202010s { get; set; }
        public virtual DbSet<ata_mmt_log_202011> ata_mmt_log_202011s { get; set; }
        public virtual DbSet<ata_mmt_log_202012> ata_mmt_log_202012s { get; set; }
        public virtual DbSet<ata_mmt_log_202101> ata_mmt_log_202101s { get; set; }
        public virtual DbSet<ata_mmt_log_202102> ata_mmt_log_202102s { get; set; }
        public virtual DbSet<ata_mmt_tran> ata_mmt_trans { get; set; }
        public virtual DbSet<barunToclosed_history_log> barunToclosed_history_logs { get; set; }
        public virtual DbSet<barunToclosed_log> barunToclosed_logs { get; set; }
        public virtual DbSet<barunson_authinfo> barunson_authinfos { get; set; }
        public virtual DbSet<barunson_day_count> barunson_day_counts { get; set; }
        public virtual DbSet<bbarunson_log> bbarunson_logs { get; set; }
        public virtual DbSet<bbarunson_notice> bbarunson_notices { get; set; }
        public virtual DbSet<bhands_day_count> bhands_day_counts { get; set; }
        public virtual DbSet<board_basic_info> board_basic_infos { get; set; }
        public virtual DbSet<board_filter_info> board_filter_infos { get; set; }
        public virtual DbSet<bsmall_main_view> bsmall_main_views { get; set; }
        public virtual DbSet<card_bb> card_bbs { get; set; }
        public virtual DbSet<card_design> card_designs { get; set; }
        public virtual DbSet<card_design_detail> card_design_details { get; set; }
        public virtual DbSet<card_discount> card_discounts { get; set; }
        public virtual DbSet<card_discount_rate_2u> card_discount_rate_2us { get; set; }
        public virtual DbSet<card_discount_season> card_discount_seasons { get; set; }
        public virtual DbSet<card_faq> card_faqs { get; set; }
        public virtual DbSet<card_printinfo> card_printinfos { get; set; }
        public virtual DbSet<choan_admin_log> choan_admin_logs { get; set; }
        public virtual DbSet<concierge_wedding_info> concierge_wedding_infos { get; set; }
        public virtual DbSet<coperation> coperations { get; set; }
        public virtual DbSet<cost_zipcode> cost_zipcodes { get; set; }
        public virtual DbSet<custom_card_faq> custom_card_faqs { get; set; }
        public virtual DbSet<custom_cms_msg> custom_cms_msgs { get; set; }
        public virtual DbSet<custom_info> custom_infos { get; set; }
        public virtual DbSet<custom_order> custom_orders { get; set; }
        public virtual DbSet<custom_order_OtherInfo> custom_order_OtherInfos { get; set; }
        public virtual DbSet<custom_order_WeddInfo> custom_order_WeddInfos { get; set; }
        public virtual DbSet<custom_order_agreement> custom_order_agreements { get; set; }
        public virtual DbSet<custom_order_cprice> custom_order_cprices { get; set; }
        public virtual DbSet<custom_order_file> custom_order_files { get; set; }
        public virtual DbSet<custom_order_history> custom_order_histories { get; set; }
        public virtual DbSet<custom_order_item> custom_order_items { get; set; }
        public virtual DbSet<custom_order_passbook> custom_order_passbooks { get; set; }
        public virtual DbSet<custom_order_plist> custom_order_plists { get; set; }
        public virtual DbSet<custom_order_plistAddD> custom_order_plistAddDs { get; set; }
        public virtual DbSet<custom_order_plistAddG> custom_order_plistAddGs { get; set; }
        public virtual DbSet<custom_order_plistAddN> custom_order_plistAddNs { get; set; }
        public virtual DbSet<custom_order_plistAddT> custom_order_plistAddTs { get; set; }
        public virtual DbSet<custom_order_plistAddText> custom_order_plistAddTexts { get; set; }
        public virtual DbSet<custom_order_plistSVG> custom_order_plistSVGs { get; set; }
        public virtual DbSet<custom_order_plist_svg> custom_order_plist_svgs { get; set; }
        public virtual DbSet<custom_order_printW> custom_order_printWs { get; set; }
        public virtual DbSet<custom_order_print_state> custom_order_print_states { get; set; }
        public virtual DbSet<custom_order_printjob> custom_order_printjobs { get; set; }
        public virtual DbSet<custom_order_quick> custom_order_quicks { get; set; }
        public virtual DbSet<custom_order_refund> custom_order_refunds { get; set; }
        public virtual DbSet<custom_order_tax> custom_order_taxes { get; set; }
        public virtual DbSet<custom_order_tmap> custom_order_tmaps { get; set; }
        public virtual DbSet<custom_order_trouble> custom_order_troubles { get; set; }
        public virtual DbSet<custom_order_unicef> custom_order_unicefs { get; set; }
        public virtual DbSet<data_dump_dt> data_dump_dts { get; set; }
        public virtual DbSet<dcake_address> dcake_addresses { get; set; }
        public virtual DbSet<deardeer_order_rel> deardeer_order_rels { get; set; }
        public virtual DbSet<deardeer_product> deardeer_products { get; set; }
        public virtual DbSet<del_tmp> del_tmps { get; set; }
        public virtual DbSet<design_env_group> design_env_groups { get; set; }
        public virtual DbSet<eco_card_list> eco_card_lists { get; set; }
        public virtual DbSet<env_image> env_images { get; set; }
        public virtual DbSet<event_CardDiscount> event_CardDiscounts { get; set; }
        public virtual DbSet<event_sale_carddiscount> event_sale_carddiscounts { get; set; }
        public virtual DbSet<event_sms_coupon> event_sms_coupons { get; set; }
        public virtual DbSet<evt_himo_coupon> evt_himo_coupons { get; set; }
        public virtual DbSet<evt_leaflet_Card> evt_leaflet_Cards { get; set; }
        public virtual DbSet<evt_mem_regist_gift> evt_mem_regist_gifts { get; set; }
        public virtual DbSet<evt_memoerybook_gift> evt_memoerybook_gifts { get; set; }
        public virtual DbSet<evt_travelpack_st> evt_travelpack_sts { get; set; }
        public virtual DbSet<ewed_ATTEND_LIST> ewed_ATTEND_LISTs { get; set; }
        public virtual DbSet<ewed_BUY_CARD> ewed_BUY_CARDs { get; set; }
        public virtual DbSet<ewed_BUY_CARD_CONTENT> ewed_BUY_CARD_CONTENTs { get; set; }
        public virtual DbSet<ewed_BUY_SETTLE_INFO> ewed_BUY_SETTLE_INFOs { get; set; }
        public virtual DbSet<ewed_CARD_INFO> ewed_CARD_INFOs { get; set; }
        public virtual DbSet<ewed_CARD_USER_COMMNET> ewed_CARD_USER_COMMNETs { get; set; }
        public virtual DbSet<ewed_Music_Datum> ewed_Music_Data { get; set; }
        public virtual DbSet<ewed_Notice> ewed_Notices { get; set; }
        public virtual DbSet<ewed_Notice_daum> ewed_Notice_daums { get; set; }
        public virtual DbSet<ewed_Open_Text> ewed_Open_Texts { get; set; }
        public virtual DbSet<ewed_Order_Detail> ewed_Order_Details { get; set; }
        public virtual DbSet<ewed_Order_MemoDay> ewed_Order_MemoDays { get; set; }
        public virtual DbSet<ewed_Order_Photo> ewed_Order_Photos { get; set; }
        public virtual DbSet<ewed_Order_Settle> ewed_Order_Settles { get; set; }
        public virtual DbSet<ewed_RESULT_LIST> ewed_RESULT_LISTs { get; set; }
        public virtual DbSet<ewed_SM> ewed_SMs { get; set; }
        public virtual DbSet<ewed_SMS_Service> ewed_SMS_Services { get; set; }
        public virtual DbSet<ewed_VISIT_NOTE> ewed_VISIT_NOTEs { get; set; }
        public virtual DbSet<ewed_Visit> ewed_Visits { get; set; }
        public virtual DbSet<ewed_Wedding_Attend> ewed_Wedding_Attends { get; set; }
        public virtual DbSet<ewed_address> ewed_addresses { get; set; }
        public virtual DbSet<ewed_coupon> ewed_coupons { get; set; }
        public virtual DbSet<ewed_event_mailing> ewed_event_mailings { get; set; }
        public virtual DbSet<ewed_event_question> ewed_event_questions { get; set; }
        public virtual DbSet<ewed_miniCD_INFO> ewed_miniCD_INFOs { get; set; }
        public virtual DbSet<ewed_order_detail_B> ewed_order_detail_Bs { get; set; }
        public virtual DbSet<ewed_order_detail_D> ewed_order_detail_Ds { get; set; }
        public virtual DbSet<ewed_order_detail_P1> ewed_order_detail_P1s { get; set; }
        public virtual DbSet<ewed_order_detail_P2> ewed_order_detail_P2s { get; set; }
        public virtual DbSet<ewed_order_detail_P3> ewed_order_detail_P3s { get; set; }
        public virtual DbSet<ewed_order_detail_P4> ewed_order_detail_P4s { get; set; }
        public virtual DbSet<ewed_order_detail_T> ewed_order_detail_Ts { get; set; }
        public virtual DbSet<ewed_order_info> ewed_order_infos { get; set; }
        public virtual DbSet<ewed_order_opinion> ewed_order_opinions { get; set; }
        public virtual DbSet<ewed_order_weddinfo> ewed_order_weddinfos { get; set; }
        public virtual DbSet<ewed_order_work> ewed_order_works { get; set; }
        public virtual DbSet<ewed_user_mailgroup> ewed_user_mailgroups { get; set; }
        public virtual DbSet<eweddCD> eweddCDs { get; set; }
        public virtual DbSet<except_choan_view_list> except_choan_view_lists { get; set; }
        public virtual DbSet<getOverture> getOvertures { get; set; }
        public virtual DbSet<gift_company_tel> gift_company_tels { get; set; }
        public virtual DbSet<greeting_category_nvarchar> greeting_category_nvarchars { get; set; }
        public virtual DbSet<greeting_nvarchar> greeting_nvarchars { get; set; }
        public virtual DbSet<guestbook_order> guestbook_orders { get; set; }
        public virtual DbSet<gurim_coupon_event> gurim_coupon_events { get; set; }
        public virtual DbSet<hanjin_ErrLog> hanjin_ErrLogs { get; set; }
        public virtual DbSet<hanssem> hanssems { get; set; }
        public virtual DbSet<history> histories { get; set; }
        public virtual DbSet<holiday> holidays { get; set; }
        public virtual DbSet<inipay_vbank_log> inipay_vbank_logs { get; set; }
        public virtual DbSet<interparktour_coupon_event> interparktour_coupon_events { get; set; }
        public virtual DbSet<iwedding_Sending> iwedding_Sendings { get; set; }
        public virtual DbSet<jehu_memo> jehu_memos { get; set; }
        public virtual DbSet<jehu_no_coupon_event> jehu_no_coupon_events { get; set; }
        public virtual DbSet<jehu_send_mm> jehu_send_mms { get; set; }
        public virtual DbSet<jehucoupon_noCard> jehucoupon_noCards { get; set; }
        public virtual DbSet<m_count> m_counts { get; set; }
        public virtual DbSet<manage_code> manage_codes { get; set; }
        public virtual DbSet<mcard_Admin> mcard_Admins { get; set; }
        public virtual DbSet<mcard_Auth> mcard_Auths { get; set; }
        public virtual DbSet<mcard_Comment> mcard_Comments { get; set; }
        public virtual DbSet<mcard_Gallery> mcard_Galleries { get; set; }
        public virtual DbSet<mcard_Gift> mcard_Gifts { get; set; }
        public virtual DbSet<mcard_Greeting> mcard_Greetings { get; set; }
        public virtual DbSet<mcard_Invitation> mcard_Invitations { get; set; }
        public virtual DbSet<mcard_InvitationBaby> mcard_InvitationBabies { get; set; }
        public virtual DbSet<mcard_InvitationGiftRel> mcard_InvitationGiftRels { get; set; }
        public virtual DbSet<mcard_InvitationParty> mcard_InvitationParties { get; set; }
        public virtual DbSet<mcard_InvitationWedding> mcard_InvitationWeddings { get; set; }
        public virtual DbSet<mcard_Invitation_log> mcard_Invitation_logs { get; set; }
        public virtual DbSet<mcard_LogInvitation> mcard_LogInvitations { get; set; }
        public virtual DbSet<mcard_Skin> mcard_Skins { get; set; }
        public virtual DbSet<mcard_TmpInvitation> mcard_TmpInvitations { get; set; }
        public virtual DbSet<mcard_TmpInvitationGiftRel> mcard_TmpInvitationGiftRels { get; set; }
        public virtual DbSet<mcard_TmpInvitationOption> mcard_TmpInvitationOptions { get; set; }
        public virtual DbSet<metingg> metinggs { get; set; }
        public virtual DbSet<mobile_ad_visit> mobile_ad_visits { get; set; }
        public virtual DbSet<oneclick_sample> oneclick_samples { get; set; }
        public virtual DbSet<ordList_new> ordList_news { get; set; }
        public virtual DbSet<orderLst> orderLsts { get; set; }
        public virtual DbSet<orderLst_20080922> orderLst_20080922s { get; set; }
        public virtual DbSet<orderLst_new> orderLst_news { get; set; }
        public virtual DbSet<orderLst_test> orderLst_tests { get; set; }
        public virtual DbSet<photobook_myCouponList> photobook_myCouponLists { get; set; }
        public virtual DbSet<photobook_order_detailV> photobook_order_detailVs { get; set; }
        public virtual DbSet<photobook_order_detail_erp> photobook_order_detail_erps { get; set; }
        public virtual DbSet<photobook_prod_price> photobook_prod_prices { get; set; }
        public virtual DbSet<preView_ChkList> preView_ChkLists { get; set; }
        public virtual DbSet<printjob_order_seq> printjob_order_seqs { get; set; }
        public virtual DbSet<recycle_agree_log> recycle_agree_logs { get; set; }
        public virtual DbSet<research_log> research_logs { get; set; }
        public virtual DbSet<research_qlist_Detail> research_qlist_Details { get; set; }
        public virtual DbSet<s2_card_dd> s2_card_dds { get; set; }
        public virtual DbSet<s2_event_UserComment_url> s2_event_UserComment_urls { get; set; }
        public virtual DbSet<s4_CardBest100> s4_CardBest100s { get; set; }
        public virtual DbSet<s4_md_choice_jehu> s4_md_choice_jehus { get; set; }
        public virtual DbSet<s4_poll_user_reply> s4_poll_user_replies { get; set; }
        public virtual DbSet<sb_samplebook_item> sb_samplebook_items { get; set; }
        public virtual DbSet<shakr_coupon_event> shakr_coupon_events { get; set; }
        public virtual DbSet<sticker_count> sticker_counts { get; set; }
        public virtual DbSet<super7day_sm> super7day_sms { get; set; }
        public virtual DbSet<tCouponMst> tCouponMsts { get; set; }
        public virtual DbSet<tCouponMst_SmartAD> tCouponMst_SmartADs { get; set; }
        public virtual DbSet<tCouponOff> tCouponOffs { get; set; }
        public virtual DbSet<tCouponSub> tCouponSubs { get; set; }
        public virtual DbSet<tCouponSub1> tCouponSub1s { get; set; }
        public virtual DbSet<tCouponSub_SmartAD> tCouponSub_SmartADs { get; set; }
        public virtual DbSet<tCouponTarget> tCouponTargets { get; set; }
        public virtual DbSet<tCouponTermBrand> tCouponTermBrands { get; set; }
        public virtual DbSet<tCouponTermCategory> tCouponTermCategories { get; set; }
        public virtual DbSet<tCouponTermEvent> tCouponTermEvents { get; set; }
        public virtual DbSet<tCouponTermItem> tCouponTermItems { get; set; }
        public virtual DbSet<tCouponTermVnd> tCouponTermVnds { get; set; }
        public virtual DbSet<tCouponUseItem> tCouponUseItems { get; set; }
        public virtual DbSet<tEvent> tEvents { get; set; }
        public virtual DbSet<tEventBotItem> tEventBotItems { get; set; }
        public virtual DbSet<tEventBotTemplete> tEventBotTempletes { get; set; }
        public virtual DbSet<tEventRelationBanner> tEventRelationBanners { get; set; }
        public virtual DbSet<tJobCode> tJobCodes { get; set; }
        public virtual DbSet<tMember_secede> tMember_secedes { get; set; }
        public virtual DbSet<tNeo_Queue> tNeo_Queues { get; set; }
        public virtual DbSet<tUserInfo> tUserInfos { get; set; }
        public virtual DbSet<t_card> t_cards { get; set; }
        public virtual DbSet<temp0307> temp0307s { get; set; }
        public virtual DbSet<temp0322> temp0322s { get; set; }
        public virtual DbSet<temp190405> temp190405s { get; set; }
        public virtual DbSet<temp_choansum> temp_choansums { get; set; }
        public virtual DbSet<temp_gift_company> temp_gift_companies { get; set; }
        public virtual DbSet<temp_year> temp_years { get; set; }
        public virtual DbSet<tmp_20200622> tmp_20200622s { get; set; }
        public virtual DbSet<tmp_order_flow_180314> tmp_order_flow_180314s { get; set; }
        public virtual DbSet<tmp_sample_order> tmp_sample_orders { get; set; }
        public virtual DbSet<vCardWeight> vCardWeights { get; set; }
        public virtual DbSet<vPB_PROD> vPB_PRODs { get; set; }
        public virtual DbSet<view_Bestseller> view_Bestsellers { get; set; }
        public virtual DbSet<view_Comment> view_Comments { get; set; }
        public virtual DbSet<view_CopyItem> view_CopyItems { get; set; }
        public virtual DbSet<view_DeliveryLst> view_DeliveryLsts { get; set; }
        public virtual DbSet<view_OB_Card> view_OB_Cards { get; set; }
        public virtual DbSet<view_OB_Company> view_OB_Companies { get; set; }
        public virtual DbSet<view_OB_Order> view_OB_Orders { get; set; }
        public virtual DbSet<view_S4EventInstall> view_S4EventInstalls { get; set; }
        public virtual DbSet<view_SampleList> view_SampleLists { get; set; }
        public virtual DbSet<view_UsrInfo> view_UsrInfos { get; set; }
        public virtual DbSet<view_UsrQnA> view_UsrQnAs { get; set; }
        public virtual DbSet<view_cardRank> view_cardRanks { get; set; }
        public virtual DbSet<view_emBoard> view_emBoards { get; set; }
        public virtual DbSet<wed_Notice> wed_Notices { get; set; }
        public virtual DbSet<wedd_biztalk> wedd_biztalks { get; set; }
        public virtual DbSet<weddinghall_information> weddinghall_informations { get; set; }
        public virtual DbSet<weddinghall_tmp> weddinghall_tmps { get; set; }
        public virtual DbSet<weddinghallbest_click> weddinghallbest_clicks { get; set; }
        public virtual DbSet<wish_rate> wish_rates { get; set; }
        public virtual DbSet<zip_busan> zip_busans { get; set; }
        public virtual DbSet<zip_ch_buk> zip_ch_buks { get; set; }
        public virtual DbSet<zip_ch_nam> zip_ch_nams { get; set; }
        public virtual DbSet<zip_daegu> zip_daegus { get; set; }
        public virtual DbSet<zip_daejeon> zip_daejeons { get; set; }
        public virtual DbSet<zip_gangwon> zip_gangwons { get; set; }
        public virtual DbSet<zip_gwangju> zip_gwangjus { get; set; }
        public virtual DbSet<zip_gyeonggi> zip_gyeonggis { get; set; }
        public virtual DbSet<zip_incheon> zip_incheons { get; set; }
        public virtual DbSet<zip_jeju> zip_jejus { get; set; }
        public virtual DbSet<zip_junbuk> zip_junbuks { get; set; }
        public virtual DbSet<zip_junnam> zip_junnams { get; set; }
        public virtual DbSet<zip_ks_buk> zip_ks_buks { get; set; }
        public virtual DbSet<zip_ks_nam> zip_ks_nams { get; set; }
        public virtual DbSet<zip_sejong> zip_sejongs { get; set; }
        public virtual DbSet<zip_seoul> zip_seouls { get; set; }
        public virtual DbSet<zip_ulsan> zip_ulsans { get; set; }
        public virtual DbSet<zipcode> zipcodes { get; set; }
        public virtual DbSet<zipcode_hanjin> zipcode_hanjins { get; set; }
        public virtual DbSet<zipcode_new> zipcode_news { get; set; }
        public virtual DbSet<zipcode_street> zipcode_streets { get; set; }
        public virtual DbSet<zipcode_street_N> zipcode_street_Ns { get; set; }
        public virtual DbSet<zipcode_tbl> zipcode_tbls { get; set; }

        #endregion

        #region 내부 함수
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Korean_Wansung_CI_AS");

            modelBuilder.Entity<ADMIN_CONNECT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ADMIN_CONNECT");

                entity.HasComment("관리자 접속정보");

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("관리자 아이디");

                entity.Property(e => e.last_update)
                    .HasColumnType("smalldatetime")
                    .HasComment("최종접속시간");

                entity.Property(e => e.login_date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("접속일");

                entity.Property(e => e.login_ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("아이피");
            });

            modelBuilder.Entity<ADMIN_LST>(entity =>
            {
                entity.HasKey(e => e.ADMIN_ID)
                    .HasName("PK__ADMIN_LST__5EBF139D");

                entity.ToTable("ADMIN_LST");

                entity.HasComment("빠른손 관리자 목록");

                entity.Property(e => e.ADMIN_ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("관리자ID");

                entity.Property(e => e.ADMIN_EMAIL)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ADMIN_LEVEL).HasComment("1일때 전체권한,0일때 e청첩장 관리");

                entity.Property(e => e.ADMIN_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ADMIN_PASSWD)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ADMIN_PHONE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CMS_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("콜센터 어드민 아이디");

                entity.Property(e => e.CMS_NUM)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("콜센터 접속 전화번호");

                entity.Property(e => e.COMPANY_GUBUN)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("1:온라인,2:매장/영업");

                entity.Property(e => e.COMPANY_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true);

                entity.Property(e => e.adLevel).HasDefaultValueSql("((9))");

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.isAlba)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("1일때 외부 재택 작업자");

                entity.Property(e => e.isCS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("1일때 CS 콜센터");

                entity.Property(e => e.isDesigner)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("1일때 초안작업자");

                entity.Property(e => e.isDeveloper)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("1일때 빠른손 로그인 가능");

                entity.Property(e => e.isDown)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("1일때 해당 작업자 주문코렐 다운로드");

                entity.Property(e => e.isPackingSMS)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("1일때 재택/퀵 포장완료시  문자발송");

                entity.Property(e => e.isViewNoticeYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.HasOne(d => d.COMPANY_SEQNavigation)
                    .WithMany(p => p.ADMIN_LSTs)
                    .HasForeignKey(d => d.COMPANY_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ADMIN_LST__COMPA__52793849");
            });

            modelBuilder.Entity<ADMIN_PRICE_LOGINFO>(entity =>
            {
                entity.HasKey(e => e.Seq);

                entity.ToTable("ADMIN_PRICE_LOGINFO");

                entity.HasComment("관리자 상품가격변경 로그");

                entity.Property(e => e.AdminId)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AdminName).HasMaxLength(50);

                entity.Property(e => e.Ip)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<APP_VERSION_MST>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("APP_VERSION_MST");

                entity.Property(e => e.DEVICE_TYPE_CODE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<AUTO_CHOAN_APP_STATUS_LOG>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("AUTO_CHOAN_APP_STATUS_LOG");

                entity.Property(e => e.APP_NAME)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.APP_STATUS)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.MACHINE_IP)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<AUTO_CHOAN_LOG>(entity =>
            {
                entity.HasKey(e => e.SEQ)
                    .HasName("PK_AUTO_CHOAN_HISTORY");

                entity.ToTable("AUTO_CHOAN_LOG");

                entity.HasComment("자동초안 로그");

                entity.Property(e => e.DESCRIPTION)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.LOCATION)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MESSAGE)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_SEQ).HasComment("주문seq");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.REG_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REG_IP)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SUB_LOCATION)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Admin_LoginIpInfo>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("Admin_LoginIpInfo");

                entity.HasComment("관리자 접속 로그");

                entity.Property(e => e.ip)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.referer_url)
                    .HasMaxLength(500)
                    .HasComment("유입 url");

                entity.Property(e => e.regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.seq)
                    .ValueGeneratedOnAdd()
                    .HasComment("순번");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("관리자id");

                entity.Property(e => e.umail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("관리자 이메일");

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .HasComment("관리자명");

                entity.Property(e => e.user_agent).HasMaxLength(4000);
            });

            modelBuilder.Entity<Admin_Menu>(entity =>
            {
                entity.HasKey(e => e.AM_Idx);

                entity.ToTable("Admin_Menu");

                entity.HasComment("더카드전용 관리자 메뉴");

                entity.Property(e => e.AM_Code1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AM_Code2)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AM_Code3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AM_Code_Merge).HasMaxLength(8);

                entity.Property(e => e.AM_Image1).HasMaxLength(100);

                entity.Property(e => e.AM_Image2).HasMaxLength(100);

                entity.Property(e => e.AM_Image3).HasMaxLength(100);

                entity.Property(e => e.AM_Name).HasMaxLength(50);

                entity.Property(e => e.AM_Regdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AM_SiteID).HasDefaultValueSql("((5007))");

                entity.Property(e => e.AM_Status).HasDefaultValueSql("((1))");

                entity.Property(e => e.AM_URL).HasMaxLength(200);
            });

            modelBuilder.Entity<AgaBarunson_Member>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AgaBarunson_Member");

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addressCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.birth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.chk_ad)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_event)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mailservice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_penpal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.isLunar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.login_date).HasColumnType("datetime");

                entity.Property(e => e.login_date_latest).HasColumnType("datetime");

                entity.Property(e => e.mail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phoneCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pw)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.rdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<AliveCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AliveCheck");

                entity.HasComment("실사용자확인");

                entity.Property(e => e.Gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Site_Gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AliveCheck_Info>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AliveCheck_Info");

                entity.HasComment("라이브체크정보");

                entity.Property(e => e.Order_Check)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sample_Check)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Settle_Check)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Site_Gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Authorization_SM>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Authorization_SMS");

                entity.HasComment("SMS 인증 로그");

                entity.Property(e => e.GUID)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HPHONE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.SEQ).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<BANNER_MST>(entity =>
            {
                entity.HasKey(e => e.BANNER_SEQ);

                entity.ToTable("BANNER_MST");

                entity.HasComment("더카드 배너관리");

                entity.Property(e => e.BANNER_IMAGE_URL)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BANNER_TITLE)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BANNER_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("M메인배너_L왼쪽소배너_R오른쪽소배너_P팝업배너_N공지팝업");

                entity.Property(e => e.DISPLAY_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PAGE_LINK_URL)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.REG_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UPD_DATE).HasColumnType("datetime");

                entity.Property(e => e.UPD_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BARUNN_INTEGRATE_USER_CHANGE_PROGRESS_LOG>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("BARUNN_INTEGRATE_USER_CHANGE_PROGRESS_LOG");

                entity.HasComment("전환 진행중 상태  로그");

                entity.Property(e => e.DUPINFO)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ID)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.STEP)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.STEP_DESC)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BC_Career>(entity =>
            {
                entity.HasKey(e => e.Career_Seq);

                entity.ToTable("BC_Career");

                entity.HasComment("채용관련");

                entity.Property(e => e.AnyTime)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.EndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Hidden)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.Position)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SubTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BC_CareerContent>(entity =>
            {
                entity.HasKey(e => e.CareerContent_Seq);

                entity.ToTable("BC_CareerContent");

                entity.HasComment("채용내용");

                entity.Property(e => e.Contents).IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BEAUTYBOX_ITEM_MST>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("BEAUTYBOX_ITEM_MST");

                entity.HasComment("BEAUTYBOX_ITEM_MST");

                entity.Property(e => e.IDATE).HasColumnType("datetime");

                entity.Property(e => e.ITEM_CODE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ITEM_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.STOCK_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<BENEFIT_BANNER>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("BENEFIT_BANNER");

                entity.HasComment("혜택배너");

                entity.Property(e => e.ALWAYS_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .HasComment("상시노출(Y:상시 N)");

                entity.Property(e => e.BAND_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.B_BACK_COLOR)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("배경 컬러코드");

                entity.Property(e => e.B_IMG)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("배너 이미지 경로");

                entity.Property(e => e.B_TYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("타입(L:대메뉴 M:중메뉴 S:소메뉴)별 위치");

                entity.Property(e => e.B_TYPE_NO).HasComment("1:진행 2:대기 3:대체");

                entity.Property(e => e.CREATED_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CREATED_UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DELETE_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .HasComment("기간이 남은 리스트를 삭제한 경우Y");

                entity.Property(e => e.DISPLAY_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .HasComment("전시유무(Y:전시 N:비전시)");

                entity.Property(e => e.END_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .HasComment("종료유무(Y:종료 N:미종료)");

                entity.Property(e => e.EVENT_E_DT)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("이벤트 종료일");

                entity.Property(e => e.EVENT_S_DT)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("이벤트 시작일");

                entity.Property(e => e.JEHU_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("제휴배너");

                entity.Property(e => e.MAIN_TITLE)
                    .HasMaxLength(100)
                    .HasComment("메인 타이틀(제목)");

                entity.Property(e => e.NEW_BLANK_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("새창띄움");

                entity.Property(e => e.PAGE_URL)
                    .HasMaxLength(100)
                    .HasComment("페이지 연결URL");

                entity.Property(e => e.REPLACE_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .HasComment("대체유무(Y:대체 N:미대체)");

                entity.Property(e => e.SUB_TITLE)
                    .HasMaxLength(100)
                    .HasComment("서브 타이틀(내용)");

                entity.Property(e => e.UPDATED_DATE).HasColumnType("datetime");

                entity.Property(e => e.UPDATED_UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WING_IMG)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("윙배너 이미지 경로");

                entity.Property(e => e.WING_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("윙배너노출");
            });

            modelBuilder.Entity<BEWEDDING_CONTENT>(entity =>
            {
                entity.HasKey(e => e.CONTENT_SEQ);

                entity.ToTable("BEWEDDING_CONTENT");

                entity.Property(e => e.CONTENT_1).HasMaxLength(1000);

                entity.Property(e => e.CONTENT_2).HasMaxLength(1000);

                entity.Property(e => e.CONTENT_3).HasMaxLength(1000);

                entity.Property(e => e.CONTENT_LINK_URL).HasMaxLength(1000);

                entity.Property(e => e.CONTENT_TYPE).HasMaxLength(50);

                entity.Property(e => e.DEL_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IMAGE_TAG).HasMaxLength(20);

                entity.Property(e => e.INTERNAL_LINK_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LOGO_DISPLAY_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LOGO_TYPE).HasMaxLength(100);

                entity.Property(e => e.PREVIEW_SORTING_NUM).HasDefaultValueSql("((999))");

                entity.Property(e => e.REG_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.UPD_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.UPD_ID).HasMaxLength(50);

                entity.Property(e => e.USE_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<BEWEDDING_CONTENT_IMAGE>(entity =>
            {
                entity.HasKey(e => e.IMG_SEQ);

                entity.ToTable("BEWEDDING_CONTENT_IMAGE");

                entity.Property(e => e.IMG_TYPE)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IMG_URL).HasMaxLength(1000);

                entity.Property(e => e.REG_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.UPD_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.UPD_ID).HasMaxLength(50);
            });

            modelBuilder.Entity<BEWEDDING_NAVIGATION>(entity =>
            {
                entity.HasKey(e => e.NAVIGATION_SEQ);

                entity.ToTable("BEWEDDING_NAVIGATION");

                entity.Property(e => e.BACKGROUND_IMAGE_URL)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DELETE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DISPLAY_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IMAGE_URL)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.INTERNAL_LINK_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MAIN_TITLE).HasMaxLength(100);

                entity.Property(e => e.REG_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.SITE_NAME).HasMaxLength(100);

                entity.Property(e => e.URL)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BEWEDDING_SOURCE>(entity =>
            {
                entity.HasKey(e => e.SOURCE_SEQ);

                entity.ToTable("BEWEDDING_SOURCE");

                entity.Property(e => e.REG_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.SOURCE_CODE).HasMaxLength(20);

                entity.Property(e => e.SOURCE_NAME)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UPD_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.UPD_ID).HasMaxLength(50);

                entity.Property(e => e.USE_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<BEWEDDING_SOURCE_IMAGE>(entity =>
            {
                entity.HasKey(e => e.SOURCE_IMG_SEQ);

                entity.ToTable("BEWEDDING_SOURCE_IMAGE");

                entity.Property(e => e.LOGO_IMG_URL)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.LOGO_TYPE)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.REG_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.UPD_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.UPD_ID).HasMaxLength(100);
            });

            modelBuilder.Entity<BHANDS_MEMBER_TEMP_TABLE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BHANDS_MEMBER_TEMP_TABLE");

                entity.Property(e => e.ID).HasMaxLength(255);

                entity.Property(e => e.email).HasMaxLength(255);

                entity.Property(e => e.name).HasMaxLength(255);

                entity.Property(e => e.phone).HasMaxLength(255);
            });

            modelBuilder.Entity<BHANDS_WEEKLY_HOTDEAL>(entity =>
            {
                entity.HasKey(e => e.Seq)
                    .HasName("PK__BHANDS_W__CA1E3C88E4767BE0");

                entity.ToTable("BHANDS_WEEKLY_HOTDEAL");

                entity.HasComment("이벤트 핫딜기간 관리");

                entity.Property(e => e.END_DT)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("종료일");

                entity.Property(e => e.START_DT)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("시작일");

                entity.Property(e => e.W_NUM).HasComment("카드 정렬순서");
            });

            modelBuilder.Entity<BRANCH_MEMBER_OUT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BRANCH_MEMBER_OUT");

                entity.Property(e => e.ans1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans4)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans5)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans6)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans7)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans_detail)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.phone)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(getdate())")
                    .IsFixedLength(true);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BRANCH_VISIT_SITE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BRANCH_VISIT_SITE");

                entity.HasIndex(e => new { e.VDATE, e.VDOMAIN, e.COMPANY_SEQ }, "IDX_BRANCH_VISIT_SITE")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.COMPANY_SEQ).HasDefaultValueSql("(1)");

                entity.Property(e => e.VCNT).HasDefaultValueSql("(1)");

                entity.Property(e => e.VDATE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VDOMAIN)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BRANCH_WISHMADE_UPDATE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BRANCH_WISHMADE_UPDATE");

                entity.Property(e => e.C).HasMaxLength(255);

                entity.Property(e => e.E).HasMaxLength(255);

                entity.Property(e => e.GUBUN).HasMaxLength(255);
            });

            modelBuilder.Entity<BSMALL_MAIN_PRODUCT>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("BSMALL_MAIN_PRODUCT");

                entity.HasComment("바른손몰 메인 페이지 카드 관리");

                entity.Property(e => e.BRAND_KIND)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("BrandCollection일 경우 사용.");

                entity.Property(e => e.CREATED_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CREATED_UID)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CUSTOM_IMG)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.GRADE)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("등급(A/B/C)");

                entity.Property(e => e.GUBUN)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("BC:브랜드컬렉션 , B:BEST , N:NEW , S:SALE");

                entity.Property(e => e.IMGFILE_PATH)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JEHU_VIEW_DIV)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.LINK_TARGET)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("새창사용여부");

                entity.Property(e => e.LINK_URL)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED_DATE).HasColumnType("datetime");

                entity.Property(e => e.UPDATED_UID)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.VIEW_DIV)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<BSTORE_DAILY_MM>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BSTORE_DAILY_MMS");

                entity.Property(e => e.send_dt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BestRanking>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BestRanking");

                entity.Property(e => e.Card_Code)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Card_img_ms)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("1:주간, 2:월간, 3:샘플구매, 4:찜카드, 5:이용후기");

                entity.Property(e => e.Ranking)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_Gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<BestRankingB2B>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BestRankingB2B");

                entity.Property(e => e.Card_Code)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Card_img_ms)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Ranking)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RegDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<BestRanking_new>(entity =>
            {
                entity.ToTable("BestRanking_new");

                entity.Property(e => e.Gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Gubun_data)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RankChangeGubun)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RankChangeNo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_Gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Branch_Card_Plan>(entity =>
            {
                entity.HasKey(e => new { e.card_seq, e.display_group, e.company_seq });

                entity.ToTable("Branch_Card_Plan");

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.info_tmp)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branch_Member>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Branch_Member");

                entity.HasIndex(e => e.uid, "clu_uid")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.jumin, "nind_jumin")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addressCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.birth).HasColumnType("datetime");

                entity.Property(e => e.chk_ad)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_event)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mailservice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_penpal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.hand_phone)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.inpath)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.job)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.login_date).HasColumnType("datetime");

                entity.Property(e => e.login_date_latest).HasColumnType("datetime");

                entity.Property(e => e.mail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.nickname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.phone)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.phoneCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pw)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.rdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sample_chk)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Branch_QA_Tbl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Branch_QA_Tbl");

                entity.Property(e => e.A_CONTENT)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.A_DT).HasColumnType("datetime");

                entity.Property(e => e.A_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.A_STAT)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S1')");

                entity.Property(e => e.E_MAIL)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_NAME)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.QA_IID).ValueGeneratedOnAdd();

                entity.Property(e => e.Q_CONTENT)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Q_KIND)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Q_TITLE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TEL_NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branch_card_discount_Rate>(entity =>
            {
                entity.ToTable("Branch_card_discount_Rate");

                entity.Property(e => e.disrate_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Branch_card_discount_season>(entity =>
            {
                entity.ToTable("Branch_card_discount_season");

                entity.Property(e => e.disrate_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.produce_year)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Branch_card_display>(entity =>
            {
                entity.HasKey(e => new { e.company_seq, e.card_seq });

                entity.ToTable("Branch_card_display");

                entity.Property(e => e.best_yes_or_no)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.disrate_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Branch_notice>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("Branch_notice");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.contents2)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branch_special_discount_rate>(entity =>
            {
                entity.HasKey(e => new { e.seq, e.company_seq, e.card_seq });

                entity.ToTable("Branch_special_discount_rate");

                entity.Property(e => e.seq).ValueGeneratedOnAdd();

                entity.Property(e => e.rdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Branch_user_comment>(entity =>
            {
                entity.HasKey(e => e.CMT_SEQ);

                entity.ToTable("Branch_user_comment");

                entity.Property(e => e.COMMENT)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.IsBest)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.MEMBER_NAME)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REGDATE).HasColumnType("datetime");

                entity.Property(e => e.SERVICE_MENT)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TITLE)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CALLCENTER_SIGNAL_LAMP_MST>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("CALLCENTER_SIGNAL_LAMP_MST");

                entity.HasComment("콜선터 신호등");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CARD>(entity =>
            {
                entity.HasKey(e => e.CARD_SEQ)
                    .HasName("PK__CARD__79C80F94");

                entity.ToTable("CARD");

                entity.HasComment("Old 카드 정보");

                entity.HasIndex(e => e.CARD_GROUP, "IDX_CARD_CARDGROUP")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CARD_CATEGORY_SEQ, "IDX__CARD__CARD_CATEGORY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CARD_CODE, "IDX__CARD__CARD_CODE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CARD_PRICE_CUSTOMER, "IDX__CARD__CARD_PRICE_CUSTOMER")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CARD_SEQ, e.CARD_CATEGORY_SEQ }, "IDX_card_seq_card_category_seq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CARD_SEQ).ValueGeneratedNever();

                entity.Property(e => e.ADMIN_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ADMIN_MEMO)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.B2B_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.BEST_STR)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BEST_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.BestRangking).HasComment("월간 판매순위, 아침에 SP가 정보 update시");

                entity.Property(e => e.CARD_CATE)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_CODE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_DESCRIPTION).HasColumnType("text");

                entity.Property(e => e.CARD_DIV)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_ENVELOPE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_FPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_GROUP)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0:barunson,1:thecard");

                entity.Property(e => e.CARD_IMG_B1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B10)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B11)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B12)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B13)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B14)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B15)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B9)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_D)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CARD_IMG_M1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_MS)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_ORDER1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_ORDER2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_S)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_XS)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_KEYWORD)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_KEYWORD_SRC)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_KIND)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1:청첩장,2:감사장,3:초대장");

                entity.Property(e => e.CARD_MARKET_PRICE).HasDefaultValueSql("((0))");

                entity.Property(e => e.CARD_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_ONLINE_BRANCH_PRICE).HasDefaultValueSql("((0))");

                entity.Property(e => e.CARD_OSI)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_PAPER)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_SIZE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY).HasDefaultValueSql("((1))");

                entity.Property(e => e.Card_Shape)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("카드형태  1: 가로형, 2:세로형, 3:정사각형");

                entity.Property(e => e.DISPLAY_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.DISRATE_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('P')")
                    .IsFixedLength(true);

                entity.Property(e => e.ERP_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Env_code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ISHAVE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("청첩장에서 0 일때는 재고갯수 관리해 줄것.");

                entity.Property(e => e.ISHAVE_NUM).HasDefaultValueSql("((0))");

                entity.Property(e => e.ISInPaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("0:속지없음,1:붙이기,2:끼우기,3:금사");

                entity.Property(e => e.Is100)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.Is1001)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.Is1002)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.Is1003)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("포토청첩장");

                entity.Property(e => e.Is1004)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("이니셜청첩장");

                entity.Property(e => e.Is1005)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("");

                entity.Property(e => e.Is1006)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("세일청첩장 (티아라카드)");

                entity.Property(e => e.Is1009)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("초특가 청첩장 여부");

                entity.Property(e => e.Is200)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.Is300)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("회갑,고희,돌");

                entity.Property(e => e.Is3001)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is400)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("개업인사,초대장");

                entity.Property(e => e.Is500)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsEnvInsert)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsFPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsFlower)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsFreeEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsFreehandmade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsGold)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsHandMade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsHanji)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsHeart)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsInitial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsOBDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOffBest)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsOffDDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsOffDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsOsiGaro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsSBaesong)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsSample)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsSelfEdit)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsSilk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsSpecialThank)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsUsrComment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("사용자 코멘트 여부");

                entity.Property(e => e.IsUsrimg1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("사용자 이미지1 업로딩 여부");

                entity.Property(e => e.IsUsrimg2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("사용자 이미지2 업로딩 여부");

                entity.Property(e => e.IsUsrimg3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("사용자 이미지3 업로딩 여부");

                entity.Property(e => e.IsWonang)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsYu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.JUMUN_YES_OR_NO)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.LAST_UPDATE).HasColumnType("datetime");

                entity.Property(e => e.NEW_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NEW_YES_OR_NO)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.PRINT_SIZE).HasDefaultValueSql("((350))");

                entity.Property(e => e.PRODUCE_PLACE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRODUCE_YEAR).HasComment("0일 경우 단종상품");

                entity.Property(e => e.RECOMEND_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.REGIST_DATE).HasColumnType("datetime");

                entity.Property(e => e.ReInputDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SALES_RANKING).HasDefaultValueSql("((1000))");

                entity.Property(e => e.acc_code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.acc_seq).HasDefaultValueSql("((0))");

                entity.Property(e => e.acc_seq2).HasDefaultValueSql("((0))");

                entity.Property(e => e.cont_code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.cont_code_o)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.cont_seq).HasDefaultValueSql("((0))");

                entity.Property(e => e.env_code_o)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.env_seq).HasDefaultValueSql("((0))");

                entity.Property(e => e.isButterfly)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorPrt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isElegant)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isHologram)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isModern)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isPearl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isPress)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isRomantic)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isStylish)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isSweet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isTie)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isTrendy)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isWinitial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.online_yes_or_no)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.place_seq).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CARD_BRAND>(entity =>
            {
                entity.ToTable("CARD_BRAND");

                entity.HasComment("카드브랜드");

                entity.Property(e => e.id).ValueGeneratedNever();

                entity.Property(e => e.brand)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CARD_CATE>(entity =>
            {
                entity.HasKey(e => e.card_cate1);

                entity.ToTable("CARD_CATE");

                entity.HasComment("카드카테고리");

                entity.Property(e => e.card_cate1)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("card_cate")
                    .IsFixedLength(true);

                entity.Property(e => e.card_cate_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CARD_CATEGORY>(entity =>
            {
                entity.HasKey(e => e.CARD_CATEGORY_SEQ)
                    .HasName("PK__CARD_CATEGORY__7BB05806");

                entity.ToTable("CARD_CATEGORY");

                entity.HasComment("Old 카드 카테고리");

                entity.HasIndex(e => e.CATEGORY_NAME, "IDX__CARD_CATEGORY__CARD_CATEGORY_NAME")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CATEGORY_UPPER_CODE, "IDX__CARD_CATEGORY__CATEGORY_UPPER_CODE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CARD_CATEGORY_SEQ).ValueGeneratedNever();

                entity.Property(e => e.CATEGORY_DESCRIPTION)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CATEGORY_DIV)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CATEGORY_NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CATEGORY_USED)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.COUNT_IMG_DISPLAY).HasDefaultValueSql("(16)");

                entity.Property(e => e.LAST_UPDATE)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MINIMUM_ORDER).HasDefaultValueSql("(1)");

                entity.Property(e => e.PRODUCE_YEAR)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.REGIST_DATE)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SAMPLE_SUPPLY)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CARD_COREL>(entity =>
            {
                entity.HasKey(e => e.card_code);

                entity.ToTable("CARD_COREL");

                entity.HasComment("카드코렐정보관리");

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("제품코드");

                entity.Property(e => e.AUTO_CHOAN_REGISTER_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.AUTO_CHOAN_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("자동초안템플릿여부");

                entity.Property(e => e.BOTH_SIDE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.BlankSpace).HasComment("코렐 병합시 밑단 공백 크기");

                entity.Property(e => e.CUTTING_LINE_DIRECTION)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FPrintX).HasComment("카드 앞면 인쇄위치 X");

                entity.Property(e => e.FPrintY).HasComment("카드 앞면 인쇄위치 Y");

                entity.Property(e => e.GBFont)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("신랑,신부 폰트체");

                entity.Property(e => e.GBFontSize1).HasComment("신랑,신부 부모님 폰트체");

                entity.Property(e => e.GBFontSize2).HasComment("신랑,신부 서열 폰트체");

                entity.Property(e => e.GBFontSize3).HasComment("신랑,신부 폰트체");

                entity.Property(e => e.GBX).HasComment("신랑,신부 인쇄위치 X");

                entity.Property(e => e.GBY).HasComment("신랑,신부 인쇄위치 Y");

                entity.Property(e => e.GreetFont)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("인사말 폰트체");

                entity.Property(e => e.GreetFontSize).HasComment("인사말 폰트 사이즈");

                entity.Property(e => e.GreetX).HasComment("인사말 인쇄위치 X");

                entity.Property(e => e.GreetY).HasComment("인사말 인쇄위치 Y");

                entity.Property(e => e.Hstandard).HasComment("최저높이");

                entity.Property(e => e.HstandardMax).HasComment("최고높이");

                entity.Property(e => e.INNER_WORK_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.IsAlbaDown)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsExPreview)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("사용안함");

                entity.Property(e => e.IsFPrint)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("카드 앞면 인쇄 여부");

                entity.Property(e => e.IsInpaperBothSide)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsMapFront)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("약도 카드 앞면 삽입 여부");

                entity.Property(e => e.IsMapGaro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("약도 가로형 여부");

                entity.Property(e => e.Lstandard).HasComment("왼쪽 기준선");

                entity.Property(e => e.PAPER_NAME).HasMaxLength(50);

                entity.Property(e => e.PAPER_SIZE_TYPE).HasMaxLength(50);

                entity.Property(e => e.PrintGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Rstandard).HasComment("오른쪽기준선");

                entity.Property(e => e.Vstandard).HasComment("세로기준");

                entity.Property(e => e.WEPOD_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.WhenFont)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("예식 일시 폰트체");

                entity.Property(e => e.WhenFontSize).HasComment("예식 일시 폰트 사이즈");

                entity.Property(e => e.WhenX).HasComment("예식 일시 위치 X");

                entity.Property(e => e.WhenY).HasComment("예식 일시 위치 Y");

                entity.Property(e => e.WhereFont)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("예식 장소 폰트체");

                entity.Property(e => e.WhereFontSize).HasComment("예식 장소 폰트 사이즈");

                entity.Property(e => e.WhereY).HasComment("예식 장소 인쇄위치 Y");

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.card_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength(true)
                    .HasComment("C:카드,I:내지, E:봉투");

                entity.Property(e => e.env_num)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("사용안함");

                entity.Property(e => e.guideLineH)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("가이드라인(가로)");

                entity.Property(e => e.guideLineV)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("가이드라인(세로)");

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.isBackColor)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("카드 속면 배경 삽입 여부");

                entity.Property(e => e.isBackPoint)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("카드 속면 코렐 연동 방식(1일 경우 위치 지정)");

                entity.Property(e => e.isColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isFBackColor)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("카드 앞면 배경 삽입 여부");

                entity.Property(e => e.isOsiGaro)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("코렐 병합시 접선 방식");

                entity.Property(e => e.isReverse)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("코렐 병합시 역방향 여부");

                entity.Property(e => e.mapPositionX).HasComment("약도 삽입위치 X");

                entity.Property(e => e.mapPositionY).HasComment("약도 삽입위치 Y");

                entity.Property(e => e.mod_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.osiH)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("카드 가로접선");

                entity.Property(e => e.osiV)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("카드 세로접선");

                entity.Property(e => e.pageSizeH).HasComment("카드세로크기");

                entity.Property(e => e.pageSizeW).HasComment("카드가로크기");

                entity.Property(e => e.print_size)
                    .HasDefaultValueSql("((330))")
                    .HasComment("코렐 병합시 용지 사이즈");
            });

            modelBuilder.Entity<CARD_ChoanBasic>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CARD_ChoanBasic", "invtmng");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength(true);

                entity.Property(e => e.fswf_url)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.guideLineH)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.guideLineV)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.isBackColor)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isBackPoint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isFBackColor)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isMapGaro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isOsiGaro)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isReverse)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.osi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.printGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.swf_url)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.traffic_ex).HasDefaultValueSql("((0))");

                entity.Property(e => e.traffic_ey).HasDefaultValueSql("((0))");

                entity.Property(e => e.traffic_sx).HasDefaultValueSql("((0))");

                entity.Property(e => e.traffic_sy).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CARD_Cont>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CARD_Cont");

                entity.Property(e => e.card_size)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.cont_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.erp_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CARD_DISCOUNT_RATE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CARD_DISCOUNT_RATE");

                entity.HasComment("OLD 카드 할인율 정보");

                entity.Property(e => e.card_Group)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.card_kind)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true)
                    .HasComment("disrate_type=P 일때 카드 가격,I일때는 카드 키값");

                entity.Property(e => e.company).HasDefaultValueSql("(1)");

                entity.Property(e => e.discount_rate).HasComment("할인율");

                entity.Property(e => e.disrate_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('I')")
                    .IsFixedLength(true)
                    .HasComment("I:카드 개별 할인율,P:가격대별 할인율");

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.max_count).HasComment("미만");

                entity.Property(e => e.min_count).HasComment("이상");
            });

            modelBuilder.Entity<CARD_DISCOUNT_RATE_WED>(entity =>
            {
                entity.ToTable("CARD_DISCOUNT_RATE_WED");

                entity.Property(e => e.card_group)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.card_kind)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.company).HasDefaultValueSql("(1)");

                entity.Property(e => e.disrate_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('I')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CARD_DISPLAY_POLICY>(entity =>
            {
                entity.ToTable("CARD_DISPLAY_POLICY");

                entity.HasOne(d => d.CATEGORY_SEQNavigation)
                    .WithMany(p => p.CARD_DISPLAY_POLICies)
                    .HasForeignKey(d => d.CATEGORY_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CARD_DISP__CATEG__1B5E0D89");
            });

            modelBuilder.Entity<CARD_Dev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CARD_Dev");

                entity.Property(e => e.ADMIN_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ADMIN_MEMO)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.B2B_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BEST_STR)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BEST_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_CATE)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_CODE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_DESCRIPTION)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_ENVELOPE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_FPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_IMG_B1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B10)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B11)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B12)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B13)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B14)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B15)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B9)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_D)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_MS)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_ORDER1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_ORDER2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_S)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_XS)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_OSI)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_PAPER)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_SIZE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DISPLAY_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DISRATE_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ERP_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Env_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ISHAVE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ISInPaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is100)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1001)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1002)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1003)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1004)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1005)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1009)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is200)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is300)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is400)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is500)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsEnvInsert)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsFPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsFlower)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsGold)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsHandMade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsHanji)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsHeart)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOBDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOffBest)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOffDDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOffDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOsiGaro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsSBaesong)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsSample)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsSilk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsUsrComment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsUsrimg1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsUsrimg2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsUsrimg3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsWonang)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsYu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LAST_UPDATE).HasColumnType("datetime");

                entity.Property(e => e.NEW_YES_OR_NO)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RECOMEND_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.REGIST_DATE).HasColumnType("datetime");

                entity.Property(e => e.acc_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.cont_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.cont_code_o)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.env_code_o)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.online_yes_or_no)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CARD_ENV>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CARD_ENV");

                entity.HasComment("봉투정보");

                entity.Property(e => e.card_size)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.env_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.erp_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.print_size).HasDefaultValueSql("(210)");
            });

            modelBuilder.Entity<CARD_ISHAVE_HISTORY>(entity =>
            {
                entity.ToTable("CARD_ISHAVE_HISTORY");

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CARD_JAEGO>(entity =>
            {
                entity.HasKey(e => e.card_code);

                entity.ToTable("CARD_JAEGO");

                entity.Property(e => e.card_code)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CARD_JAEGO_HISTORY>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("CARD_JAEGO_HISTORY");

                entity.HasIndex(e => e.card_code, "IX_CARD_JAEGO_HISTORY")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.chcomment)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CARD_SEASON_IMAGE_STR>(entity =>
            {
                entity.HasKey(e => e.card_seq)
                    .HasName("PK_CARD_IMAGE_STR_1");

                entity.ToTable("CARD_SEASON_IMAGE_STR");

                entity.HasComment("CARD_SEASON_IMAGE_STR");

                entity.Property(e => e.card_seq).ValueGeneratedNever();

                entity.Property(e => e.card_img_b10_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b11_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b12_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b13_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b14_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b15_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b1_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b2_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b3_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b4_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b5_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b6_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b7_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b8_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b9_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CARD_SEASON_STYLE>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("CARD_SEASON_STYLE");

                entity.HasIndex(e => e.card_seq, "IDX_CARD_SEASON_STYLE__card_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.cardstyle_seq, "IDX_CARD_SEASON_STYLE_cardstyle_seq")
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<CARD_SEASON_STYLEITEM>(entity =>
            {
                entity.HasKey(e => e.cardstyle_seq);

                entity.ToTable("CARD_SEASON_STYLEITEM");

                entity.Property(e => e.cardstyle_seq).ValueGeneratedNever();

                entity.Property(e => e.cardstyle_num)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.cardstyle_str)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CARD_SET>(entity =>
            {
                entity.HasKey(e => e.set_Seq);

                entity.ToTable("CARD_SET");

                entity.Property(e => e.set_Seq).ValueGeneratedNever();

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<CARD_SETItem>(entity =>
            {
                entity.HasKey(e => new { e.set_seq, e.card_seq })
                    .HasName("PK_CARD_SETLIST");

                entity.ToTable("CARD_SETItem");

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<CARD_STYLE>(entity =>
            {
                entity.HasKey(e => e.style_seq);

                entity.ToTable("CARD_STYLE");

                entity.Property(e => e.style_seq).ValueGeneratedNever();

                entity.Property(e => e.style_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CARD_USER_COMMNET>(entity =>
            {
                entity.HasKey(e => new { e.CARD_SEQ, e.CMT_SEQ })
                    .HasName("PK__CARD_USER_COMMNE__7F80E8EA")
                    .IsClustered(false);

                entity.ToTable("CARD_USER_COMMNET");

                entity.HasComment("Old 유저 코멘트");

                entity.HasIndex(e => e.REGDATE, "clu_REGDATE")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.company_seq, "nind_company_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MEMBER_UID, "nind_member_uid")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CMT_SEQ).ValueGeneratedOnAdd();

                entity.Property(e => e.COMMENT)
                    .HasMaxLength(6000)
                    .IsUnicode(false);

                entity.Property(e => e.DIV)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsBest)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.IsDP)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.MEMBER_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REGDATE).HasColumnType("datetime");

                entity.Property(e => e.SERVICE_MENT)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.TITLE)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TRAVEL_PLACE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WEDD_DT).HasColumnType("datetime");

                entity.Property(e => e.WEDD_PLACE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.sales_Gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.tmp_data)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CARD_VSTAT>(entity =>
            {
                entity.HasKey(e => new { e.vdate, e.card_Seq, e.card_type });

                entity.ToTable("CARD_VSTAT");

                entity.Property(e => e.vdate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.card_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.vcnt).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<CARD_WEIGHT>(entity =>
            {
                entity.HasKey(e => e.card_code);

                entity.ToTable("CARD_WEIGHT");

                entity.HasComment("FAQ무게검증기초데이터관련");

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_weight1)
                    .HasColumnName("card_weight")
                    .HasComment("단위무게");

                entity.Property(e => e.mod_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("수정일");

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");
            });

            modelBuilder.Entity<CARD_corelinfo>(entity =>
            {
                entity.HasKey(e => e.id)
                    .IsClustered(false);

                entity.ToTable("CARD_corelinfo");

                entity.HasComment("카드초안기초상세정보");

                entity.HasIndex(e => e.card_code, "IX_CARD_corelinfo")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("카드 코드");

                entity.Property(e => e.font_name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("폰트명");

                entity.Property(e => e.font_size).HasComment("폰트사이즈");

                entity.Property(e => e.isFPrint)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("1이면 겉면에 인쇄");

                entity.Property(e => e.mod_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("변경일");

                entity.Property(e => e.point_align).HasComment("0:좌측, 9:중앙, 8:우측");

                entity.Property(e => e.point_str)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("입력문구 뿌려줘야 할 경우 해당 스트링");

                entity.Property(e => e.point_type).HasComment("0:약도,1:영문이름,2:한글이름,3:영문이니셜,4:영문+한글이름,5:예식일,9:기타,");

                entity.Property(e => e.point_x).HasComment("포인트 X값");

                entity.Property(e => e.point_y).HasComment("포인트 Y값");
            });

            modelBuilder.Entity<CART>(entity =>
            {
                entity.HasKey(e => e.CART_SEQ)
                    .HasName("PK__CART__035179CE");

                entity.ToTable("CART");

                entity.HasIndex(e => new { e.CART_OWNER, e.OWNER_SESSION_ID }, "IDX__CART__CART_OWNER_OWNER_IP")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CARD_OPTION)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CART_OWNER)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DISCOUNT_RATE).HasDefaultValueSql("((0))");

                entity.Property(e => e.ORDER_TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('O')")
                    .IsFixedLength(true)
                    .HasComment("S:샘플");

                entity.Property(e => e.OWNER_SESSION_ID)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SALES_GUBUN)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')");
            });

            modelBuilder.Entity<CASAMIA_DAILY_INFO>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__CASAMIA___DDDFBCBE6365E6C4");

                entity.ToTable("CASAMIA_DAILY_INFO");

                entity.Property(e => e.Birth_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ConnInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.barun_reg_Date).HasColumnType("datetime");

                entity.Property(e => e.barun_reg_site)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.birth_div)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.casamia_rst_cd)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.casamia_send_date).HasColumnType("datetime");

                entity.Property(e => e.create_date).HasColumnType("datetime");

                entity.Property(e => e.gender)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.phone)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_day)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.zipcode)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CHG_ENV_log>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CHG_ENV_log");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.chg_date).HasColumnType("date");
            });

            modelBuilder.Entity<CHOAN_CALENDAR_ITEM>(entity =>
            {
                entity.HasKey(e => e.CALENDAR_SEQ);

                entity.ToTable("CHOAN_CALENDAR_ITEM");

                entity.Property(e => e.CALENDAR_FILENAME).HasMaxLength(512);

                entity.Property(e => e.CARLENDAR_PATH).HasMaxLength(512);

                entity.Property(e => e.OBJ_CODE)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('E01')")
                    .IsFixedLength(true);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CHOAN_CORELDRAW_ITEM>(entity =>
            {
                entity.HasKey(e => e.CORELDRAW_SEQ);

                entity.ToTable("CHOAN_CORELDRAW_ITEM");

                entity.Property(e => e.CORELDRAW_FILENAME).HasMaxLength(512);

                entity.Property(e => e.CORELDRAW_PATH).HasMaxLength(512);

                entity.Property(e => e.CORELDRAW_TYPE_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OBJ_CODE)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('E01')")
                    .IsFixedLength(true);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CHOAN_OBJECT_COMMON_CODE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CHOAN_OBJECT_COMMON_CODE");

                entity.Property(e => e.GROUP_NAME).HasMaxLength(100);

                entity.Property(e => e.OBJ_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.OBJ_CODE_NAME).HasMaxLength(100);

                entity.Property(e => e.OBJ_DESC).HasMaxLength(4000);

                entity.Property(e => e.OBJ_SEQ).ValueGeneratedOnAdd();

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CJ_DELCODE>(entity =>
            {
                entity.HasKey(e => e.DELCODE_SEQ);

                entity.ToTable("CJ_DELCODE");

                entity.HasComment("CJ 송장코드");

                entity.Property(e => e.DELCODE_SEQ)
                    .ValueGeneratedNever()
                    .HasComment("");

                entity.Property(e => e.CODE)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasComment("송장번호");

                entity.Property(e => e.CODESEQ).HasComment("");

                entity.Property(e => e.ISUSE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("사용유무 (0:사용안함, 1:사용완료)");

                entity.Property(e => e.IS_USE).HasComment("");
            });

            modelBuilder.Entity<CJ_DELCODE_ERROR>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CJ_DELCODE_ERROR");

                entity.Property(e => e.code)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CJ_DELCODE_EXCEPT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CJ_DELCODE_EXCEPT");

                entity.Property(e => e.code)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CJ_DELCODE_TEMP>(entity =>
            {
                entity.HasKey(e => e.DELCODE_SEQ)
                    .HasName("PK_CJ_DELCODE_20110814_TEMP");

                entity.ToTable("CJ_DELCODE_TEMP");

                entity.Property(e => e.CODE)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.ISUSE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CJ_DELCODE_UPDATE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CJ_DELCODE_UPDATE");

                entity.Property(e => e.flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ncode)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pcode)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CJ_DELCODE_USAGE_LOG>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("CJ_DELCODE_USAGE_LOG");

                entity.HasComment("송장코드 사용로그");

                entity.Property(e => e.DELIVERY_CODE_NUM)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("송장번호");

                entity.Property(e => e.ORDER_SEQ).HasComment("주문번호");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");

                entity.Property(e => e.SP_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CJ_ZIPCODE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CJ_ZIPCODE");

                entity.HasComment("초안 택배 소속 정보");

                entity.Property(e => e.AIR_RGN_YN).HasMaxLength(2);

                entity.Property(e => e.CLDV_EMP_NM)
                    .HasMaxLength(100)
                    .HasComment("배송담당자");

                entity.Property(e => e.DONG_ADDR)
                    .HasMaxLength(100)
                    .HasComment("동");

                entity.Property(e => e.END_NM).HasMaxLength(20);

                entity.Property(e => e.END_NO).HasMaxLength(5);

                entity.Property(e => e.FERRY_RGN_YN).HasMaxLength(2);

                entity.Property(e => e.MAN_BRAN_ID).HasMaxLength(20);

                entity.Property(e => e.MAN_BRAN_NM)
                    .HasMaxLength(100)
                    .HasComment("소속");

                entity.Property(e => e.MODI_DTIME)
                    .HasColumnType("datetime")
                    .HasComment("수정일");

                entity.Property(e => e.MODI_EMP_ID)
                    .HasMaxLength(20)
                    .HasComment("PR_RSPSDIV");

                entity.Property(e => e.MODI_YMD)
                    .HasMaxLength(8)
                    .HasComment("수정일(YYYYMMDD)");

                entity.Property(e => e.REG_DTIME)
                    .HasColumnType("datetime")
                    .HasComment("등록일");

                entity.Property(e => e.REG_EMP_ID)
                    .HasMaxLength(20)
                    .HasComment("PR_RSPSDIV");

                entity.Property(e => e.SIDO_ADDR)
                    .HasMaxLength(100)
                    .HasComment("시");

                entity.Property(e => e.SKK_ADDR)
                    .HasMaxLength(100)
                    .HasComment("구");

                entity.Property(e => e.SUB_END_NO).HasMaxLength(3);

                entity.Property(e => e.UP_BRAN_ID).HasMaxLength(20);

                entity.Property(e => e.UP_BRAN_NM)
                    .HasMaxLength(100)
                    .HasComment("지점");

                entity.Property(e => e.USE_YN).HasMaxLength(2);

                entity.Property(e => e.ZIP_NO)
                    .IsRequired()
                    .HasMaxLength(6);
            });

            modelBuilder.Entity<CMS_LOG>(entity =>
            {
                entity.ToTable("CMS_LOG");

                entity.HasIndex(e => e.info1, "nind_info1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InOut)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('IN')");

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cms_num)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.end_time).HasColumnType("smalldatetime");

                entity.Property(e => e.info1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.msg)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.qtype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.site)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.start_time).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<COMMON_CODE>(entity =>
            {
                entity.HasKey(e => e.CMMN_CODE);

                entity.ToTable("COMMON_CODE");

                entity.HasComment("코드 관리");

                entity.Property(e => e.CMMN_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CLSS_CODE)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CLSS_NAME)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DISPLAY_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.DTL_CLSS)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DTL_DESC)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.DTL_NAME)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.LANG_CODE)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MDF_DATE)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MDF_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.REG_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RMRK_CLMN)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<COMPANY>(entity =>
            {
                entity.HasKey(e => e.COMPANY_SEQ)
                    .HasName("PK__COMPANY__07220AB2");

                entity.ToTable("COMPANY");

                entity.HasComment("제휴사 정보");

                entity.HasIndex(e => e.COMPANY_NAME, "IDX_company__name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SALES_GUBUN, "NCI_COMPANY_SALES_GUBUN")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ACCOUNT_NO)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("정산은행 계좌번호");

                entity.Property(e => e.ACC_E_MAIL)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("정산담당자 이메일");

                entity.Property(e => e.ACC_HP_NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .HasComment("정산담당자 핸드폰 번호");

                entity.Property(e => e.ACC_NM)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("정산담당자 이름");

                entity.Property(e => e.ACC_TEL_NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("정산담당자 연락처");

                entity.Property(e => e.BACK_ADDR)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("주소 뒷부분");

                entity.Property(e => e.BANK_NM)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("정산은행이름");

                entity.Property(e => e.BOSS_NM)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("대표자 이름");

                entity.Property(e => e.BOSS_TEL_NO)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("대표 번호");

                entity.Property(e => e.CHG_DT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("최종 변경일");

                entity.Property(e => e.CHG_ID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("변경 관리자 아이디");

                entity.Property(e => e.COMPANY_NAME)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("업체명");

                entity.Property(e => e.COMPANY_NUM)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("사업자 번호");

                entity.Property(e => e.COMPANY_UPPER_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CORP_EXP)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.END_DATE)
                    .HasColumnType("datetime")
                    .HasComment("마감일");

                entity.Property(e => e.ERP_CODE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ERP_CostCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ERP_Dept)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("1: 영업1본부, 2: 영업2본부");

                entity.Property(e => e.ERP_PGcheck)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("");

                entity.Property(e => e.ERP_PartCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ERP_PayLater)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("Y:후불정산업체");

                entity.Property(e => e.ERP_PriceLevel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("1:대리점가,2:출고가,3:소비자가");

                entity.Property(e => e.ERP_StaffCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ERP_TaxType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("10 : 일반과세, 22: 매출영수증");

                entity.Property(e => e.E_MAIL)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("이메일");

                entity.Property(e => e.FAX_NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("업체 팩스번호");

                entity.Property(e => e.FIRST_ALARM)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FRONT_ADDR)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("주소 앞부분");

                entity.Property(e => e.IMG_DIR)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("사용안함");

                entity.Property(e => e.INFO_TMP)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("대리점의 경우 업체 URL");

                entity.Property(e => e.INFO_TMP2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.INFO_TMP3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("메인 이미지");

                entity.Property(e => e.INFO_TMP4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("1일 경우 무료식권 제공");

                entity.Property(e => e.JAEHU_KIND)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .HasComment("W:웹,D:대리점,O:오프영업,M:EC대리점,C:EC 커스터마이징,B:EC B2B,E:e청첩장");

                entity.Property(e => e.JUMUN_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("0:기본값(사이트링크),1:결제안함(제휴사매출),2:결제함(바른손매출)");

                entity.Property(e => e.KIND)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LOGIN_ID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("로그인 아이디");

                entity.Property(e => e.MNG_ADDRESS)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MNG_ADDR_DETAIL)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MNG_E_MAIL)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("관리자 이메일");

                entity.Property(e => e.MNG_HP_NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MNG_NM)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("관리자 이름");

                entity.Property(e => e.MNG_TEL_NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("관리자 연락처");

                entity.Property(e => e.MNG_ZIP_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ONOFF)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .HasComment("온/오프 제휴");

                entity.Property(e => e.PASSWD)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("비밀번호");

                entity.Property(e => e.REGIST_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");

                entity.Property(e => e.REG_ID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("등록 관리자 아이디");

                entity.Property(e => e.SALES_GUBUN)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .HasComment("W:웹,D:대리점,O:오프영업");

                entity.Property(e => e.SASIK_GUBUN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.START_DATE)
                    .HasColumnType("datetime")
                    .HasComment("시작일");

                entity.Property(e => e.STATUS)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("상태 (S1:대기,S2:진행,S3:삭제)");

                entity.Property(e => e.SUPPLY_DISRATE)
                    .HasDefaultValueSql("((0))")
                    .HasComment("기본 할인율");

                entity.Property(e => e.UP_TAE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((22))")
                    .HasComment("업태 (ERP 연동시 tax 타입으로 사용,22:매출영수증,10:매출일반과세)");

                entity.Property(e => e.UP_TAE_STR)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ZIP_CODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("우편번호");

                entity.Property(e => e.area).HasMaxLength(20);

                entity.Property(e => e.bank).HasMaxLength(20);

                entity.Property(e => e.bank_account_name).HasMaxLength(40);

                entity.Property(e => e.bank_account_no).HasMaxLength(40);

                entity.Property(e => e.ewed_val).HasDefaultValueSql("((0))");

                entity.Property(e => e.feeType)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.jehu_grade)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.mypage_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("고객에게 발송되는 메일에서 링크될 mypage주소");
            });

            modelBuilder.Entity<COMPANY_MEMO>(entity =>
            {
                entity.ToTable("COMPANY_MEMO");

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.reg_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<COMPANY_Nanum_History>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("COMPANY_Nanum_History");

                entity.HasComment("나눔 히스토리");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<COMPANY_Nanum_Price>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("COMPANY_Nanum_Price");

                entity.HasComment("나눔 가격");

                entity.Property(e => e.last_update).HasColumnType("datetime");

                entity.Property(e => e.reg_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<COMPETITOR_CARD_MST>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("COMPETITOR_CARD_MST");

                entity.HasComment("타사이트 카드정보");

                entity.HasIndex(e => e.REG_DATE, "NCI_REG_DATE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CARD_CODE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMAGE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_PRICE).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DISCOUNT_RATE).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SITE_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CONNECT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CONNECT");

                entity.Property(e => e.idx).ValueGeneratedOnAdd();

                entity.Property(e => e.ip)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.wdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CONNECT_PATH>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CONNECT_PATH");

                entity.Property(e => e.browser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.idx).ValueGeneratedOnAdd();

                entity.Property(e => e.ip)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.os)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.page)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.pass)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.path)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.wdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CONTRACT_TBL>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CONTRACT_TBL");

                entity.Property(e => e.CHG_DT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CHG_ID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CONTRACT_EDT).HasColumnType("datetime");

                entity.Property(e => e.CONTRACT_KIND)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('K2')");

                entity.Property(e => e.CONTRACT_NM)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CONTRACT_SDT).HasColumnType("datetime");

                entity.Property(e => e.CON_ID).ValueGeneratedOnAdd();

                entity.Property(e => e.REG_DT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.REG_ID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.STAT)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<COOP_DISCOUNT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("COOP_DISCOUNT");

                entity.HasComment("제휴 할인");

                entity.Property(e => e.cardbrand)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.disrate_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('R')")
                    .IsFixedLength(true);

                entity.Property(e => e.mod_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<COOP_VSTAT>(entity =>
            {
                entity.HasKey(e => new { e.vdate, e.company_seq, e.inout });

                entity.ToTable("COOP_VSTAT");

                entity.Property(e => e.vdate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.inout)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("0:in, 1:out");

                entity.Property(e => e.vcnt).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<COUPON>(entity =>
            {
                entity.ToTable("COUPON");

                entity.HasComment("old 쿠폰");

                entity.HasIndex(e => e.code, "nind_code")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.company_seq, "nind_company_seq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.company_seq).HasDefaultValueSql("(1)");

                entity.Property(e => e.description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.discount_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('P')")
                    .IsFixedLength(true)
                    .HasComment("R:할인율, P:금액차감");

                entity.Property(e => e.end_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.isJaehu)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("1:제휴사 발행 쿠폰");

                entity.Property(e => e.isUsable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.isUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.start_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.tmp1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.tmp2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.use_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('E')")
                    .IsFixedLength(true)
                    .HasComment("W:청첩장,E:e청첩장");
            });

            modelBuilder.Entity<COUPON_APPLY_CARD>(entity =>
            {
                entity.HasKey(e => e.COUPON_APPLY_CARD_SEQ)
                    .HasName("PK_COUPON_APPLY_CARD_LIST");

                entity.ToTable("COUPON_APPLY_CARD");

                entity.HasComment("일부상품적용제외리스트");

                entity.Property(e => e.COUPON_APPLY_CARD_SEQ).HasComment("SEQ");

                entity.Property(e => e.CARD_ALLOW_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("상품허용구분(N:제외,Y:등록)");

                entity.Property(e => e.CARD_SEQ).HasComment("카드코드(S2_CARD.CARD_SEQ)");

                entity.Property(e => e.COUPON_MST_SEQ).HasComment("COUPON_MST.COUPON_MST_SEQ");

                entity.HasOne(d => d.COUPON_MST_SEQNavigation)
                    .WithMany(p => p.COUPON_APPLY_CARDs)
                    .HasForeignKey(d => d.COUPON_MST_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COUPON_APPLY_CARD_LIST_COUPON_MST_SEQ_COUPON_MST_COUPON_MST_SEQ");
            });

            modelBuilder.Entity<COUPON_APPLY_SERVICE>(entity =>
            {
                entity.HasKey(e => e.COUPON_APPLY_SERVICE_SEQ)
                    .HasName("PK_COUPON_APPLY_SERVICE_LIST");

                entity.ToTable("COUPON_APPLY_SERVICE");

                entity.HasComment("적용상품범위");

                entity.Property(e => e.COUPON_APPLY_SERVICE_SEQ).HasComment("SEQ");

                entity.Property(e => e.CLSS_CODE)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasComment("그룹코드(COMMON_CODE.CLSS_CODE)");

                entity.Property(e => e.CMMN_CODE)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("상세코드(COMMON_CODE.CMMN_CODE)");

                entity.Property(e => e.COUPON_MST_SEQ).HasComment("COUPON_MST.COUPON_MST_SEQ");

                entity.HasOne(d => d.COUPON_MST_SEQNavigation)
                    .WithMany(p => p.COUPON_APPLY_SERVICEs)
                    .HasForeignKey(d => d.COUPON_MST_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COUPON_APPLY_SERVICE_LIST_COUPON_MST_SEQ_COUPON_MST_COUPON_MST_SEQ");
            });

            modelBuilder.Entity<COUPON_APPLY_SITE>(entity =>
            {
                entity.HasKey(e => e.COUPON_APPLY_SITE_SEQ);

                entity.ToTable("COUPON_APPLY_SITE");

                entity.HasComment("쿠폰 발급 사이트");

                entity.Property(e => e.COUPON_APPLY_SITE_SEQ).HasComment("SEQ");

                entity.Property(e => e.COMPANY_SEQ).HasComment("COMPANY_SEQ");

                entity.Property(e => e.COUPON_MST_SEQ).HasComment("COUPON_MST.COUPON_MST_SEQ");

                entity.HasOne(d => d.COUPON_MST_SEQNavigation)
                    .WithMany(p => p.COUPON_APPLY_SITEs)
                    .HasForeignKey(d => d.COUPON_MST_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COUPON_APPLY_SITE_COUPON_MST_SEQ_COUPON_MST_COUPON_MST_SEQ");
            });

            modelBuilder.Entity<COUPON_APPLY_USER>(entity =>
            {
                entity.HasKey(e => e.COUPON_APPLY_USER_SEQ)
                    .HasName("PK_COUPON_APPLY_USER_LIST");

                entity.ToTable("COUPON_APPLY_USER");

                entity.HasComment("회원제외추가리스트");

                entity.Property(e => e.COUPON_APPLY_USER_SEQ).HasComment("SEQ");

                entity.Property(e => e.COUPON_MST_SEQ).HasComment("COUPON_MST.COUPON_MST_SEQ");

                entity.Property(e => e.UID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("UID");

                entity.Property(e => e.USER_ALLOW_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("회원허구분(N:제외,Y:등록)");

                entity.HasOne(d => d.COUPON_MST_SEQNavigation)
                    .WithMany(p => p.COUPON_APPLY_USERs)
                    .HasForeignKey(d => d.COUPON_MST_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COUPON_APPLY_USER_LIST_COUPON_MST_SEQ_COUPON_MST_COUPON_MST_SEQ");
            });

            modelBuilder.Entity<COUPON_DETAIL>(entity =>
            {
                entity.HasKey(e => e.COUPON_DETAIL_SEQ);

                entity.ToTable("COUPON_DETAIL");

                entity.HasComment("쿠폰코드정보");

                entity.HasIndex(e => e.COUPON_CODE, "NCI_COUPON_CODE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.COUPON_MST_SEQ, "NCI_COUPON_MST_SEQ")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.COUPON_DETAIL_SEQ).HasComment("SEQ");

                entity.Property(e => e.COUPON_CODE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("쿠폰코드");

                entity.Property(e => e.COUPON_MST_SEQ).HasComment("COUPON_MST.COUPON_MST_SEQ");

                entity.Property(e => e.DOWNLOAD_ACTIVE_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .HasComment("다운로드가능여부(Y/N)");

                entity.HasOne(d => d.COUPON_MST_SEQNavigation)
                    .WithMany(p => p.COUPON_DETAILs)
                    .HasForeignKey(d => d.COUPON_MST_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COUPON_DETAIL_COUPON_MST_SEQ_COUPON_MST_COUPON_MST_SEQ");
            });

            modelBuilder.Entity<COUPON_ISSUE>(entity =>
            {
                entity.HasKey(e => e.COUPON_ISSUE_SEQ);

                entity.ToTable("COUPON_ISSUE");

                entity.HasComment("쿠폰발급리스트");

                entity.HasIndex(e => e.ACTIVE_YN, "NCI_ACTIVE_YN")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.COUPON_DETAIL_SEQ, "NCI_COUPON_DETAIL_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UID, "NCI_UID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.UID, e.ACTIVE_YN }, "NCI_UID_ACTIVE_YN")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.COUPON_ISSUE_SEQ).HasComment("SEQ");

                entity.Property(e => e.ACTIVE_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .HasComment("사용가능여부(Y/N)");

                entity.Property(e => e.COMPANY_SEQ).HasComment("COMPANY_SEQ");

                entity.Property(e => e.COUPON_DETAIL_SEQ).HasComment("COUPON_DETAIL.COUPON_DETAIL_SEQ");

                entity.Property(e => e.END_DATE)
                    .HasColumnType("datetime")
                    .HasComment("종료일");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasComment("등록일");

                entity.Property(e => e.SALES_GUBUN)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("사이트구분");

                entity.Property(e => e.UID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("유저ID");

                entity.HasOne(d => d.COUPON_DETAIL_SEQNavigation)
                    .WithMany(p => p.COUPON_ISSUEs)
                    .HasForeignKey(d => d.COUPON_DETAIL_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COUPON_ISSUE_COUPON_DETAIL_SEQ_COUPON_DETAIL_COUPON_DETAIL_SEQ");
            });

            modelBuilder.Entity<COUPON_MST>(entity =>
            {
                entity.HasKey(e => e.COUPON_MST_SEQ);

                entity.ToTable("COUPON_MST");

                entity.HasComment("쿠폰마스터 정보");

                entity.Property(e => e.COUPON_MST_SEQ).HasComment("SEQ");

                entity.Property(e => e.ADD_COUPON_ALLOW_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AD_COUPON_ALLOW_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.CARD_ORDER_CNT).HasComment("청첩장 주문 구매수");

                entity.Property(e => e.CARD_ORDER_TYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("청첩장주문여부");

                entity.Property(e => e.COUPON_DESC)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasComment("쿠폰설명(안내문구)");

                entity.Property(e => e.COUPON_GROUP_CODE)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('A')")
                    .HasComment("쿠폰종류(A:기본 B:중복,그오 )");

                entity.Property(e => e.COUPON_ISSUE_CNT).HasComment("발행개수(0:무제한)");

                entity.Property(e => e.COUPON_ISSUE_END_DATE)
                    .HasColumnType("datetime")
                    .HasComment("발행기간 종료일");

                entity.Property(e => e.COUPON_ISSUE_START_DATE)
                    .HasColumnType("datetime")
                    .HasComment("발행기간 시작일");

                entity.Property(e => e.COUPON_NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("쿠폰명");

                entity.Property(e => e.COUPON_TYPE_CODE)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .HasComment("쿠폰속성(A:기본 B:중복 C:중중복)");

                entity.Property(e => e.DISCOUNT_FIXED_RATE_TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('%')")
                    .HasComment("할인방법(W:정액, P:정률)");

                entity.Property(e => e.DISCOUNT_MAX_AMT).HasComment("최대할인금액(0:제한없음)");

                entity.Property(e => e.DISCOUNT_VALUE).HasComment("할인값");

                entity.Property(e => e.DOWNLOADED_CNT).HasComment("다운로드된 수량");

                entity.Property(e => e.DOWNLOAD_KIND)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('M')")
                    .HasComment("발급방식(M:수동, A:자동)");

                entity.Property(e => e.DOWNLOAD_KIND_ETC_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DOWNLOAD_LIMIT_PER_PERSON_QTY).HasComment("다운로드 개인별 제한수량(0:제한없음)");

                entity.Property(e => e.DOWNLOAD_USER_GB)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('A')")
                    .HasComment("발급대상(A:전체, P:특정[COUPON_APPLY_USER])");

                entity.Property(e => e.DUP_COUPON_ALLOW_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .HasComment("중복허용여부(Y:가능,N:불가능)");

                entity.Property(e => e.EXPIRY_CUSTOM_VALUE).HasComment("가변종료일(발급일로부터의 유효기간)");

                entity.Property(e => e.EXPIRY_END_DATE)
                    .HasColumnType("datetime")
                    .HasComment("다운로드 종료일");

                entity.Property(e => e.EXPIRY_START_DATE)
                    .HasColumnType("datetime")
                    .HasComment("다운로드 시작일");

                entity.Property(e => e.EXPIRY_TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('A')")
                    .HasComment("쿠폰유효기간(A:없음, V:가변, P:기간)");

                entity.Property(e => e.ORDER_AMT).HasComment("구매제한금액(0:제한없음)");

                entity.Property(e => e.ORDER_APPLY_TYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("적용가능주문형태(O:원주문 A:추가주무)");

                entity.Property(e => e.ORDER_TYPE_CODE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REFERER_SALES_GUBUN)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("가입SITE(구분자:| REFERER_SALES_GUBUN)");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");

                entity.Property(e => e.REG_USER_ID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("등록자");

                entity.Property(e => e.SAMPLE_ORDER_END_DATE)
                    .HasColumnType("datetime")
                    .HasComment("샘플주문 종료일");

                entity.Property(e => e.SAMPLE_ORDER_START_DATE)
                    .HasColumnType("datetime")
                    .HasComment("샘플주문 시작일(CUSTOM_SAMPLE_ORDER.REQUEST_DATE)");

                entity.Property(e => e.SAMPLE_ORDER_TYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("샘플주문여부");

                entity.Property(e => e.STATUS_ACTIVE_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.UPDATE_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("수정일");

                entity.Property(e => e.UPDATE_USER_ID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("수정자");

                entity.Property(e => e.USER_REG_END_DATE)
                    .HasColumnType("datetime")
                    .HasComment("가입일 종료");

                entity.Property(e => e.USER_REG_START_DATE)
                    .HasColumnType("datetime")
                    .HasComment("가입일 시작");

                entity.Property(e => e.USE_DEVICE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("사용가능디바이스(P:PC, M:모바일)");

                entity.Property(e => e.USE_PLACE)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('ALL')")
                    .HasComment("사용처(ALL :전체, ON:온라인, OFF:오프라인)");

                entity.Property(e => e.WEDDING_END_DATE)
                    .HasColumnType("datetime")
                    .HasComment("결혼예정 종료일");

                entity.Property(e => e.WEDDING_START_DATE)
                    .HasColumnType("datetime")
                    .HasComment("결혼예정 시작일");

                entity.Property(e => e.WEDD_PLACE)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasComment("예식지역(구분자 : | )");
            });

            modelBuilder.Entity<CS_HappyCall>(entity =>
            {
                entity.HasKey(e => e.idx)
                    .HasName("PK_MASTER");

                entity.ToTable("CS_HappyCall", "invtmng");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.card_type_etc)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.gift_etc)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.good_cont_etc)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.good_yn_etc)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.good_yn_etc2)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.inflow_etc)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.product)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CUCKOOS_DAILY_INFO>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__CUCKOOS___DDDFBCBEB1C80BB4");

                entity.ToTable("CUCKOOS_DAILY_INFO");

                entity.Property(e => e.ConnInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.barun_reg_Date).HasColumnType("datetime");

                entity.Property(e => e.barun_reg_site)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.cuckos_reg_date).HasColumnType("datetime");

                entity.Property(e => e.file_dt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.phone)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_day)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.zipcode)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CUCKOOS_DAILY_INFO_CANCEL>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUCKOOS_DAILY_INFO_CANCEL");

                entity.Property(e => e.cancel_dt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.file_dt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CUCKOOS_INBOUND>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUCKOOS_INBOUND");

                entity.Property(e => e.ConnInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.birth_dt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.file_dt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.inbound_info)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.membershipYN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("datetime");

                entity.Property(e => e.uid)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_day)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CUSTOM_CARD_DISPLAY_POLICY>(entity =>
            {
                entity.HasKey(e => new { e.CATEGORY_SEQ, e.CARD_SEQ })
                    .HasName("PK__CUSTOM_CARD_DISP__5224328E");

                entity.ToTable("CUSTOM_CARD_DISPLAY_POLICY");

                entity.HasOne(d => d.CATEGORY_SEQNavigation)
                    .WithMany(p => p.CUSTOM_CARD_DISPLAY_POLICies)
                    .HasForeignKey(d => d.CATEGORY_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CUSTOM_CA__CATEG__1F2E9E6D");
            });

            modelBuilder.Entity<CUSTOM_CART_SP>(entity =>
            {
                entity.ToTable("CUSTOM_CART_SP");

                entity.HasComment("OLD 장바구니");

                entity.HasIndex(e => e.CARD_SEQ, "nind_card_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MEMBER_ID, "nind_member_id")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MEMBER_ID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.card_option)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ishave)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CUSTOM_ETC_ORDER>(entity =>
            {
                entity.HasKey(e => e.order_seq)
                    .HasName("PK_CUSTOM_ETC_ORDER_1");

                entity.ToTable("CUSTOM_ETC_ORDER");

                entity.HasComment("부가상품주문내역");

                entity.HasIndex(e => e.order_g_seq, "IDX_CUSTOM_ETC_ORDER_G_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.member_id, e.order_type }, "custom_etc_order_ccg")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.member_id, "custom_etc_order_memid")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.Return_Complete_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Return_Limit_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Return_Proceeding_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Return_Request_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.SampleBook_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Stock_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.WisaFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.admin_id)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.admin_memo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.card_installmonth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.card_nointyn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.company_Seq).HasDefaultValueSql("((1))");

                entity.Property(e => e.compose_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.compose_date).HasColumnType("smalldatetime");

                entity.Property(e => e.confirm_date).HasColumnType("smalldatetime");

                entity.Property(e => e.coupon_no)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.coupon_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("쿠폰차감금액");

                entity.Property(e => e.couponseq)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComment("쿠폰번호");

                entity.Property(e => e.dacom_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.delivery_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.delivery_code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("송장코드");

                entity.Property(e => e.delivery_com)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("배송업체");

                entity.Property(e => e.delivery_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("배송일자");

                entity.Property(e => e.delivery_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("배송방법");

                entity.Property(e => e.delivery_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("배송비");

                entity.Property(e => e.etc_info_s)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.isAscrow)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isHJ)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isReceipt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("영수증발급여부");

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.mod_compose_date).HasColumnType("smalldatetime");

                entity.Property(e => e.mod_request_date).HasColumnType("smalldatetime");

                entity.Property(e => e.option_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("옵션선택비용");

                entity.Property(e => e.order_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.order_email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("주문자 이메일");

                entity.Property(e => e.order_g_seq).HasComment("더카드전용 통합SEQ");

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("주문자 핸드폰번호");

                entity.Property(e => e.order_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("주문자 이름");

                entity.Property(e => e.order_phone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("주문자 전화번호");

                entity.Property(e => e.order_type)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("manage_code.code (code_type =etcprod)");

                entity.Property(e => e.pg_Fee).HasDefaultValueSql("((0))");

                entity.Property(e => e.pg_caldate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_paydate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_recaldate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_receipt_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("영수증발급ID");

                entity.Property(e => e.pg_refee).HasDefaultValueSql("((0))");

                entity.Property(e => e.pg_repaydate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("결제결과-결제정보");

                entity.Property(e => e.pg_resultinfo2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("결제결과-결제자명");

                entity.Property(e => e.pg_shopid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('bhands_b')")
                    .HasComment("데이콤 PG아이디");

                entity.Property(e => e.pg_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("데이콤 주문번호 or 이니시스 연동 TID");

                entity.Property(e => e.prepare_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("준비일자");

                entity.Property(e => e.print_date).HasColumnType("smalldatetime");

                entity.Property(e => e.recv_address)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("수취인 주소");

                entity.Property(e => e.recv_address_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("수취인 상세주소");

                entity.Property(e => e.recv_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("수취인 핸드폰 번호");

                entity.Property(e => e.recv_msg)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("배송 메시지");

                entity.Property(e => e.recv_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("수취인 인름");

                entity.Property(e => e.recv_phone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("수취인 전화번호");

                entity.Property(e => e.recv_zip)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("수취인 우편번호");

                entity.Property(e => e.result_info)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .HasComment("판매사이트구분");

                entity.Property(e => e.settle_Cancel_Date)
                    .HasColumnType("smalldatetime")
                    .HasComment("결제취소일");

                entity.Property(e => e.settle_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("결제일");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("결제방법");

                entity.Property(e => e.settle_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("결제금액");

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.src_erp_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.status_seq)
                    .HasDefaultValueSql("((0))")
                    .HasComment("주문상태");
            });

            modelBuilder.Entity<CUSTOM_ETC_ORDER_GIFT_ITEM>(entity =>
            {
                entity.HasKey(e => new { e.Order_Seq, e.card_erp_code });

                entity.ToTable("CUSTOM_ETC_ORDER_GIFT_ITEM");

                entity.Property(e => e.card_erp_code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Mod_Date).HasColumnType("datetime");

                entity.Property(e => e.Reg_Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Use_Yn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");
            });

            modelBuilder.Entity<CUSTOM_ETC_ORDER_ITEM>(entity =>
            {
                entity.HasKey(e => new { e.order_seq, e.seq });

                entity.ToTable("CUSTOM_ETC_ORDER_ITEM");

                entity.HasComment("부가상품 주문상세정보");

                entity.Property(e => e.SampleBook_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_opt)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("제품선택옵션");

                entity.Property(e => e.card_price).HasComment("상품소비자가격");

                entity.Property(e => e.card_sale_price).HasComment("상품할인구매가");

                entity.Property(e => e.isChange)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("시즌카드의 경우 카드교체여부");

                entity.Property(e => e.order_count).HasComment("주문수량");

                entity.Property(e => e.order_tbl)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('E')")
                    .IsFixedLength(true)
                    .HasComment("W:청첩장 테이블,E:etc 테이블");
            });

            modelBuilder.Entity<CUSTOM_ETC_ORDER_WeddInfo>(entity =>
            {
                entity.HasKey(e => e.order_seq)
                    .HasName("PK_custom_etc_order_weddinfo");

                entity.ToTable("CUSTOM_ETC_ORDER_WeddInfo");

                entity.HasComment("CUSTOM_ETC_ORDER_WeddInfo");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.bride_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.etc_comment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.groom_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.tmp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_ampm)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_day)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_hour)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_minuite)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_month)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_place)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_year)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CUSTOM_ORDER_ADMIN_MENT>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .IsClustered(false);

                entity.ToTable("CUSTOM_ORDER_ADMIN_MENT");

                entity.HasComment("CS 처리 상세 (관리메모)");

                entity.HasIndex(e => e.REG_DATE, "clu_reg_date")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ORDER_SEQ, "nind_corder_seq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ADMIN_ID)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("등록 어드민");

                entity.Property(e => e.ISWOrder)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true)
                    .HasComment("1:청첩장관련,0:식권 또는 샘플");

                entity.Property(e => e.MENT)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("메모");

                entity.Property(e => e.PCHECK).HasComment("유형(0:일반,1:포장지시,2:사고,3/5:취소)");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");

                entity.Property(e => e.STATUS)
                    .HasDefaultValueSql("(0)")
                    .HasComment("처리여부(0:등록,9:처리완료)");

                entity.Property(e => e.intype).HasDefaultValueSql("((0))");

                entity.Property(e => e.isJumun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true);

                entity.Property(e => e.sgubun)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.stype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('기타')");
            });

            modelBuilder.Entity<CUSTOM_ORDER_CHASU>(entity =>
            {
                entity.HasKey(e => e.id)
                    .IsClustered(false);

                entity.ToTable("CUSTOM_ORDER_CHASU");

                entity.HasComment("초대장 인쇄차수");

                entity.HasIndex(e => e.pdate, "clu_pDate")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_seq, "nind_order_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.pdate, "nind_pdate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.pseq, "nind_pseq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.order_seq).HasComment("주문번호");

                entity.Property(e => e.oseq).HasComment("한 차수내의 순서");

                entity.Property(e => e.pdate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("차수일");

                entity.Property(e => e.pdate_Real)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("인쇄 예정일");

                entity.Property(e => e.proc_date1)
                    .HasColumnType("smalldatetime")
                    .HasComment("원고검토일");

                entity.Property(e => e.proc_date2)
                    .HasColumnType("smalldatetime")
                    .HasComment("원고검토마감일");

                entity.Property(e => e.proc_date3)
                    .HasColumnType("smalldatetime")
                    .HasComment("차수지정일");

                entity.Property(e => e.proc_date4)
                    .HasColumnType("smalldatetime")
                    .HasComment("코렐병합일");

                entity.Property(e => e.pseq).HasComment("차수");
            });

            modelBuilder.Entity<CUSTOM_ORDER_COPY>(entity =>
            {
                entity.HasKey(e => new { e.order_seq, e.delivery_seq })
                    .HasName("PK_CUSTOM_ORDER_COPY_1");

                entity.ToTable("CUSTOM_ORDER_COPY");

                entity.HasComment("청첩장 지시서 검증내용");

                entity.Property(e => e.delivery_seq).HasComment("배송지순서");

                entity.Property(e => e.delivery_method)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("배송방법");

                entity.Property(e => e.embo_str)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("엠보인쇄");

                entity.Property(e => e.isQuick)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("퀵처리 여부");

                entity.Property(e => e.isRisk)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("주의요망 여부");

                entity.Property(e => e.jebon_str)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("제본처리");

                entity.Property(e => e.print_str)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("특수인쇄");
            });

            modelBuilder.Entity<CUSTOM_ORDER_COPY_DETAIL>(entity =>
            {
                entity.ToTable("CUSTOM_ORDER_COPY_DETAIL");

                entity.HasComment("청첩장 지시서 내역");

                entity.HasIndex(e => e.order_seq, "nind_order_seq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.delivery_seq).HasComment("배송지 순서");

                entity.Property(e => e.etc1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("기타내용");

                entity.Property(e => e.isPItem)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("1:인쇄판제품,0:비인쇄판제품");

                entity.Property(e => e.item_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("코드");

                entity.Property(e => e.item_count).HasComment("수량");

                entity.Property(e => e.item_seq).HasComment("순서");

                entity.Property(e => e.item_title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("항목명");

                entity.Property(e => e.item_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("아이템 항목");

                entity.Property(e => e.pack_count).HasComment("무게검증 수량");

                entity.Property(e => e.pack_weight).HasComment("무게검증 무게");

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CUSTOM_ORDER_COPY_PlcCode>(entity =>
            {
                entity.ToTable("CUSTOM_ORDER_COPY_PlcCode");

                entity.HasComment("지시서 코드 관리");

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.plc_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.plc_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CUSTOM_ORDER_COUPON>(entity =>
            {
                entity.HasKey(e => e.ORDER_COUPON_SEQ)
                    .IsClustered(false);

                entity.ToTable("CUSTOM_ORDER_COUPON");

                entity.HasComment("쿠폰 적용 내역");

                entity.HasIndex(e => e.ORDER_COUPON_SEQ, "CI_ORDER_COUPON_SEQ")
                    .IsClustered();

                entity.HasIndex(e => e.COUPON_ISSUE_SEQ, "NCI_COUPON_ISSUE_SEQ");

                entity.HasIndex(e => e.ORDER_SEQ, "NCI_ORDER_SEQ");

                entity.HasIndex(e => e.REG_DATE, "NCI_REG_DATE");

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");
            });

            modelBuilder.Entity<CUSTOM_PRIVATE_CHOICE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUSTOM_PRIVATE_CHOICE");

                entity.HasIndex(e => e.CARD_SEQ, "IDX__card_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MEMBER_ID, "IDX__member_id")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CARD_TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true)
                    .HasComment("W:청첩장,E:E청첩장");

                entity.Property(e => e.Daum_uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_ID)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.REGDATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CUSTOM_SAMPLE_ORDER>(entity =>
            {
                entity.HasKey(e => e.sample_order_seq)
                    .HasName("PK__CUSTOM_SAMPLE_OR__1EF99443")
                    .IsClustered(false);

                entity.ToTable("CUSTOM_SAMPLE_ORDER");

                entity.HasComment("샘플주문정보");

                entity.HasIndex(e => new { e.COMPANY_SEQ, e.sample_order_seq, e.STATUS_SEQ }, "CUSTOM_SAMPLE_ORDER67")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MEMBER_EMAIL, "MEMBER_EMAIL")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MEMBER_ID, "MEMBER_ID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SALES_GUBUN, "NCI_CUSTOM_SAMPLE_ORDER_SALES_GUBUN")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.REQUEST_DATE, "NCI_REQUEST_DATE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.STATUS_SEQ, "NCI_STATUS_SEQ");

                entity.HasIndex(e => e.SETTLE_DATE, "clu")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.sample_order_seq).ValueGeneratedNever();

                entity.Property(e => e.ADMIN_ID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BUY_CONF)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.CANCEL_DATE)
                    .HasColumnType("smalldatetime")
                    .HasComment("주문취소일");

                entity.Property(e => e.CANCEL_REASON)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("주문취소 사유");

                entity.Property(e => e.COMPANY_SEQ)
                    .HasDefaultValueSql("((1))")
                    .HasComment("제휴업체");

                entity.Property(e => e.DACOM_TID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DELIVERY_CHANGO)
                    .HasDefaultValueSql("((1))")
                    .HasComment("배송창고 1:본사출고");

                entity.Property(e => e.DELIVERY_CODE_NUM)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("배송 송장번호");

                entity.Property(e => e.DELIVERY_COM)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("택배사 코드(CJ:CJ택배)");

                entity.Property(e => e.DELIVERY_DATE)
                    .HasColumnType("smalldatetime")
                    .HasComment("배송처리일");

                entity.Property(e => e.DELIVERY_METHOD)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("1:택배");

                entity.Property(e => e.DELIVERY_PRICE)
                    .HasDefaultValueSql("((2000))")
                    .HasComment("배송비");

                entity.Property(e => e.DSP_PRINT_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.INVOICE_PRINT_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.ISDACOM)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("영수증 발행여부");

                entity.Property(e => e.JOB_ORDER_PRINT_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.MEMBER_ADDRESS)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("수취인 주소");

                entity.Property(e => e.MEMBER_ADDRESS_DETAIL)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("수취인 상세주소");

                entity.Property(e => e.MEMBER_EMAIL)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("주문자 이메일");

                entity.Property(e => e.MEMBER_FAX)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("사용안함");

                entity.Property(e => e.MEMBER_HPHONE)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("주문자 핸드폰번호");

                entity.Property(e => e.MEMBER_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("회원ID");

                entity.Property(e => e.MEMBER_NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("주문자 이름");

                entity.Property(e => e.MEMBER_PHONE)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("주문자 전화번호");

                entity.Property(e => e.MEMBER_ZIP)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("수취인 우편번호");

                entity.Property(e => e.MEMO)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("배송메모");

                entity.Property(e => e.MULTI_PACK_REG_DATE)
                    .HasColumnType("datetime")
                    .HasComment("묶음배송 등록일");

                entity.Property(e => e.MULTI_PACK_SEQ).HasComment("묶음배송 seq");

                entity.Property(e => e.MULTI_PACK_SUB_SEQ).HasComment("묶음배송 건수 (1,2)");

                entity.Property(e => e.OPT_GUBUN).HasMaxLength(10);

                entity.Property(e => e.OPT_VALUES).HasMaxLength(4);

                entity.Property(e => e.PG_CALDATE)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("PG수금일");

                entity.Property(e => e.PG_FEE)
                    .HasDefaultValueSql("((0))")
                    .HasComment("PG수수료");

                entity.Property(e => e.PG_MERTID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("PG상점 아이디");

                entity.Property(e => e.PG_PAYDATE)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("PG정산일");

                entity.Property(e => e.PG_RECALDATE)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("PG환불수금일");

                entity.Property(e => e.PG_REFEE).HasComment("pG환불 수수료");

                entity.Property(e => e.PG_REPAYDATE)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("PG환불정산일");

                entity.Property(e => e.PG_RESULTINFO)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("PG결제결과");

                entity.Property(e => e.PG_RESULTINFO2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("PG결제결과 (입금자 이름)");

                entity.Property(e => e.PG_TID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("이니시스 TID");

                entity.Property(e => e.PREPARE_DATE)
                    .HasColumnType("smalldatetime")
                    .HasComment("카드준비일");

                entity.Property(e => e.REDUCE_PRICE).HasDefaultValueSql("((0))");

                entity.Property(e => e.REQUEST_DATE)
                    .HasColumnType("smalldatetime")
                    .HasComment("주문일");

                entity.Property(e => e.SALES_GUBUN)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .HasComment("manage_code.sales_gubun");

                entity.Property(e => e.SETTLE_CANCEL)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("결제취소여부(사용안함)");

                entity.Property(e => e.SETTLE_DATE)
                    .HasColumnType("datetime")
                    .HasComment("결제일");

                entity.Property(e => e.SETTLE_HPHONE)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasComment("결제 핸드폰");

                entity.Property(e => e.SETTLE_METHOD)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("결제방법");

                entity.Property(e => e.SETTLE_MOBILID)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("사용안함");

                entity.Property(e => e.SETTLE_PRICE).HasComment("결제금액");

                entity.Property(e => e.SRC_ERP_DATE)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("ERP전송일");

                entity.Property(e => e.STATUS_SEQ).HasComment("주문상태 1:주문완료(결제전),3:결제완료,10:카드준비중,12:발송완료");

                entity.Property(e => e.WEDD_DATE)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("예식일");

                entity.Property(e => e.WisaFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.call_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.card_installmonth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.card_nointyn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.etc_info_s)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isAscrow)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("에스크로 거래건 여부");

                entity.Property(e => e.isHJ)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("한진택배 EDI 전송여부");

                entity.Property(e => e.isOneClickSample)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isVar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.join_division)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Web')")
                    .HasComment("mobile,Web 구분");

                entity.Property(e => e.order_g_seq).HasComment("더카드 그룹 seq");
            });

            modelBuilder.Entity<CUSTOM_SAMPLE_ORDER_ITEM>(entity =>
            {
                entity.HasKey(e => new { e.SAMPLE_ORDER_SEQ, e.CARD_SEQ })
                    .HasName("PK__CUSTOM_SAMPLE_OR__540C7B00");

                entity.ToTable("CUSTOM_SAMPLE_ORDER_ITEM");

                entity.HasComment("샘플주문 상세정보");

                entity.HasIndex(e => e.SAMPLE_ORDER_SEQ, "NCI_CUSTOM_SAMSPLE_ORDER_SEQ");

                entity.Property(e => e.CARD_PRICE).HasComment("샘플 판매가");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("주문일");

                entity.Property(e => e.isChu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.md_recommend)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.price_info)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.SAMPLE_ORDER_SEQNavigation)
                    .WithMany(p => p.CUSTOM_SAMPLE_ORDER_ITEMs)
                    .HasForeignKey(d => d.SAMPLE_ORDER_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CUSTOM_SA__SAMPL__668030F6");
            });

            modelBuilder.Entity<CUSTOM_SAMPLE_ORDER_ITEM_COUNT>(entity =>
            {
                entity.HasKey(e => new { e.CARD_SEQ, e.REG_DATE })
                    .HasName("PK_CARD_SEQ_CUSTOM_SAMPLE_ORDER_ITEM_201411_1");

                entity.ToTable("CUSTOM_SAMPLE_ORDER_ITEM_COUNT");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Callcenter_Log>(entity =>
            {
                entity.ToTable("Callcenter_Log");

                entity.HasComment("콜센터 로그");

                entity.HasIndex(e => e.YRDATE, "IX_Callcenter_Log_RDATE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.YCallerID, "IX_Callcenter_Log_YCallerID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.YIVR, "IX_Callcenter_Log_YIVR")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.YCallerID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.YIVR)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.YMENU)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.YRDATE)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CardRanking>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CardRanking");

                entity.Property(e => e.CardRanking1).HasColumnName("CardRanking");
            });

            modelBuilder.Entity<Card_Disrate_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Card_Disrate_View");

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_group)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.display_yes_or_no)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num100)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num1000)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num150)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num200)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num250)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num300)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num350)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num400)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num450)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num50)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num500)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num550)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num600)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num650)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num700)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num800)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.num900)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Category_Manage>(entity =>
            {
                entity.HasKey(e => e.CM_Idx);

                entity.ToTable("Category_Manage");

                entity.Property(e => e.CM_Idx).HasComment("Sequence");

                entity.Property(e => e.CM_Banner).HasMaxLength(100);

                entity.Property(e => e.CM_Code1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("1차코드");

                entity.Property(e => e.CM_Code2)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("2차코드");

                entity.Property(e => e.CM_Code3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("3차코드");

                entity.Property(e => e.CM_Code_Merge)
                    .HasMaxLength(8)
                    .HasComment("통합코드");

                entity.Property(e => e.CM_Name)
                    .HasMaxLength(50)
                    .HasComment("카테고리명");

                entity.Property(e => e.CM_Regdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");

                entity.Property(e => e.CM_SiteID)
                    .HasDefaultValueSql("((5007))")
                    .HasComment("사이트고유ID");

                entity.Property(e => e.CM_Status)
                    .HasDefaultValueSql("((1))")
                    .HasComment("0:비전시, 1:전시");
            });

            modelBuilder.Entity<Category_Manage_Plu>(entity =>
            {
                entity.HasKey(e => e.CM_Idx);

                entity.Property(e => e.CM_Idx).HasComment("Sequence");

                entity.Property(e => e.CM_Banner).HasMaxLength(100);

                entity.Property(e => e.CM_Code1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("1차코드");

                entity.Property(e => e.CM_Code2)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("2차코드");

                entity.Property(e => e.CM_Code3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("3차코드");

                entity.Property(e => e.CM_Code_Merge)
                    .HasMaxLength(8)
                    .HasComment("통합코드");

                entity.Property(e => e.CM_Name)
                    .HasMaxLength(50)
                    .HasComment("카테고리명");

                entity.Property(e => e.CM_Regdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");

                entity.Property(e => e.CM_SiteID)
                    .HasDefaultValueSql("((5007))")
                    .HasComment("사이트고유ID");

                entity.Property(e => e.CM_Status)
                    .HasDefaultValueSql("((1))")
                    .HasComment("0:비전시, 1:전시");
            });

            modelBuilder.Entity<CopperPlateExclude>(entity =>
            {
                entity.HasKey(e => e.card_seq)
                    .IsClustered(false);

                entity.ToTable("CopperPlateExclude");

                entity.Property(e => e.card_seq).ValueGeneratedNever();

                entity.Property(e => e.admin_id)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.regdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CopperPlateInfo>(entity =>
            {
                entity.HasKey(e => new { e.card_seq, e.isFPrint })
                    .IsClustered(false);

                entity.ToTable("CopperPlateInfo");

                entity.Property(e => e.isFPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.bCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.card_code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.regdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Custom_etc_basket>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_Custom_etc_basket__seq");

                entity.ToTable("Custom_etc_basket");

                entity.Property(e => e.order_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custom_order_Group>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Custom_order_Group");

                entity.HasComment("더카드전용 카드주문 그룹");

                entity.HasIndex(e => e.order_g_seq, "CI_CUSTOM_ORDER_GROUP")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.company_seq, "NCI_CUSTOM_ORDER_GROUP_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.member_id, "NCI_CUSTOM_ORDER_GROUP_MEMBER_ID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.member_id, e.company_seq }, "NCI_CUSTOM_ORDER_GROUP_MEMBER_ID_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.dacom_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.delivery_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.delivery_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.etc_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.etc_price_ment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isAscrow)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isReceipt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.order_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_etc_comment)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.order_faxphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_g_seq).ValueGeneratedOnAdd();

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.order_total_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.pay_Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.pg_caldate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_fee).HasDefaultValueSql("((0))");

                entity.Property(e => e.pg_paydate).HasColumnType("smalldatetime");

                entity.Property(e => e.pg_recaldate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_receipt_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pg_repaydate).HasColumnType("smalldatetime");

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.pg_resultinfo2)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.pg_shopid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pg_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.point_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.settle_cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.settle_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.settle_status).HasDefaultValueSql("((0))");

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.src_ap_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_cancel_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.status_seq).HasDefaultValueSql("((0))");

                entity.Property(e => e.temp_key)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DACOM_PayTBL>(entity =>
            {
                entity.ToTable("DACOM_PayTBL");

                entity.Property(e => e.cal_date)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.pay_date)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.pay_info)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.pg_shopid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.settle_date)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.status)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DD_BANLIST>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__DD_BANLI__DDDFBCBE0A140B88");

                entity.ToTable("DD_BANLIST");

                entity.Property(e => e.hphone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<DD_JEHU_LINK>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DD_JEHU_LINK");

                entity.Property(e => e.COMPANY_ID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<DEARDEER_JEHU>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DEARDEER_JEHU");

                entity.Property(e => e.COMPANY_ID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.regist_Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<DEARDEER_SAMPLE_ORDER_ITEM>(entity =>
            {
                entity.HasKey(e => e.DEARDEER_SAMPLE_ORDER_ITEM_SEQ);

                entity.ToTable("DEARDEER_SAMPLE_ORDER_ITEM");

                entity.Property(e => e.ITEM_CODE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ITEM_IMAGE_URL)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SAMPLE_ORDER_ITEM_NO)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DEARDEER_SAMPLE_ORDER_MST>(entity =>
            {
                entity.HasKey(e => e.DEARDEER_SAMPLE_ORDER_MST_SEQ);

                entity.ToTable("DEARDEER_SAMPLE_ORDER_MST");

                entity.Property(e => e.ADDRESS)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ADDRESS_DETAIL)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CLLDLCBRANSHORTNM)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CLLDLVBRANNM)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CLLDLVEMPNICKNM)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CLLDLVEMPNM)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CLSFADDR)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CLSFCD)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CLSFNM)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DELIVERY_COMPANY_CODE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DELIVERY_DATE).HasColumnType("datetime");

                entity.Property(e => e.DSP_PRINT_YORN)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.HOME_PHONE_NUMBER)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.INVOICE_PRINT_YORN)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.JOB_ORDER_PRINT_YORN)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.MOBILE_PHONE_NUMBER)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PREPARE_DATE).HasColumnType("datetime");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SAMPLE_ORDER_NO)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS_SEQ).HasDefaultValueSql("((4))");

                entity.Property(e => e.SUBCLSFCD)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TRACKING_NUMBER)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.USER_EMAIL)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.USER_ID)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.USER_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ZIP_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DELIVERY_INFO>(entity =>
            {
                entity.HasKey(e => new { e.ORDER_SEQ, e.DELIVERY_SEQ })
                    .HasName("PK__DELIVERY_INFO__73BA3083");

                entity.ToTable("DELIVERY_INFO");

                entity.HasComment("배송정보");

                entity.HasIndex(e => e.DELIVERY_DATE, "IX_DELIVERY_DELDATE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PACKING_ADMIN_ID, "IX_DELIVERY_PACKDATE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PACKING_DATE, "IX_DELIVERY_PACKING_DATE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DELIVERY_CODE_NUM, "nind_DELIVERY_CODE_NUM")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ID, "nind_id")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ADDR)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("배달지 주소");

                entity.Property(e => e.ADDR_DETAIL)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("배달지 상세주소");

                entity.Property(e => e.DELIVERY_CODE_NUM)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("송장번호");

                entity.Property(e => e.DELIVERY_COM)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("택배사 코드(HJ:한진택배,CJ:CJ택배)");

                entity.Property(e => e.DELIVERY_DATE)
                    .HasColumnType("smalldatetime")
                    .HasComment("발송일");

                entity.Property(e => e.DELIVERY_INFO1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_INFO")
                    .HasComment("배송 메시지");

                entity.Property(e => e.DELIVERY_MEMO)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("배송관련 관리자 메모");

                entity.Property(e => e.DELIVERY_METHOD).HasComment("1:택배,2:퀵,3:방문");

                entity.Property(e => e.DELIVERY_PAY)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.DELIVERY_PRICE).HasDefaultValueSql("((0))");

                entity.Property(e => e.Delivery_Type)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EMAIL)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("수취인 이메일(사용안함)");

                entity.Property(e => e.HPHONE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("수취인 핸드폰 번호");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.NAME)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComment("수취인 이름");

                entity.Property(e => e.PACKING_ADMIN_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("포장 담당자");

                entity.Property(e => e.PACKING_DATE)
                    .HasColumnType("smalldatetime")
                    .HasComment("포장일");

                entity.Property(e => e.PHONE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("수취인 전화번호");

                entity.Property(e => e.QuickGubun)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ZIP)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("배달지 우편번호");

                entity.Property(e => e.isNewCopy)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.nt_code)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('KOR')")
                    .IsFixedLength(true)
                    .HasComment("국가코드(KOR:한국,USA:미국)");

                entity.Property(e => e.receiveShopname)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.receivecode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("지시서 검증일(아직 사용안함)");

                entity.Property(e => e.savepack_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.savepack_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<DELIVERY_INFO_DELCODE>(entity =>
            {
                entity.HasKey(e => new { e.delivery_id, e.delivery_code_num });

                entity.ToTable("DELIVERY_INFO_DELCODE");

                entity.Property(e => e.delivery_code_num)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("송장코드");

                entity.Property(e => e.DELCODE_REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.delivery_com)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("택배사 코드(HJ:한진택배,CJ:CJ택배)");

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.isHJ)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("한진택배 전송 여부");
            });

            modelBuilder.Entity<DELIVERY_INFO_DETAIL>(entity =>
            {
                entity.ToTable("DELIVERY_INFO_DETAIL");

                entity.HasComment("배송정보상세");

                entity.HasIndex(e => e.delivery_id, "nind_delivery_id")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_seq, "nind_order_Seq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.delivery_id).HasComment("delivery_info.id");

                entity.Property(e => e.item_count).HasComment("수량");

                entity.Property(e => e.item_id).HasComment("item_type=P:custom_order_plist.id / item_type=O:custom_order_item.id");

                entity.Property(e => e.item_title)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("판 이름 또는 제품명");

                entity.Property(e => e.item_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("C:카드,E:봉투,O:기타");
            });

            modelBuilder.Entity<DELIVERY_INFO_GROUP>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.ORDER_G_SEQ });

                entity.ToTable("DELIVERY_INFO_GROUP");

                entity.HasComment("묶음배송");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.ADDR)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("주소");

                entity.Property(e => e.ADDR_DETAIL)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("상세주소");

                entity.Property(e => e.DELIVERY_CODE_NUM)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DELIVERY_COM)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DELIVERY_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.DELIVERY_INFO)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("배송 메모");

                entity.Property(e => e.DELIVERY_MEMO)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DELIVERY_PAY)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.DELIVERY_PRICE)
                    .HasDefaultValueSql("((0))")
                    .HasComment("배송비");

                entity.Property(e => e.EMAIL)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("이메일");

                entity.Property(e => e.HPHONE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("헨드폰번호");

                entity.Property(e => e.NAME)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComment("이름");

                entity.Property(e => e.PACKING_ADMIN_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PACKING_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.PHONE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("전화번호");

                entity.Property(e => e.ZIP)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("우편번호");

                entity.Property(e => e.isNewCopy)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.nt_code)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('KOR')")
                    .IsFixedLength(true)
                    .HasComment("국가코드");

                entity.Property(e => e.receiveShopname)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.receivecode)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.savepack_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.savepack_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<DELIVERY_SEND_LOG>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("DELIVERY_SEND_LOG");

                entity.HasComment("배송 로그");

                entity.Property(e => e.DELIVERY_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("송장번호");

                entity.Property(e => e.ERROR_DESC).HasMaxLength(500);

                entity.Property(e => e.ERROR_MSG).HasMaxLength(500);

                entity.Property(e => e.ORDER_SEQ)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_TABLE_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("주문테이블");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RESULT_CODE)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("결과코드");

                entity.Property(e => e.RESULT_MSG)
                    .HasMaxLength(500)
                    .HasComment("결과메세지");
            });

            modelBuilder.Entity<DISCOUNT_POLICY>(entity =>
            {
                entity.HasKey(e => e.DISCOUNT_SEQ)
                    .HasName("PK__DISCOUNT_POLICY__4A8310C6");

                entity.ToTable("DISCOUNT_POLICY");

                entity.HasComment("할인율 관리");

                entity.HasIndex(e => e.MAX_COUNT, "IDX__DISCOUNT_POLICY__MAX_COUNT")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MAX_PRICE, "IDX__DISCOUNT_POLICY__MAX_PRICE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MIN_COUNT, "IDX__DISCOUNT_POLICY__MIN_COUNT")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MIN_PRICE, "IDX__DISCOUNT_POLICY__MIN_PRICE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DISCOUNT_SEQ).ValueGeneratedNever();

                entity.HasOne(d => d.CARD_CATEGORY_SEQNavigation)
                    .WithMany(p => p.DISCOUNT_POLICies)
                    .HasForeignKey(d => d.CARD_CATEGORY_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DISCOUNT___CARD___6D2D2E85");
            });

            modelBuilder.Entity<DISPLAY_CATEGORY>(entity =>
            {
                entity.HasKey(e => e.CATEGORY_SEQ)
                    .HasName("PK__DISPLAY_CATEGORY__2BFE89A6");

                entity.ToTable("DISPLAY_CATEGORY");

                entity.Property(e => e.CATEGORY_SEQ).ValueGeneratedNever();

                entity.Property(e => e.CATEGORY_DESC)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.CATEGORY_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Database>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Database", "invtmng");

                entity.Property(e => e.BUNJI).HasMaxLength(50);

                entity.Property(e => e.DONG)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GUGUN)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SEQ).HasColumnType("money");

                entity.Property(e => e.SIDO)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ZIPCODE)
                    .IsRequired()
                    .HasMaxLength(7);
            });

            modelBuilder.Entity<DatabaseChangeHistory>(entity =>
            {
                entity.HasKey(e => e.EventID)
                    .HasName("XPKSPLOG")
                    .IsClustered(false);

                entity.ToTable("DatabaseChangeHistory");

                entity.Property(e => e.CommandText).IsUnicode(false);

                entity.Property(e => e.EventDT).HasColumnType("datetime");

                entity.Property(e => e.EventType)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.HostIP)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DesignBettle>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("DesignBettle");

                entity.HasComment("디자인배틀이벤트");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.Gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("1: 별디자인, 2:달디자인");

                entity.Property(e => e.Member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Num).HasComment("배틀 회차");

                entity.Property(e => e.Order_Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Order_Name)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");
            });

            modelBuilder.Entity<Designer>(entity =>
            {
                entity.ToTable("Designer");

                entity.HasComment("디자이너 정보");

                entity.Property(e => e.DesignerCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Pwd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Discount_Delete_Admin_Log>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Discount_Delete_Admin_Log");

                entity.HasComment("할인율 삭제 히스토리");

                entity.Property(e => e.ADMIN_ID).HasMaxLength(50);

                entity.Property(e => e.DELETE_DATE).HasColumnType("datetime");

                entity.Property(e => e.SEQ).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Discount_Paper>(entity =>
            {
                entity.HasKey(e => e.DiscountSeq);

                entity.ToTable("Discount_Paper");

                entity.Property(e => e.DiscountNum)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ENV_SIZE>(entity =>
            {
                entity.HasKey(e => e.env_num);

                entity.ToTable("ENV_SIZE");

                entity.Property(e => e.env_num)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ERP_Price>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ERP_Price");

                entity.Property(e => e.DesignCode)
                    .HasMaxLength(5)
                    .IsFixedLength(true);

                entity.Property(e => e.ERP_Chool).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ERP_Daeri).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ERP_Sobi).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsFixedLength(true);

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.UpdateDate)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ERR_TBL>(entity =>
            {
                entity.ToTable("ERR_TBL");

                entity.HasComment("빠른손 오류 로그");

                entity.Property(e => e.err_desc)
                    .HasColumnType("text")
                    .HasComment("해당 내용");

                entity.Property(e => e.err_time)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("발생시각");

                entity.Property(e => e.login_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("에러 발생 관리 아이디");
            });

            modelBuilder.Entity<ESTIMATE_REQUEST>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("ESTIMATE_REQUEST");

                entity.HasComment("커스텀 제작/견적 문의");

                entity.Property(e => e.seq).HasComment("일련번호");

                entity.Property(e => e.CREATED_TMSTMP)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("생성일");

                entity.Property(e => e.CREATED_USERID)
                    .HasMaxLength(50)
                    .HasComment("생성자");

                entity.Property(e => e.admin_content).HasColumnType("text");

                entity.Property(e => e.chk_admin)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('N')")
                    .HasComment("관리자확인 여부");

                entity.Property(e => e.chk_date)
                    .HasColumnType("datetime")
                    .HasComment("관리자확인 일자");

                entity.Property(e => e.company_location)
                    .HasMaxLength(50)
                    .HasComment("회사위치");

                entity.Property(e => e.company_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("회사명");

                entity.Property(e => e.company_seq).HasComment("사이트구분 번호");

                entity.Property(e => e.delete_ind)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('N')")
                    .HasComment("삭제여부");

                entity.Property(e => e.etc_content)
                    .HasColumnType("text")
                    .HasComment("기타정보 추가문의");

                entity.Property(e => e.etc_upfile)
                    .HasMaxLength(50)
                    .HasComment("기타정보 파일첨부");

                entity.Property(e => e.person_email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("이메일");

                entity.Property(e => e.person_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("성함");

                entity.Property(e => e.person_phone1)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasComment("연락처1");

                entity.Property(e => e.person_phone2)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasComment("연락처2");

                entity.Property(e => e.person_phone3)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasComment("연락처3");

                entity.Property(e => e.product_content)
                    .HasColumnType("text")
                    .HasComment("제작정보 문의사항");

                entity.Property(e => e.product_count)
                    .HasMaxLength(50)
                    .HasComment("제작정보 요청수량");

                entity.Property(e => e.product_duedate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("제작정보 납기예상일");

                entity.Property(e => e.product_type)
                    .HasMaxLength(1)
                    .HasComment("제작정보 타입");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("사이트구분 코드");
            });

            modelBuilder.Entity<EVENT_5hang>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("EVENT_5hang");

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.msg_txt1)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.msg_txt2)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.msg_txt3)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.msg_txt4)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.msg_txt5)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.rdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<EVENT_5hang_str>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("EVENT_5hang_str");

                entity.Property(e => e.str_1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.str_2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.str_3)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.str_4)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.str_5)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EVENT_DigitalPhoto>(entity =>
            {
                entity.ToTable("EVENT_DigitalPhoto");

                entity.Property(e => e.id).ValueGeneratedNever();

                entity.Property(e => e.coupon_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.isUse)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.member_email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.member_id)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.member_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.use_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<EVENT_ENTER_MEMBER>(entity =>
            {
                entity.HasKey(e => e.SEQ)
                    .HasName("PK__EVENT_EN__CA1938C05139B459");

                entity.ToTable("EVENT_ENTER_MEMBER");

                entity.Property(e => e.EVENT_GUBUN)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_ID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SALES_GUBUN)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EVENT_ETLAND>(entity =>
            {
                entity.ToTable("EVENT_ETLAND");

                entity.Property(e => e.id).ValueGeneratedNever();

                entity.Property(e => e.admin_memo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.c_addr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.c_email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.c_hphone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.c_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.c_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.c_uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.c_weddingday)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.coupon_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isUse)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<EVENT_FACEBOOKSHARE>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("EVENT_FACEBOOKSHARE");

                entity.Property(e => e.seq).ValueGeneratedNever();

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("datetime");

                entity.Property(e => e.site_div)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EVENT_LMS_CONTENT>(entity =>
            {
                entity.HasKey(e => e.SEQ)
                    .HasName("PK__EVENT_LM__CA1938C05CFBAF7A");

                entity.ToTable("EVENT_LMS_CONTENT");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.div_info)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.lms_subject)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EVENT_MARKETING_AGREEMENT>(entity =>
            {
                entity.HasKey(e => e.uid)
                    .HasName("PK__EVENT_MA__DD701264C7E3EBEB");

                entity.ToTable("EVENT_MARKETING_AGREEMENT");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.created_tmstmp).HasColumnType("datetime");

                entity.Property(e => e.gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EVENT_SAMSUNG>(entity =>
            {
                entity.ToTable("EVENT_SAMSUNG");

                entity.Property(e => e.id).ValueGeneratedNever();

                entity.Property(e => e.admin_memo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ans4).HasDefaultValueSql("(0)");

                entity.Property(e => e.ans5_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ans_date).HasColumnType("smalldatetime");

                entity.Property(e => e.branch_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.c_email)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.c_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.c_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.c_sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.company_seq).HasDefaultValueSql("(10)");

                entity.Property(e => e.coupon_code)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.isAns)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isBarunson)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.l_info1).HasDefaultValueSql("(0)");

                entity.Property(e => e.l_info2).HasDefaultValueSql("(0)");

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sreg_Date)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_Date)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EVENT_talklove>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("EVENT_talklove");

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.msg_txt)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.rdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.talk_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<EVTPAGE_MARKETING_AGREEMENT_LOG>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EVTPAGE_MARKETING_AGREEMENT_LOG");

                entity.Property(e => e.created_tmstmp).HasColumnType("datetime");

                entity.Property(e => e.jehu_gubun)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EVT_BHANDS_COUPLE>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__EVT_BHAN__DDDFBCBE29A1DB52");

                entity.ToTable("EVT_BHANDS_COUPLES");

                entity.HasComment("카카오 동영상 이벤트");

                entity.Property(e => e.created_tmstmp).HasColumnType("datetime");

                entity.Property(e => e.gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.is_display)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.snsUrl)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.upMV_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EVT_BHANDS_COUPLES_VOTE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EVT_BHANDS_COUPLES_VOTE");

                entity.HasComment("카카오 동영상 추천 이벤트");

                entity.Property(e => e.Idx).ValueGeneratedOnAdd();

                entity.Property(e => e.RegDate).HasColumnType("datetime");

                entity.Property(e => e.UID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EVT_HOLLOWEEN>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EVT_HOLLOWEEN");

                entity.HasComment("할로윈 이벤트");

                entity.Property(e => e.reg_date).HasColumnType("datetime");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EVT_HOTDEAL_STOCK>(entity =>
            {
                entity.HasKey(e => new { e.CARD_SEQ, e.COMPANY_SEQ });

                entity.ToTable("EVT_HOTDEAL_STOCK");

                entity.HasComment("핫딜 이벤트");
            });

            modelBuilder.Entity<EVT_LINK_HIT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EVT_LINK_HIT");

                entity.Property(e => e.inflow)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.regdate).HasColumnType("smalldatetime");

                entity.Property(e => e.route)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Error_User>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Error_User");

                entity.HasComment("에러로그");

                entity.Property(e => e.bigo1).HasMaxLength(300);

                entity.Property(e => e.bigo2).HasMaxLength(300);

                entity.Property(e => e.bigo3).HasMaxLength(300);

                entity.Property(e => e.bigo4).HasMaxLength(300);

                entity.Property(e => e.bigo5).HasMaxLength(300);

                entity.Property(e => e.bigo6).HasMaxLength(300);

                entity.Property(e => e.bigo7).HasMaxLength(300);

                entity.Property(e => e.order_email).HasMaxLength(200);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid).HasMaxLength(50);
            });

            modelBuilder.Entity<EveCard_Order_Info>(entity =>
            {
                entity.HasKey(e => e.SEQ)
                    .HasName("PK_CIDX_EveCard_Order_Info__SEQ");

                entity.ToTable("EveCard_Order_Info");

                entity.HasIndex(e => e.CP_LoginDate, "IDX__CP_LoginDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Admin_Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CP_LoginDate)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.CP_Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CP_Number)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Company_Number)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Memo).HasColumnType("text");

                entity.Property(e => e.Order_Date).HasColumnType("datetime");

                entity.Property(e => e.Order_Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<EveCard_Prd_Info>(entity =>
            {
                entity.HasKey(e => e.SEQ)
                    .HasName("PK_CIDX_EveCard_Prd_Info__SEQ");

                entity.ToTable("EveCard_Prd_Info");

                entity.HasIndex(e => e.CP_LoginDate, "IDX__CP_LoginDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CP_LoginDate)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Order_Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Prd_Code)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EverydayCard>(entity =>
            {
                entity.HasKey(e => e.SEQ)
                    .HasName("PK_CIDX_EverydayCard__SEQ");

                entity.ToTable("EverydayCard");

                entity.HasIndex(e => e.Prd_Code, "IDX__Prd_Code")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Prd_Code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Prd_Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Prd_Img)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Prd_Name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Prd_Size)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Prd_Text).HasColumnType("text");

                entity.Property(e => e.Prd_View)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Evt_Banner>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__Evt_Bann__DDDFBCBE2FC13613");

                entity.ToTable("Evt_Banner");

                entity.HasComment("비핸즈 이벤트 배너관리");

                entity.Property(e => e.create_date).HasColumnType("datetime");

                entity.Property(e => e.end_date).HasColumnType("datetime");

                entity.Property(e => e.imgfile_path)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.link_url)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.start_date).HasColumnType("datetime");

                entity.Property(e => e.view_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Evt_Plus_Friend>(entity =>
            {
                entity.HasKey(e => e.pf_idx)
                    .HasName("PK__Evt_Plus__62C7162E75642BD6");

                entity.Property(e => e.pf_coupon_status_f)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.pf_fuid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pf_regDate).HasColumnType("datetime");

                entity.Property(e => e.pf_uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.service)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Evt_Plus_Friends_uid>(entity =>
            {
                entity.HasKey(e => e.p_idx)
                    .HasName("PK__Evt_Plus__02C266CD887F2A5C");

                entity.ToTable("Evt_Plus_Friends_uid");

                entity.Property(e => e.p_coupon_regdate).HasColumnType("datetime");

                entity.Property(e => e.p_coupon_status)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.p_regDate).HasColumnType("datetime");

                entity.Property(e => e.p_uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.service)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Evt_three_six_nine_board>(entity =>
            {
                entity.HasKey(e => e.b_idx)
                    .HasName("PK__Evt_thre__68F2F1B60A9F18AB");

                entity.ToTable("Evt_three_six_nine_board");

                entity.Property(e => e.b_uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.evt_num)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.evt_regDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Ewedd_After_Note>(entity =>
            {
                entity.HasKey(e => new { e.CMT_SEQ, e.CARD_SEQ });

                entity.ToTable("Ewedd_After_Note");

                entity.Property(e => e.CMT_SEQ).ValueGeneratedOnAdd();

                entity.Property(e => e.COMMENT)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.DIV)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MEMBER_NAME)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_UID)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.REGDATE).HasColumnType("datetime");

                entity.Property(e => e.TITLE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TRAVEL_PLACE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WEDD_DT).HasColumnType("datetime");

                entity.Property(e => e.WEDD_PLACE)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GIFT_DAILY_MM>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GIFT_DAILY_MMS");

                entity.Property(e => e.send_dt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GREETING>(entity =>
            {
                entity.HasKey(e => e.GREETING_SEQ)
                    .HasName("PK__GREETING__4B7734FF");

                entity.ToTable("GREETING");

                entity.HasComment("인사말");

                entity.Property(e => e.GREETING_SEQ).ValueGeneratedNever();

                entity.Property(e => e.DISPLAY_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GREETING_CATEGORY_SEQ).HasComment("카테고리");

                entity.Property(e => e.GREETING_CONTENT)
                    .IsRequired()
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasComment("인사말 내용");

                entity.Property(e => e.GREETING_NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LAST_UPDATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RECOMEND_YES_OR_NO)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.REGIST_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.USE_IMAGE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.GREETING_CATEGORY_SEQNavigation)
                    .WithMany(p => p.GREETINGs)
                    .HasForeignKey(d => d.GREETING_CATEGORY_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__GREETING__GREETI__14B10FFA");
            });

            modelBuilder.Entity<GREETING_CATEGORY>(entity =>
            {
                entity.HasKey(e => e.GREETING_CATEGORY_SEQ)
                    .HasName("PK__GREETING_CATEGOR__367C1819");

                entity.ToTable("GREETING_CATEGORY");

                entity.HasComment("인사말 카테고리");

                entity.Property(e => e.GREETING_CATEGORY_SEQ)
                    .ValueGeneratedNever()
                    .HasComment("카테고리 키");

                entity.Property(e => e.CATEGORY_DESCRIPTION)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("카테고리 설명");

                entity.Property(e => e.CATEGORY_UPPER_CODE).HasComment("상위 카테고리");

                entity.Property(e => e.CATEGORY_USED)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GREETING_CATEGORY_NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("카테고리명");

                entity.Property(e => e.LAST_UPDATE).HasColumnType("datetime");

                entity.Property(e => e.REGIST_DATE).HasColumnType("datetime");
            });

            modelBuilder.Entity<Greeting_barshop>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Greeting_barshop");

                entity.HasComment("인사말");

                entity.Property(e => e.DISPLAY_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GREETING_CONTENT)
                    .IsRequired()
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.GREETING_NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LAST_UPDATE).HasColumnType("smalldatetime");

                entity.Property(e => e.RECOMEND_YES_OR_NO)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.REGIST_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.USE_IMAGE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<HANJIN_ZIPCODE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HANJIN_ZIPCODE");

                entity.HasComment("한진택배 우편번호");

                entity.Property(e => e.ZIPCODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HardCodingList>(entity =>
            {
                entity.HasKey(e => new { e.HardID, e.HardCode })
                    .HasName("PK__HardCodi__64A1E7794ADB5373");

                entity.ToTable("HardCodingList");

                entity.Property(e => e.HardID).HasMaxLength(20);

                entity.Property(e => e.HardCode).HasMaxLength(30);

                entity.Property(e => e.DummyField).HasMaxLength(50);

                entity.Property(e => e.DummyNum).HasColumnType("numeric(28, 8)");

                entity.Property(e => e.HardDescr).HasMaxLength(100);

                entity.Property(e => e.HardUse)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MultiUse)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<HeadCol_TEMP>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HeadCol_TEMP");

                entity.Property(e => e.BHands)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CardBrand)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CardDiscount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CardSet_Price).HasColumnType("numeric(28, 8)");

                entity.Property(e => e.Card_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Card_Price).HasColumnType("numeric(28, 8)");

                entity.Property(e => e.TheCard)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ILOOM_DAILY_INFO>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__ILOOM_DA__DDDFBCBED6113754");

                entity.ToTable("ILOOM_DAILY_INFO");

                entity.Property(e => e.Birth_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ConnInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.barun_reg_Date).HasColumnType("datetime");

                entity.Property(e => e.barun_reg_site)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.create_date).HasColumnType("datetime");

                entity.Property(e => e.hand_phone)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.phone)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_day)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.zipcode)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<INTEGRATION_ADMIN_MENU>(entity =>
            {
                entity.HasKey(e => e.MENU_SEQ);

                entity.ToTable("INTEGRATION_ADMIN_MENU");

                entity.HasComment("관리자 메뉴 관리");

                entity.Property(e => e.MENU_SEQ)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FOLDER_YORN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FONT_AWESOME).HasMaxLength(50);

                entity.Property(e => e.LINK)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.MENU_TITLE)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PMENU_SEQ)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PUBLIC_YORN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");
            });

            modelBuilder.Entity<INTEGRATION_ADMIN_MENU_AUTH>(entity =>
            {
                entity.HasKey(e => e.MENU_AUTH_SEQ);

                entity.ToTable("INTEGRATION_ADMIN_MENU_AUTH");

                entity.Property(e => e.MENU_SEQ)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<INTEGRATION_MEMBER_SIGN_UP_LOG>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("INTEGRATION_MEMBER_SIGN_UP_LOG");

                entity.HasComment("통합아이디 회원가입 액션 로그");

                entity.HasIndex(e => e.INTEGRATION_USER_ID, "NCI_INTEGRATION_MEMBER_SIGN_UP_LOG_INTEGRATION_USER_ID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.REFERER_SITE, "NCI_INTEGRATION_MEMBER_SIGN_UP_LOG_REFERER_SITE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.USER_ID, "NCI_INTEGRATION_MEMBER_SIGN_UP_LOG_USER_ID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.INTEGRATION_USER_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("통합아이디");

                entity.Property(e => e.REFERER_SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.REFERER_SITE)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("접근 사이트");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SELECT_ID)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("선택 ID");

                entity.Property(e => e.SELECT_SITE)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("선택 사이트");

                entity.Property(e => e.USER_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.USER_TABLE_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JEHU_MARKETING_DAILY_INFO>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("JEHU_MARKETING_DAILY_INFO");

                entity.Property(e => e.BDAY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Birth)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ConnInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Hphone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ZIP)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.insert_date).HasColumnType("smalldatetime");

                entity.Property(e => e.ip)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.muid)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.phone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.reg_time)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.regdate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.site)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_day)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_month)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_year)
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LMS_SEND_TARGET_GROUP>(entity =>
            {
                entity.HasKey(e => e.GROUP_SEQ);

                entity.ToTable("LMS_SEND_TARGET_GROUP");

                entity.Property(e => e.MSG)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.RESERVATION_DATE).HasColumnType("datetime");

                entity.Property(e => e.RQEUST_ADMIN_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SUBJECT)
                    .HasMaxLength(120)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LMS_SEND_TARGET_USER>(entity =>
            {
                entity.HasKey(e => e.SEQ)
                    .HasName("PK_barunsoncard_temp_table_2");

                entity.ToTable("LMS_SEND_TARGET_USER");

                entity.HasIndex(e => e.GROUP_SEQ, "NCI_")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UID, "NCI_UID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BIRTH_DATE_VALUE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.HPHONE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MK_EVENT_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SIGN_IN_DATE).HasColumnType("datetime");

                entity.Property(e => e.SITE_DIV)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SITE_NAME).HasMaxLength(100);

                entity.Property(e => e.SMS_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UID)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UNAME)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WEDDING_DAY_VALUE)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LOGO_CATEGORY>(entity =>
            {
                entity.HasKey(e => e.lcategory);

                entity.ToTable("LOGO_CATEGORY");

                entity.Property(e => e.lcategory)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.categoryName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<LOG_AGENT_CHECK>(entity =>
            {
                entity.HasKey(e => e.LOG_SEQ);

                entity.ToTable("LOG_AGENT_CHECK");

                entity.Property(e => e.LOG_AGENT).HasMaxLength(400);

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.SALES_GUBUN).HasMaxLength(10);

                entity.Property(e => e.UID).HasMaxLength(400);
            });

            modelBuilder.Entity<LOG_MST>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("LOG_MST");

                entity.HasComment("로그파일");

                entity.Property(e => e.GUID)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.LOCATION)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LOG_TYPE_NAME)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MSG).HasMaxLength(4000);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SITE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SUB_LOCATION)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.USER_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Logo_TBL>(entity =>
            {
                entity.ToTable("Logo_TBL");

                entity.Property(e => e.id).ValueGeneratedNever();

                entity.Property(e => e.LogoName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.filename)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.lcategory)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.lcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.src_filename)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MAIN_POPUP_IMAGE>(entity =>
            {
                entity.HasKey(e => new { e.MST_SEQ, e.COMPANY_SEQ })
                    .HasName("PK__MAIN_POP__71ACEAFCAC30EE53");

                entity.ToTable("MAIN_POPUP_IMAGE");

                entity.Property(e => e.DISPLAY_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.M_IMAGE)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.M_IMAGE_URL)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PC_IMAGE)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PC_IMAGE_URL)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MAIN_POPUP_MST>(entity =>
            {
                entity.HasKey(e => e.SEQ)
                    .HasName("PK__MAIN_POP__CA1938C070F69398");

                entity.ToTable("MAIN_POPUP_MST");

                entity.Property(e => e.CREATED_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.END_DATE).HasColumnType("datetime");

                entity.Property(e => e.START_DATE).HasColumnType("datetime");

                entity.Property(e => e.TITLE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MARKET_PRICE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MARKET_PRICE");

                entity.Property(e => e.AA)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MCARD_IMAGE_DELETE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MCARD_IMAGE_DELETE");

                entity.Property(e => e.DELETE_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("이미지삭제일자");

                entity.Property(e => e.INVITATIONID).HasComment("삭제ID(F)-MCARD_INVITATION.INVITATIONID");
            });

            modelBuilder.Entity<MCARD_INVITATION_FLOW>(entity =>
            {
                entity.HasKey(e => new { e.PCM, e.UID });

                entity.ToTable("MCARD_INVITATION_FLOW");

                entity.HasComment("모바일초대장 진행 관리");

                entity.Property(e => e.PCM)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("유입경로 : PC / MOBILE");

                entity.Property(e => e.UID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("고객ID");

                entity.Property(e => e.CREATE_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");

                entity.Property(e => e.MEM_GB)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("회원여부(Y:회원 , N:비회원)");

                entity.Property(e => e.STEP0).HasComment("약관동의");

                entity.Property(e => e.STEP1).HasComment("스킨선택");

                entity.Property(e => e.STEP2).HasComment("정보입력");

                entity.Property(e => e.STEP3).HasComment("갤러리관리");

                entity.Property(e => e.STEP4).HasComment("제작완료");

                entity.Property(e => e.UPDATE_DATE)
                    .HasColumnType("datetime")
                    .HasComment("수정일");
            });

            modelBuilder.Entity<MCARD_INVITATION_FOR_OTHER_SITE>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("MCARD_INVITATION_FOR_OTHER_SITE");

                entity.Property(e => e.AVAILABLE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.HPHONE)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.InvitationCode)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.ORIGINAL_SITE_ORDER_CODE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SITE_CODE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.USER_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.USER_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MD_GIFT_EVENT_CHANEL>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MD_GIFT_EVENT_CHANEL");

                entity.HasComment("샤넬 이벤트");

                entity.Property(e => e.REMAIN_CNT).HasComment("잔여수");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.card_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MEMPLUS_DAILY_INFO>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__MEMPLUS___DDDFBCBE10E1C646");

                entity.ToTable("MEMPLUS_DAILY_INFO");

                entity.Property(e => e.file_dt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.regdate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.type_code1)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.type_code2)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.type_code3)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.type_code4)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.type_code5)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.type_code6)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MEMPLUS_DAILY_INFO_CANCEL>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MEMPLUS_DAILY_INFO_CANCEL");

                entity.Property(e => e.cancel_dt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.file_dt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.hphone)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MMS_LOG>(entity =>
            {
                entity.HasKey(e => e.MSGKEY);

                entity.ToTable("MMS_LOG", "invtmng");

                entity.HasIndex(e => e.REQDATE, "MMS_LOG_IDX2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PHONE, "MMS_LOG_IDX3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MSGKEY).ValueGeneratedNever();

                entity.Property(e => e.CALLBACK)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ETC1)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ETC2)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ETC3)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.EXPIRETIME)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('43200')");

                entity.Property(e => e.FILE_PATH1)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.FILE_PATH2)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.FILE_PATH3)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.FILE_PATH4)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.FILE_PATH5)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MSG)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.PHONE)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.POST)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.REPORTDATE).HasColumnType("datetime");

                entity.Property(e => e.REQDATE).HasColumnType("datetime");

                entity.Property(e => e.RSLT)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.RSLTDATE).HasColumnType("datetime");

                entity.Property(e => e.SENTDATE).HasColumnType("datetime");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.SUBJECT)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.TELCOINFO)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TERMINATEDDATE).HasColumnType("datetime");

                entity.Property(e => e.TYPE)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");
            });

            modelBuilder.Entity<MMS_MSG>(entity =>
            {
                entity.HasKey(e => e.MSGKEY);

                entity.ToTable("MMS_MSG", "invtmng");

                entity.HasIndex(e => e.REQDATE, "MMS_MSG_IDX2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PHONE, "MMS_MSG_IDX3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.STATUS, "MMS_MSG_IDX4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CALLBACK)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ETC1)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ETC2)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ETC3)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.EXPIRETIME)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('43200')");

                entity.Property(e => e.FILE_PATH1)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.FILE_PATH2)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.FILE_PATH3)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.FILE_PATH4)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.FILE_PATH5)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MSG)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.PHONE)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.POST)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.REPORTDATE).HasColumnType("datetime");

                entity.Property(e => e.REQDATE).HasColumnType("datetime");

                entity.Property(e => e.RSLT)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.RSLTDATE).HasColumnType("datetime");

                entity.Property(e => e.SENTDATE).HasColumnType("datetime");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.SUBJECT)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.TELCOINFO)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TERMINATEDDATE).HasColumnType("datetime");

                entity.Property(e => e.TYPE)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");
            });

            modelBuilder.Entity<MMS_TARGET_CUSTOMER>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("MMS_TARGET_CUSTOMER");

                entity.Property(e => e.HPHONE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MSG)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SUBJECT)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MO_MAP>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MO_MAP", "invtmng");

                entity.HasIndex(e => e.MO_NUMBER, "MO_MAP_IDX1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ALARM_DAY_RECEIVERS)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ALARM_DAY_SENDER)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ALARM_DAY_TIME)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('09:00~18:00')");

                entity.Property(e => e.ALARM_MSG)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.ALARM_NIGHT_RECEIVERS)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ALARM_NIGHT_SENDER)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ALARM_NIGHT_TIME)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('18:00~09:00')");

                entity.Property(e => e.ALARM_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.AUTO_REPLY_MSG)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.AUTO_REPLY_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.MO_NUMBER)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MO_TRAN>(entity =>
            {
                entity.HasKey(e => e.MO_NUM);

                entity.ToTable("MO_TRAN", "invtmng");

                entity.HasIndex(e => e.MO_ACCEPTTIME, "MO_TRAN_IDX1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MO_SENDER, "MO_TRAN_IDX2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MO_STATUS, "MO_TRAN_IDX3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MO_SN, "MO_TRAN_IDX4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IMAGE1)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.IMAGE2)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.IMAGE3)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.MO_ACCEPTTIME)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.MO_MODIFIED)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.MO_MSG)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MO_NET)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MO_NUMBER)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MO_REPLY_DATE)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.MO_REPLY_MSG)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MO_SENDER)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MO_STATUS)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.act_date).HasColumnType("datetime");

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MYOMEE_DAILY_INFO>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__MYOMEE_D__DDDFBCBE0BBB8812");

                entity.ToTable("MYOMEE_DAILY_INFO");

                entity.HasComment("광고-롯데렌탈(묘미) 데이터");

                entity.Property(e => e.Birth_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ConnInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.barun_reg_Date).HasColumnType("datetime");

                entity.Property(e => e.create_date).HasColumnType("datetime");

                entity.Property(e => e.hand_phone)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.phone)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_pgubun)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_day)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.zipcode)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mcard_MoneyGift>(entity =>
            {
                entity.HasKey(e => e.InvitationID);

                entity.ToTable("Mcard_MoneyGift");

                entity.HasComment("모바일초대장-Toss축의금사용정보");

                entity.Property(e => e.InvitationID).ValueGeneratedNever();

                entity.Property(e => e.Birde_Account)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("신부계좌번호");

                entity.Property(e => e.Birde_BankCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("신부은행코드");

                entity.Property(e => e.Birde_URL)
                    .IsUnicode(false)
                    .HasComment("송금서비스이용 등록 API 응답-신부송금페이지링크");

                entity.Property(e => e.Created_Tmstmp)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DisableYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .HasComment("신랑신부 계좌번호변경시 사용함");

                entity.Property(e => e.DisableY_Tmstmp).HasColumnType("datetime");

                entity.Property(e => e.Groom_Account)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("신랑계좌번호");

                entity.Property(e => e.Groom_BankCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("신랑은행코드");

                entity.Property(e => e.Groom_URL)
                    .IsUnicode(false)
                    .HasComment("송금서비스이용 등록 API 응답-신랑송금페이지링크");

                entity.Property(e => e.InvitationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("초대장주문번호");

                entity.Property(e => e.Return_AccountBirdeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("신부예금주명");

                entity.Property(e => e.Return_AccountGroomName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("신랑예금주명");

                entity.Property(e => e.Return_Birde_AccountCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("계좌유효성체크 신부 응답코드");

                entity.Property(e => e.Return_Birde_AccountMessage)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("계좌유효성체크 신부 응답메시지");

                entity.Property(e => e.Return_Code)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("송금 서비스 이용 등록 API 응답코드");

                entity.Property(e => e.Return_CoupleKey)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("추후 등록된 계좌 정보를 disable 처리할 경우에 필요한 값");

                entity.Property(e => e.Return_Disable_Code)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("계좌 정보 disable 처리 응답코드");

                entity.Property(e => e.Return_Disable_Message).IsUnicode(false);

                entity.Property(e => e.Return_Groom_AccountCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("계좌유효성체크 신랑 응답코드");

                entity.Property(e => e.Return_Groom_AccountMessage)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("계좌유효성체크 신랑응답메시지");

                entity.Property(e => e.Return_Message)
                    .IsUnicode(false)
                    .HasComment("송금 서비스 이용 등록 API 응답메시지");

                entity.Property(e => e.Return_Updated_Tmstmp)
                    .HasColumnType("datetime")
                    .HasComment("응답코드받은시간");

                entity.Property(e => e.UPDATED_Tmstmp).HasColumnType("datetime");

                entity.Property(e => e.Wedding_Date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("예식일");
            });

            modelBuilder.Entity<NAVER_MAINADD_MOBILE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NAVER_MAINADD_MOBILE");

                entity.Property(e => e.GUID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SALES_GUBUN)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.regdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<OB_CATALOGUE>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("OB_CATALOGUE");

                entity.Property(e => e.FILE_NAME).HasMaxLength(200);

                entity.Property(e => e.FILE_URL).HasMaxLength(1000);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<OB_MD_ITEM>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("OB_MD_ITEM");
            });

            modelBuilder.Entity<OB_NOTICE_T>(entity =>
            {
                entity.HasKey(e => e.Nid);

                entity.ToTable("OB_NOTICE_T", "invtmng");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.FILE_NAME).HasMaxLength(4000);

                entity.Property(e => e.FILE_SIZE).HasMaxLength(4000);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.Uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('관리자')");

                entity.Property(e => e.gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<OB_REF_CODE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OB_REF_CODE");

                entity.Property(e => e.Code_No).ValueGeneratedOnAdd();

                entity.Property(e => e.Disp_Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Field_Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Field_Value)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ORDER_DETAIL_CHANGE>(entity =>
            {
                entity.HasKey(e => new { e.ORDER_SEQ, e.CARD_SEQ });

                entity.ToTable("ORDER_DETAIL_CHANGE");

                entity.Property(e => e.CHANGE_DATE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CHANGE_NOTE)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OUTLET_CARD>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTLET_CARD");

                entity.Property(e => e.ADMIN_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.B2B_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BEST_STR)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BEST_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_CATE)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_CODE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_DESCRIPTION)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_ENVELOPE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B10)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B9)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_D)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_MS)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_S)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_XS)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_OSI)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_PAPER)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_SIZE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DISPLAY_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DISRATE_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ERP_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Env_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ISHAVE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ISInPaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is100)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1001)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1002)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1003)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1004)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1005)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1006)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1007)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1008)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1009)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is200)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is300)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is400)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsFlower)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsGold)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsHandMade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsHeart)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOffBest)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOffDDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOffDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsSample)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsWonang)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsYu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LAST_UPDATE).HasColumnType("datetime");

                entity.Property(e => e.NEW_YES_OR_NO)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ONLINE_YES_OR_NO)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RECOMEND_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.REGIST_DATE).HasColumnType("datetime");

                entity.Property(e => e.acc_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.cont_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.cont_code_o)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.env_code_o)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OUTLET_ORDER>(entity =>
            {
                entity.HasKey(e => e.ORDER_SEQ)
                    .HasName("PK__OUTLET_ORDER__3B95D2F1");

                entity.ToTable("OUTLET_ORDER");

                entity.Property(e => e.ORDER_SEQ).ValueGeneratedNever();

                entity.Property(e => e.ADMIN_ID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ADMIN_MEMO)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BANK_RECEIPTER)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BANK_VACCOUNT_NUM)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BUYER_ADDRESS)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BUYER_COMMENT)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BUYER_EMAIL)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BUYER_HPHONE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BUYER_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BUYER_PHONE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BUYER_ZIP)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CANCEL_DATE).HasColumnType("datetime");

                entity.Property(e => e.CANCEL_REASON)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_AUTH_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.COUPONSEQ)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DELETE_ADMIN_ID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DELETE_DATE).HasColumnType("datetime");

                entity.Property(e => e.DELIVERY_CODE_NUM)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DELIVERY_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.DELIVERY_MEMO)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DELIVERY_METHOD)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.FEE_PRICE).HasDefaultValueSql("(0)");

                entity.Property(e => e.ISDACOM)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.ORDER_DATE)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ORDER_MDISCOUNT_RATE).HasDefaultValueSql("(0)");

                entity.Property(e => e.ORDER_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('O')")
                    .IsFixedLength(true);

                entity.Property(e => e.ORDER_UID)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PAY_DATE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PG_AUTH_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PG_RESULT_CODE)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.PG_RESULT_MSG)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.POST_PRICE).HasDefaultValueSql("(0)");

                entity.Property(e => e.PREPARE_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.PROCLEVEL).HasDefaultValueSql("(1)");

                entity.Property(e => e.RECV_ADDRESS)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RECV_EMAIL)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RECV_HPHONE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RECV_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RECV_PHONE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RECV_ZIP)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.REDUCE_PRICE).HasDefaultValueSql("(0)");

                entity.Property(e => e.SALES_GUBUN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.SETTLE_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.SETTLE_METHOD)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SETTLE_MOBILID)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SETTLE_PRICE).HasDefaultValueSql("(0)");

                entity.Property(e => e.SRC_COMPOSE_ADMIN_ID)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.SRC_COMPOSE_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.SRC_CONFIRM_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.SRC_ERP_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.SRC_PRINTW_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.SRC_PRINT_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.TID)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.option_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.pg_MertId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_caldate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_fee).HasDefaultValueSql("(0)");

                entity.Property(e => e.pg_paydate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_recaldate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_repaydate)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OUTSOURCING_ORDER_MST>(entity =>
            {
                entity.HasKey(e => e.OUTSOURCING_ORDER_SEQ);

                entity.ToTable("OUTSOURCING_ORDER_MST");

                entity.Property(e => e.BOTH_SIDE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_CODE).HasMaxLength(100);

                entity.Property(e => e.COMPANY_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CUTOUT_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DELIVERY_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DEV_FLAG)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EDGE_COLOR).HasMaxLength(30);

                entity.Property(e => e.EDGE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ERP_PART_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.EXPECT_DATE).HasColumnType("datetime");

                entity.Property(e => e.FOIL_TYPE_NAME).HasMaxLength(50);

                entity.Property(e => e.GLOSSY_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IMAGE_FILE_URL)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LASER_CUT_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MEMO).HasMaxLength(1000);

                entity.Property(e => e.MEMO_EX)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_NAME).HasMaxLength(100);

                entity.Property(e => e.ORDER_STATUS_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_SUB_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.OSI_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PAGES_PER_SHEET_VALUE).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PAPER_SIZE).HasMaxLength(200);

                entity.Property(e => e.PAPER_TYPE_NAME).HasMaxLength(200);

                entity.Property(e => e.PRESS_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PRINT_CHASU)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PRINT_FILE_URL)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PRINT_LOSS_VALUE).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.RECEIPT_DATE).HasColumnType("datetime");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.REQUESTOR_NAME).HasMaxLength(100);

                entity.Property(e => e.SITE_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OUTSOURCING_ORDER_MST_BACK_DATum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTSOURCING_ORDER_MST_BACK_DATA");

                entity.Property(e => e.BOTH_SIDE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_CODE).HasMaxLength(100);

                entity.Property(e => e.COMPANY_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CUTOUT_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DELIVERY_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.EDGE_COLOR).HasMaxLength(30);

                entity.Property(e => e.EDGE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ERP_PART_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.EXPECT_DATE).HasColumnType("datetime");

                entity.Property(e => e.FOIL_TYPE_NAME).HasMaxLength(50);

                entity.Property(e => e.GLOSSY_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IMAGE_FILE_URL)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LASER_CUT_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MEMO).HasMaxLength(1000);

                entity.Property(e => e.ORDER_NAME).HasMaxLength(100);

                entity.Property(e => e.ORDER_STATUS_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_SUB_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.OSI_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OUTSOURCING_ORDER_SEQ).ValueGeneratedOnAdd();

                entity.Property(e => e.PAGES_PER_SHEET_VALUE).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PAPER_SIZE).HasMaxLength(200);

                entity.Property(e => e.PAPER_TYPE_NAME).HasMaxLength(200);

                entity.Property(e => e.PRESS_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PRINT_CHASU)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PRINT_FILE_URL)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PRINT_LOSS_VALUE).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.RECEIPT_DATE).HasColumnType("datetime");

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.REQUESTOR_NAME).HasMaxLength(100);

                entity.Property(e => e.SITE_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_ADMIN_MENT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PHOTOBOOK_ADMIN_MENT");

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.ment)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PHOTOBOOK_BASKET>(entity =>
            {
                entity.ToTable("PHOTOBOOK_BASKET");

                entity.HasIndex(e => e.member_id, "nind_member_id")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.disrate_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.item_count).HasDefaultValueSql("(1)");

                entity.Property(e => e.member_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.prod_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.prod_order_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.prod_page).HasDefaultValueSql("(40)");

                entity.Property(e => e.prod_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.seq).HasDefaultValueSql("(1)");

                entity.Property(e => e.site_code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.user_title)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_BOARD_RE>(entity =>
            {
                entity.ToTable("PHOTOBOOK_BOARD_RE");

                entity.Property(e => e.board_id).HasDefaultValueSql("(1)");

                entity.Property(e => e.contents)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.member_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.member_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PHOTOBOOK_COMMENT>(entity =>
            {
                entity.ToTable("PHOTOBOOK_COMMENT");

                entity.Property(e => e.best_reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.comm_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.isBest)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.prod_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.product_order_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.score)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('3')")
                    .IsFixedLength(true);

                entity.Property(e => e.site_code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.up_file)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.writer_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_COUPON>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("PHOTOBOOK_COUPON");

                entity.HasIndex(e => e.coupon_code, "nind_coupon_code")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Isthrowaway)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true)
                    .HasComment("일회용쿠폰");

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('admin')");

                entity.Property(e => e.coupon_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.coupon_msg)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.disrate_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('R')")
                    .IsFixedLength(true);

                entity.Property(e => e.end_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.min_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.prod_cate2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.rdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.site_code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.site_msg)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.start_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.use_yn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PHOTOBOOK_EVENT_BLOG>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("PHOTOBOOK_EVENT_BLOG");

                entity.Property(e => e.contents).HasColumnType("text");

                entity.Property(e => e.isbest)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.iscoupon)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("0:확인중, 1:지급완료, 2:지급불가");

                entity.Property(e => e.isview)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.link_url)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.member_id)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.title)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.writer)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_EVENT_COUPON>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_PHOTOBOOK_EVENT_COUPON__seq");

                entity.ToTable("PHOTOBOOK_EVENT_COUPON");

                entity.Property(e => e.coupon_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.send_yn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PHOTOBOOK_EVENT_PHOTOCLIP>(entity =>
            {
                entity.HasKey(e => e.clip_seq)
                    .HasName("PK_CIDX_PHOTOBOOK_EVENT_PHOTOCLIP__clip_seq");

                entity.ToTable("PHOTOBOOK_EVENT_PHOTOCLIP");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.member_id)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.up_image)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_EVENT_PHOTOCLIP_REPLY>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_PHOTOBOOK_EVENT_PHOTOCLIP_REPLY__seq");

                entity.ToTable("PHOTOBOOK_EVENT_PHOTOCLIP_REPLY");

                entity.Property(e => e.member_id)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reply)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_EVENT_REMIND>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("PHOTOBOOK_EVENT_REMIND");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.isview)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.prod_image)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.writer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_EVENT_REPLY>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_PHOTOBOOK_EVENT_REPLY__seq");

                entity.ToTable("PHOTOBOOK_EVENT_REPLY");

                entity.Property(e => e.event_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reply)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_FAQ>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PHOTOBOOK_FAQ");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.isBest)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.mdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.seq).ValueGeneratedOnAdd();

                entity.Property(e => e.site_code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_MEMBER>(entity =>
            {
                entity.HasKey(e => e.uid);

                entity.ToTable("PHOTOBOOK_MEMBER");

                entity.Property(e => e.uid)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addressCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.birth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.chk_ad)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_event)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mailservice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.coupon_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.isAutoClass)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true);

                entity.Property(e => e.isLunar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.job)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.login_date).HasColumnType("datetime");

                entity.Property(e => e.login_date_latest).HasColumnType("datetime");

                entity.Property(e => e.mail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.member_class)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phoneCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pw)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.rdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ustatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true);

                entity.Property(e => e.zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PHOTOBOOK_MEMBER_OUT>(entity =>
            {
                entity.HasKey(e => e.uid);

                entity.ToTable("PHOTOBOOK_MEMBER_OUT");

                entity.Property(e => e.uid)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ans1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.ans2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.ans3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.ans4)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.ans5)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.ans6)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.ans7)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.ans_detail)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PHOTOBOOK_MEMBER_tmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PHOTOBOOK_MEMBER_tmp");

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addressCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.birth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.chk_mailservice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.mail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phoneCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pw)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.rdate).HasColumnType("smalldatetime");

                entity.Property(e => e.sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PHOTOBOOK_MYCOUPON>(entity =>
            {
                entity.HasKey(e => new { e.uid, e.coupon_code });

                entity.ToTable("PHOTOBOOK_MYCOUPON");

                entity.Property(e => e.uid)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.coupon_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PHOTOBOOK_OPEN>(entity =>
            {
                entity.ToTable("PHOTOBOOK_OPEN");

                entity.Property(e => e.best_reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.comment)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.isBest)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isOpen)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.member_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.prod_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.product_order_id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.site_code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.title)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_ORDER>(entity =>
            {
                entity.ToTable("PHOTOBOOK_ORDER");

                entity.Property(e => e.id).ValueGeneratedNever();

                entity.Property(e => e.admin_memo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.balju_date).HasColumnType("smalldatetime");

                entity.Property(e => e.cancel_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.card_installmonth)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("할부개월수");

                entity.Property(e => e.card_nointyn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("무이자할부여부");

                entity.Property(e => e.coupon_code)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.coupon_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.dacom_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.delivery_code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.delivery_com)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('HJ')");

                entity.Property(e => e.delivery_date).HasColumnType("smalldatetime");

                entity.Property(e => e.delivery_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.discount_rate).HasDefaultValueSql("(0)");

                entity.Property(e => e.discount_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.employer_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.entering_date).HasColumnType("smalldatetime");

                entity.Property(e => e.ip)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isBalju)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isOpen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isReceipt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isSystemUpdate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.merge_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.order_email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.order_time)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.packing_date).HasColumnType("smalldatetime");

                entity.Property(e => e.pay_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true)
                    .HasComment("1:정상,4:사고건");

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pg_resultinfo2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pg_shopid)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.point_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.recv_addr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.recv_addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.recv_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.recv_msg)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.recv_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.recv_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.recv_zip)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reduce_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.request_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.settle_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.site_code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.src_erp_date).HasColumnType("smalldatetime");

                entity.Property(e => e.status_seq).HasDefaultValueSql("(0)");

                entity.Property(e => e.total_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.worder_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PHOTOBOOK_ORDER_DETAIL>(entity =>
            {
                entity.ToTable("PHOTOBOOK_ORDER_DETAIL");

                entity.HasIndex(e => e.order_id, "IDX_PHOTOBOOK_ORDER_DETAIL_OID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.product_order_id, "IDX_PHOTOBOOK_ORDER_DETAIL_POID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.delivery_code)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.express_id)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.iscomment)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isopen)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isput)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.item_option)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.p_delivery_date)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.p_packing_date)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.print_date)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.process_state)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.prod_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.prod_page).HasDefaultValueSql("(40)");

                entity.Property(e => e.product_order_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.product_state)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.seq).HasDefaultValueSql("(1)");

                entity.Property(e => e.thumbnail_url)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.user_title)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_POINT>(entity =>
            {
                entity.ToTable("PHOTOBOOK_POINT");

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.comment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.member_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PHOTOBOOK_PROD>(entity =>
            {
                entity.ToTable("PHOTOBOOK_PROD");

                entity.Property(e => e.cate_index).HasDefaultValueSql("(1)");

                entity.Property(e => e.cover_style)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .HasComment("S:소프트커버,H:하드커버");

                entity.Property(e => e.disrate_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.fix_disrate).HasDefaultValueSql("(0)");

                entity.Property(e => e.img_b1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b10)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b9)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_m)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_ms)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_s)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_xs)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isChgCover)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isChgSize)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isDP)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.isEpilog)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.isProlog)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.isSaleBlog)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isSaleGift)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("기프트앨범");

                entity.Property(e => e.isSaleGroup)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("단체앨범 판매여부");

                entity.Property(e => e.isTest)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.makecom_code)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true)
                    .HasComment("1:학술,2:포토아비즈");

                entity.Property(e => e.mod_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.prod_cate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.prod_cate2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.prod_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.prod_description).HasColumnType("text");

                entity.Property(e => e.prod_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.prod_size)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_ranking).HasDefaultValueSql("(9999)");

                entity.Property(e => e.sample_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.site_code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.skin_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_PROD_B2B>(entity =>
            {
                entity.HasKey(e => new { e.site_code, e.prod_code });

                entity.ToTable("PHOTOBOOK_PROD_B2B");

                entity.Property(e => e.site_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.prod_code)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.prod_option)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PHOTOBOOK_PROD_DETAIL>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PHOTOBOOK_PROD_DETAIL", "invtmng");

                entity.Property(e => e.img_b1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b10)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img_b9)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isDP)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.prod_description).HasColumnType("text");

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.site_code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PHOTOBOOK_PROD_ERP>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PHOTOBOOK_PROD_ERP", "invtmng");

                entity.Property(e => e.erp_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.prod_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.prod_page).HasDefaultValueSql("(42)");
            });

            modelBuilder.Entity<PHOTOBOOK_PROD_OPTION>(entity =>
            {
                entity.HasKey(e => new { e.prod_id, e.prod_option });

                entity.ToTable("PHOTOBOOK_PROD_OPTION");

                entity.Property(e => e.mc_prod_img)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mc_prod_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.pn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.tmp1)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_SKIN>(entity =>
            {
                entity.ToTable("PHOTOBOOK_SKIN");

                entity.Property(e => e.description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.img1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.img3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.prod_cate)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.prod_size)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.skin_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.skin_fn)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_TROUBLE>(entity =>
            {
                entity.HasKey(e => e.order_id);

                entity.ToTable("PHOTOBOOK_TROUBLE");

                entity.Property(e => e.order_id).ValueGeneratedNever();

                entity.Property(e => e.admin_id)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.trouble_msg)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.trouble_type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.upfile)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PHOTOBOOK_ZZIM>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("PHOTOBOOK_ZZIM");

                entity.Property(e => e.prod_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POLLCONTENT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("POLLCONTENT");

                entity.Property(e => e.content).HasColumnType("text");

                entity.Property(e => e.ip)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.wdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<POLLCOUNT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("POLLCOUNT");

                entity.Property(e => e.id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ip)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<PREVIEW>(entity =>
            {
                entity.HasKey(e => e.preview_seq)
                    .HasName("PK_preView");

                entity.ToTable("PREVIEW");

                entity.HasIndex(e => e.order_Seq, "nind_order_Seq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.preview_seq).ValueGeneratedNever();

                entity.Property(e => e.CE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength(true);

                entity.Property(e => e.Mdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Rdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.confirm_date).HasColumnType("smalldatetime");

                entity.Property(e => e.content)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.imgFolder)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.imgHeight).HasDefaultValueSql("(0)");

                entity.Property(e => e.imgName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.imgRatio).HasDefaultValueSql("(0)");

                entity.Property(e => e.imgWidth).HasDefaultValueSql("(0)");

                entity.Property(e => e.preview_type)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('C')")
                    .HasComment("C:카드,E:봉투,M:미니청첩장");

                entity.Property(e => e.print_date).HasColumnType("smalldatetime");

                entity.Property(e => e.step).HasDefaultValueSql("(0)");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PREVIEW_NOTICE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PREVIEW_NOTICE");

                entity.HasComment("초안관련 고객에게 전달사항");

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.contents)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PREVIEW_OPINION>(entity =>
            {
                entity.HasKey(e => e.BBS_SEQ)
                    .HasName("PK_PREVIEW_OPINION_");

                entity.ToTable("PREVIEW_OPINION");

                entity.HasComment("초안 수정요청 내용");

                entity.HasIndex(e => e.ORDER_SEQ, "nind_corder_seq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CONTENT).HasMaxLength(4000);

                entity.Property(e => e.DEPTH).HasDefaultValueSql("((0))");

                entity.Property(e => e.EMAIL)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.FILE_PATH)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.NOTIFY_EMAIL_YESORNO)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ORDER_TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.REPLY).HasMaxLength(4000);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.TITLE)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.WRITER)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.WRITER_IP)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PRE_CARD_INFO>(entity =>
            {
                entity.HasKey(e => e.PRE_CARD_SEQ)
                    .HasName("PK__PRE_CARD_INFO__3A4CA8FD");

                entity.ToTable("PRE_CARD_INFO");

                entity.Property(e => e.PRE_CARD_SEQ).ValueGeneratedNever();

                entity.Property(e => e.PRE_CARD_FNAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRE_CARD_INDATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PRE_CARD_NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRE_CARD_SIMG)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PRIVATE_CHOICE>(entity =>
            {
                entity.HasKey(e => new { e.SALES_GUBUN, e.ORDER_TYPE, e.CARD_SEQ, e.MEMBER_ID });

                entity.ToTable("PRIVATE_CHOICE");

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.ORDER_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('O')")
                    .IsFixedLength(true);

                entity.Property(e => e.MEMBER_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.REGDATE)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PrintChasuGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PrintChasuGroup");

                entity.Property(e => e.GroupCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GroupDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GroupRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.GroupType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RegDT).HasColumnType("smalldatetime");

                entity.Property(e => e.RegUser)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Seq).ValueGeneratedOnAdd();

                entity.Property(e => e.UseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PrintChasuGroupDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PrintChasuGroupDetail");

                entity.Property(e => e.CardCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GroupCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrintType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Seq).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<RECENT_VIEW_CARD_ITEM>(entity =>
            {
                entity.HasKey(e => e.RECENT_VIEW_CARD_ITEM_SEQ);

                entity.ToTable("RECENT_VIEW_CARD_ITEM");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<RECENT_VIEW_CARD_MST>(entity =>
            {
                entity.HasKey(e => e.RECENT_VIEW_CARD_MST_SEQ);

                entity.ToTable("RECENT_VIEW_CARD_MST");

                entity.Property(e => e.GUID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RESEARCH_AN>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RESEARCH_ANS");

                entity.Property(e => e.ans1_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ans2_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ans3_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ans4_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.isReceive)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_Date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.service_ment)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RESEARCH_CARD>(entity =>
            {
                entity.ToTable("RESEARCH_CARD");

                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<RESEARCH_QLIST>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RESEARCH_QLIST");

                entity.Property(e => e.ans1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ans1_cnt).HasDefaultValueSql("(0)");

                entity.Property(e => e.ans2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ans2_cnt).HasDefaultValueSql("(0)");

                entity.Property(e => e.ans3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ans3_cnt).HasDefaultValueSql("(0)");

                entity.Property(e => e.ans4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ans4_cnt).HasDefaultValueSql("(0)");

                entity.Property(e => e.ans5)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ans5_cnt).HasDefaultValueSql("(0)");

                entity.Property(e => e.ans6)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ans6_cnt).HasDefaultValueSql("(0)");

                entity.Property(e => e.ans7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ans7_cnt)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.ans_cnt).HasDefaultValueSql("(0)");

                entity.Property(e => e.qtitle)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.reg_Date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("0:사용안함,1:사용함");
            });

            modelBuilder.Entity<Roulette_Item>(entity =>
            {
                entity.HasKey(e => e.roti_Idx);

                entity.ToTable("Roulette_Item");

                entity.Property(e => e.roti_company_name).HasMaxLength(50);

                entity.Property(e => e.roti_couponCD)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("쿠폰번호");

                entity.Property(e => e.roti_edate)
                    .HasColumnType("datetime")
                    .HasComment("유효기간종료일");

                entity.Property(e => e.roti_memo).HasMaxLength(1000);

                entity.Property(e => e.roti_regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.roti_sdate)
                    .HasColumnType("datetime")
                    .HasComment("유효기간시작일");

                entity.Property(e => e.roti_title).HasMaxLength(50);

                entity.Property(e => e.roti_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength(true)
                    .HasComment("아이템종류(P:상품, C:쿠폰)");
            });

            modelBuilder.Entity<Roulette_Main>(entity =>
            {
                entity.HasKey(e => e.rot_idx);

                entity.ToTable("Roulette_Main");

                entity.Property(e => e.comment_code)
                    .HasDefaultValueSql("((0))")
                    .HasComment("하단 덧글게시판 코드");

                entity.Property(e => e.ing_ST)
                    .HasMaxLength(10)
                    .IsFixedLength(true)
                    .HasComment("회차중 마지막 참여한 순번");

                entity.Property(e => e.last_ST).HasComment("총 제품종류(8개 아이템이면:8)");

                entity.Property(e => e.rot_Edate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("종료일");

                entity.Property(e => e.rot_ST)
                    .HasDefaultValueSql("((1))")
                    .HasComment("진행중회차");

                entity.Property(e => e.rot_Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("상태");

                entity.Property(e => e.rot_limit_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("참여가능 최소금액 - 0원일때는 체크안함");

                entity.Property(e => e.rot_regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");

                entity.Property(e => e.rot_sDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("시작일");

                entity.Property(e => e.rot_title)
                    .HasMaxLength(50)
                    .HasComment("룰렛이벤트명");
            });

            modelBuilder.Entity<Roulette_Member>(entity =>
            {
                entity.HasKey(e => new { e.rotm_Idx, e.rotm_UID });

                entity.ToTable("Roulette_Member");

                entity.Property(e => e.rotm_Idx).ValueGeneratedOnAdd();

                entity.Property(e => e.rotm_UID)
                    .HasMaxLength(20)
                    .HasComment("참여회원아이디");

                entity.Property(e => e.rotm_ST).HasComment("참여회차");

                entity.Property(e => e.rotm_coupon_code)
                    .HasMaxLength(50)
                    .HasComment("쿠폰적용시 쿠폰입력코드");

                entity.Property(e => e.rotm_order_seq).HasComment("청첩장 주문번호");

                entity.Property(e => e.rotm_phone)
                    .HasMaxLength(50)
                    .HasComment("핸드폰번호");

                entity.Property(e => e.rotm_regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("당첨일");

                entity.Property(e => e.rotm_rot_idx).HasComment("참여룰렛");

                entity.Property(e => e.rotm_rots_Idx).HasComment("당첨아이템");

                entity.Property(e => e.rotm_status).HasComment("상태(0:대기중, 1:완료)");
            });

            modelBuilder.Entity<Roulette_ST>(entity =>
            {
                entity.HasKey(e => new { e.rots_Idx, e.rot_idx });

                entity.ToTable("Roulette_ST");

                entity.Property(e => e.rots_Idx).ValueGeneratedOnAdd();

                entity.Property(e => e.rot_idx).HasComment("참조키");

                entity.Property(e => e.rots_CNT)
                    .HasDefaultValueSql("((0))")
                    .HasComment("수량(소진시킬수량)");

                entity.Property(e => e.rots_OCNT).HasComment("초기등록수량");

                entity.Property(e => e.rots_ST)
                    .HasDefaultValueSql("((0))")
                    .HasComment("회차");

                entity.Property(e => e.rots_ord)
                    .HasDefaultValueSql("((1))")
                    .HasComment("아이템순번");

                entity.Property(e => e.rots_regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");

                entity.Property(e => e.rots_roti_Idx)
                    .HasDefaultValueSql("((0))")
                    .HasComment("아이템코드");

                entity.Property(e => e.rots_status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("상태 0:기본전시");

                entity.Property(e => e.rots_title)
                    .HasMaxLength(50)
                    .HasComment("회차아이템명");
            });

            modelBuilder.Entity<S2_Acc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_Acc");

                entity.Property(e => e.brand)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.comment).HasMaxLength(100);

                entity.Property(e => e.erp_code)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.gubun)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.image)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.item_code)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.size)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_Accgr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_Accgr");

                entity.Property(e => e.default_1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.gr_gubun)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.gr_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.gubun)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.item_code)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_AdminList>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_AdminList__seq");

                entity.ToTable("S2_AdminList");

                entity.HasComment("관리자 아이디");

                entity.Property(e => e.JOB_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.access_flag).HasDefaultValueSql("((0))");

                entity.Property(e => e.admin_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.admin_mail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.admin_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.admin_photo).HasMaxLength(500);

                entity.Property(e => e.admin_pwd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.is_errorMail)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.is_reviewMail)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.is_reviewSMS)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S2_BestTotalRanking>(entity =>
            {
                entity.HasKey(e => new { e.Gubun_date, e.Gubun, e.SubGubun, e.RankNo })
                    .HasName("PK__S2_BestTotalRank__7C694927");

                entity.ToTable("S2_BestTotalRanking");

                entity.HasComment("청첩장 배치 랭킹");

                entity.Property(e => e.Gubun_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Gubun)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubGubun)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RankChangeGubun)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RankChangeNo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S2_CARD_ERP_STOCK>(entity =>
            {
                entity.HasKey(e => e.S2_CARD_ERP_STOCK_SEQ);

                entity.ToTable("S2_CARD_ERP_STOCK");

                entity.Property(e => e.BRAND_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BRAND_NAME_OLD)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_CODE_ERP)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_TYPE_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CLOSING_COST).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ERP_FIRST_REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.MOD_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ORIGIN_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRODUCTION_STATUS_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RELEASE_DATE).HasColumnType("datetime");
            });

            modelBuilder.Entity<S2_CARD_ERP_STOCK_DEARDEER>(entity =>
            {
                entity.HasKey(e => e.S2_CARD_ERP_STOCK_SEQ);

                entity.ToTable("S2_CARD_ERP_STOCK_DEARDEER");

                entity.Property(e => e.BRAND_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BRAND_NAME_OLD)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_CODE_ERP)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_TYPE_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CLOSING_COST).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ERP_FIRST_REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.MOD_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ORIGIN_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRODUCTION_STATUS_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RELEASE_DATE).HasColumnType("datetime");
            });

            modelBuilder.Entity<S2_CARD_FREE_FOOD_TICKET_MST>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("S2_CARD_FREE_FOOD_TICKET_MST");

                entity.HasComment("식권 무료관리");

                entity.Property(e => e.END_DATE).HasColumnType("datetime");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.START_DATE).HasColumnType("datetime");

                entity.Property(e => e.USE_JEHU_YORN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.USE_YORN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S2_CARD_FREE_FOOD_TICKET_MST_TEST>(entity =>
            {
                entity.HasKey(e => e.SEQ)
                    .HasName("PK__S2_CARD___CA1938C079FA4D31");

                entity.ToTable("S2_CARD_FREE_FOOD_TICKET_MST_TEST");

                entity.Property(e => e.END_DATE).HasColumnType("datetime");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.START_DATE).HasColumnType("datetime");

                entity.Property(e => e.USE_JEHU_YORN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.USE_YORN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CARD_FREE_GIFT>(entity =>
            {
                entity.HasKey(e => e.FREE_GIFT_SEQ);

                entity.ToTable("S2_CARD_FREE_GIFT");

                entity.Property(e => e.CARD_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.END_DATE)
                    .HasColumnType("datetime")
                    .HasComment("종료일");

                entity.Property(e => e.FREE_GIFT_DESC)
                    .HasMaxLength(1000)
                    .HasComment("사은품명");

                entity.Property(e => e.ITEM_TYPE)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.LIMIT_CARD_BRAND)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LIMIT_DELIVERY_GU_STR)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("배송지제한(구단위)");

                entity.Property(e => e.LIMIT_DELIVERY_REGION_STR)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("배송지제한");

                entity.Property(e => e.LIMIT_ORDER_COUNT).HasComment("주문수량제한");

                entity.Property(e => e.LIMIT_ORDER_PRICE).HasComment("주문액제한");

                entity.Property(e => e.LIMIT_ORDER_TYPE_STR)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("주문타입제한");

                entity.Property(e => e.QTY).HasComment("잔여수량");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("가입일");

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.START_DATE)
                    .HasColumnType("datetime")
                    .HasComment("시작일");

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("사용여부");

                entity.Property(e => e.item_count).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<S2_CARD_FREE_GIFT_LOG>(entity =>
            {
                entity.HasKey(e => e.LOG_SEQ);

                entity.ToTable("S2_CARD_FREE_GIFT_LOG");

                entity.HasComment("(받은)사은품로그");

                entity.Property(e => e.FREE_GIFT_SEQ).HasComment("S2_CARD_FREE_GIFT.free_gift_seq");

                entity.Property(e => e.ORDER_SEQ).HasComment("");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("회원ID");
            });

            modelBuilder.Entity<S2_CARD_FREE_GIFT_TARGET_CARD>(entity =>
            {
                entity.HasKey(e => e.FREE_GIFT_TARGET_SEQ);

                entity.ToTable("S2_CARD_FREE_GIFT_TARGET_CARD");

                entity.HasComment("사은품 주는 카드관리");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S2_CARD_LIKE>(entity =>
            {
                entity.HasKey(e => e.S2_CARD_LIKE_SEQ);

                entity.ToTable("S2_CARD_LIKE");

                entity.Property(e => e.GUID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CARD_SAMPLE_FREE_GIFT>(entity =>
            {
                entity.HasKey(e => e.FREE_GIFT_SEQ);

                entity.ToTable("S2_CARD_SAMPLE_FREE_GIFT");

                entity.Property(e => e.CARD_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.END_DATE)
                    .HasColumnType("datetime")
                    .HasComment("종료일");

                entity.Property(e => e.FREE_GIFT_DESC).HasMaxLength(1000);

                entity.Property(e => e.ITEM_TYPE)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.LIMIT_DELIVERY_REGION_STR)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("지역제한");

                entity.Property(e => e.LIMIT_ORDER_COUNT).HasComment("수량제한");

                entity.Property(e => e.LIMIT_ORDER_PRICE).HasComment("금액제한");

                entity.Property(e => e.LIMIT_ORDER_TYPE_STR)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("주문타입제한");

                entity.Property(e => e.QTY).HasComment("잔여수량");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("가입일");

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.START_DATE)
                    .HasColumnType("datetime")
                    .HasComment("시작일");

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("사용여부");
            });

            modelBuilder.Entity<S2_Card>(entity =>
            {
                entity.HasKey(e => e.Card_Seq);

                entity.ToTable("S2_Card");

                entity.HasComment("카드정보");

                entity.HasIndex(e => e.Card_Code, "IDX__card_code")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Card_ERPCode, "IDX__card_erpcode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Card_Name, "IDX__card_name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Card_Price, "IDX__card_price")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CardSet_Price, "IDX__cardset_price")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Card_Seq, "IX_S2_Card")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CARD_GROUP)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('I')")
                    .IsFixedLength(true)
                    .HasComment("I:초대장, X:시즌카드");

                entity.Property(e => e.CardBrand)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("B:바른손카드, N:비핸즈,W:위시메이드,S:프페 Z:기타");

                entity.Property(e => e.CardFactory_Price).HasDefaultValueSql("((0))");

                entity.Property(e => e.CardSet_Price).HasComment("제품 셋트가(카드에만 적용)");

                entity.Property(e => e.Card_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Card_Div)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("A01:카드,A02:내지,A03:인사말카드,A04:약도카드 B01:봉투,B02:봉투라이닝 C01:신랑봉투,C02:신부봉투,C03:미니,C04:스티커,C05:사은품,C06:식권셋트");

                entity.Property(e => e.Card_ERPCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("ERP연동코드");

                entity.Property(e => e.Card_HSize).HasComment("제품 세로 사이즈");

                entity.Property(e => e.Card_Image)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("제품썸네일이미지(주문단에 사용)");

                entity.Property(e => e.Card_Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Card_Price).HasComment("단품가격 (추후 추가주문 등 단품 판매 기준가격)");

                entity.Property(e => e.DISPLAY_UPDATE_DATE).HasColumnType("datetime");

                entity.Property(e => e.DISPLAY_UPDATE_UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DISPLAY_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.ERP_EXPECTED_ARRIVAL_DATE)
                    .HasColumnType("datetime")
                    .HasComment("사용안함");

                entity.Property(e => e.ERP_EXPECTED_ARRIVAL_DATE_USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.ERP_MIN_STOCK_QTY).HasDefaultValueSql("((3000))");

                entity.Property(e => e.ERP_MIN_STOCK_QTY_USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.FPRINT_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Old_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.REGIST_DATES)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Video_URL)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.View_Discount_Percent).HasColumnType("numeric(3, 0)");

                entity.Property(e => e.WisaFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("수정자");

                entity.Property(e => e.new_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.t_env_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("봉투코드");

                entity.Property(e => e.t_inpaper_code)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CardCorelTemplateInfo>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("S2_CardCorelTemplateInfo");

                entity.HasComment("ERP카드그룹 관리<br>");

                entity.Property(e => e.CARD_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ERP_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GROUP_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.INSIDE_PRINT_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OUTSIDE_PRINT_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");
            });

            modelBuilder.Entity<S2_CardDesigner>(entity =>
            {
                entity.HasKey(e => e.designer_id)
                    .HasName("PK_CIDX_S2_CardDesigner__designer_id");

                entity.ToTable("S2_CardDesigner");

                entity.HasComment("카드디자이너 정보");

                entity.Property(e => e.designer_id)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.designer_card_code1).HasMaxLength(30);

                entity.Property(e => e.designer_card_code2).HasMaxLength(30);

                entity.Property(e => e.designer_card_code3).HasMaxLength(30);

                entity.Property(e => e.designer_card_code4).HasMaxLength(30);

                entity.Property(e => e.designer_content).HasMaxLength(4000);

                entity.Property(e => e.designer_img).HasMaxLength(100);

                entity.Property(e => e.designer_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.designer_title).HasMaxLength(100);
            });

            modelBuilder.Entity<S2_CardDetail>(entity =>
            {
                entity.HasKey(e => e.Card_Seq);

                entity.ToTable("S2_CardDetail");

                entity.HasComment("카드상세정보");

                entity.HasIndex(e => e.Acc1_GroupSeq, "IDX__acc1_groupseq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Acc1_Seq, "IDX__acc1_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Acc2_GroupSeq, "IDX__acc2_groupseq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Acc2_Seq, "IDX__acc2_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Card_Seq, "IDX__card_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Env_GroupSeq, "IDX__env_groupseq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Env_Seq, "IDX__env_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.GreetingCard_GroupSeq, "IDX__greetingcard_groupseq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.GreetingCard_Seq, "IDX__greetingcard_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Inpaper_GroupSeq, "IDX__inpaper_groupseq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Inpaper_Seq, "IDX__inpaper_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Lining_GroupSeq, "IDX__lining_groupseq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Lining_Seq, "IDX__lining_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MapCard_GroupSeq, "IDX__mapcard_groupseq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MapCard_Seq, "IDX__mapcard_seq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Card_Seq).ValueGeneratedNever();

                entity.Property(e => e.Acc1_GroupSeq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("부속품1 그룹");

                entity.Property(e => e.Acc1_Seq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("부속품1");

                entity.Property(e => e.Acc2_GroupSeq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("부속품2 그룹");

                entity.Property(e => e.Acc2_Seq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("부속품2");

                entity.Property(e => e.Acc_Type).HasMaxLength(20);

                entity.Property(e => e.AddMinimum_count)
                    .HasDefaultValueSql("(50)")
                    .HasComment("추가주문시 최소 주문수량");

                entity.Property(e => e.Card_Content)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("제품간략설명");

                entity.Property(e => e.Card_Folding)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("E0:접선없음, G1:가로1번,G2,G3 S1:세로1번, S2:세로2번,S3:세로3번,S4:세로4번");

                entity.Property(e => e.Card_Keyword)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasComment("제품 키워드(위시/해피)");

                entity.Property(e => e.Card_Material)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasComment("카드 재질");

                entity.Property(e => e.Card_PrintMethod)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("사용안함");

                entity.Property(e => e.Card_PrintOffice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("사용안함");

                entity.Property(e => e.Card_Shape)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("사용안함");

                entity.Property(e => e.Card_Text)
                    .HasColumnType("text")
                    .HasComment("제품설명");

                entity.Property(e => e.Card_Text_Premier)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasComment("프리미어페이퍼 제품설명");

                entity.Property(e => e.ColorInpaper_seq).HasComment("칼라내지");

                entity.Property(e => e.CuttingLineType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EnvCharge)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EnvPrintMethod1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EnvPrintMethod2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Env_GroupSeq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("봉투 그룹");

                entity.Property(e => e.Env_Seq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("봉투 SEQ");

                entity.Property(e => e.Flower_GroupSeq).HasDefaultValueSql("((0))");

                entity.Property(e => e.Flower_seq).HasDefaultValueSql("((0))");

                entity.Property(e => e.GreetingCard_GroupSeq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("인사말카드 그룹");

                entity.Property(e => e.GreetingCard_Seq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("인사말카드");

                entity.Property(e => e.Inpaper_GroupSeq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("내지 그룹");

                entity.Property(e => e.Inpaper_Seq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("내지");

                entity.Property(e => e.Lining_GroupSeq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("라이닝 그룹");

                entity.Property(e => e.Lining_Seq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("라이닝");

                entity.Property(e => e.MapCard_GroupSeq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("약도카드 그룹");

                entity.Property(e => e.MapCard_Seq)
                    .HasDefaultValueSql("(0)")
                    .HasComment("약도카드");

                entity.Property(e => e.Minimum_Count)
                    .HasDefaultValueSql("(100)")
                    .HasComment("최소 주문수량");

                entity.Property(e => e.Sticker_GroupSeq).HasComment("스티커그룹");

                entity.Property(e => e.Sticker_seq)
                    .HasDefaultValueSql("((33620))")
                    .HasComment("스티커");

                entity.Property(e => e.Unit_Count)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(50)")
                    .IsFixedLength(true)
                    .HasComment("단위 주문수량");

                entity.Property(e => e.env_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.inpaper_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.seal_seq)
                    .HasDefaultValueSql("((0))")
                    .HasComment("씰카드");
            });

            modelBuilder.Entity<S2_CardDetailEtc>(entity =>
            {
                entity.HasKey(e => e.card_seq);

                entity.ToTable("S2_CardDetailEtc");

                entity.HasComment("답례품상세정보");

                entity.Property(e => e.card_seq).ValueGeneratedNever();

                entity.Property(e => e.Contents_Main_Copy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contents_Option_Name)
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contents_Option_Summary)
                    .HasMaxLength(3000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contents_Sub_Copy)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Delivery_Price_Str)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Delivery_Request_Dt).HasDefaultValueSql("((0))");

                entity.Property(e => e.Delivery_Ty)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Hover_Main_Title)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Hover_Sub_Title)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Hover_Title)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Main_Title)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QnA_Info)
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QnA_Title)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sub_Title)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.brand_story).HasMaxLength(500);

                entity.Property(e => e.card_category)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.card_content).HasMaxLength(4000);

                entity.Property(e => e.composition).HasMaxLength(50);

                entity.Property(e => e.contents).HasColumnType("text");

                entity.Property(e => e.delivery_policy).HasMaxLength(4000);

                entity.Property(e => e.delivery_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.etc1).HasMaxLength(200);

                entity.Property(e => e.etc2).HasMaxLength(200);

                entity.Property(e => e.free_delivery_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.isBest)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isNew)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isPlan)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.min_onum).HasDefaultValueSql("((1))");

                entity.Property(e => e.option_str1)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.option_str2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.option_str3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.option_str4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.option_str5)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.origin).HasMaxLength(500);

                entity.Property(e => e.refund_policy).HasMaxLength(4000);

                entity.Property(e => e.summary).HasMaxLength(3000);
            });

            modelBuilder.Entity<S2_CardDetailSmart>(entity =>
            {
                entity.HasKey(e => e.card_seq);

                entity.ToTable("S2_CardDetailSmart");

                entity.Property(e => e.card_seq).ValueGeneratedNever();

                entity.Property(e => e.card_category)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.composition).HasMaxLength(50);

                entity.Property(e => e.etc1).HasMaxLength(200);

                entity.Property(e => e.etc2).HasMaxLength(200);

                entity.Property(e => e.isBest)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isNew)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isPlan)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.min_onum).HasDefaultValueSql("((1))");

                entity.Property(e => e.option_str1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.option_str2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.option_str3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.option_str4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.option_str5)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.origin).HasMaxLength(500);

                entity.Property(e => e.summary).HasMaxLength(500);
            });

            modelBuilder.Entity<S2_CardDigitalColor>(entity =>
            {
                entity.HasKey(e => e.color_code);

                entity.ToTable("S2_CardDigitalColor");

                entity.Property(e => e.color_code)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.color_image)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.color_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CardDiscount>(entity =>
            {
                entity.HasKey(e => new { e.CardDiscount_Seq, e.MinCount, e.MaxCount });

                entity.ToTable("S2_CardDiscount");

                entity.HasComment("할인율정보	");

                entity.HasIndex(e => e.CardDiscount_Seq, "IDX__carddiscount_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Discount_Rate, "IDX__discount_rate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MaxCount, "IDX__maxcount")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MinCount, "IDX__mincount")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MinCount).HasComment("시작 주문수량");

                entity.Property(e => e.MaxCount).HasComment("최대 주문수량");

                entity.Property(e => e.Discount_Price).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Discount_Rate)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("할인율");
            });

            modelBuilder.Entity<S2_CardDiscountInfo>(entity =>
            {
                entity.HasKey(e => e.CardDiscount_Seq);

                entity.ToTable("S2_CardDiscountInfo");

                entity.HasComment("할인율관리	");

                entity.Property(e => e.CardDiscount_Seq).HasComment("할인율 키");

                entity.Property(e => e.CardDiscount_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("관리 코드");

                entity.Property(e => e.CardDiscount_Div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("cardbrand");

                entity.Property(e => e.CardDiscount_Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.CardDiscount_Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("R 할인율");
            });

            modelBuilder.Entity<S2_CardImage>(entity =>
            {
                entity.HasKey(e => e.CardImage_Seq)
                    .IsClustered(false);

                entity.ToTable("S2_CardImage");

                entity.HasIndex(e => e.CardImage_HSize, "IDX__cardimage_hsize")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CardImage_WSize, "IDX__cardimage_wsize")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Card_Seq, "clu_Card_Seq")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CardImage_Div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CardImage_FileName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CardImage_HSize)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CardImage_WSize)
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CardItemGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_CardItemGroup");

                entity.HasIndex(e => e.Card_Seq, "IDX__card_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CardItemGroup_Seq, "IDX__carditemgroup_seq")
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<S2_CardItemGroupInfo>(entity =>
            {
                entity.HasKey(e => e.CardItemGroup_Seq);

                entity.ToTable("S2_CardItemGroupInfo");

                entity.Property(e => e.CardItemGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CardItemGroup_Div)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CardKind>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_CardKind");

                entity.HasComment("카드종류");

                entity.HasIndex(e => e.Card_Seq, "IDX__card_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CardKind_Seq, "IDX__cardkind_seq")
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<S2_CardKindInfo>(entity =>
            {
                entity.HasKey(e => e.CardKind_Seq)
                    .HasName("PK_S2_CardKind");

                entity.ToTable("S2_CardKindInfo");

                entity.HasComment("카드종류정보");

                entity.Property(e => e.CardKind_Seq)
                    .ValueGeneratedNever()
                    .HasComment("주문타입");

                entity.Property(e => e.CardKind)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("주문타입설명");
            });

            modelBuilder.Entity<S2_CardOption>(entity =>
            {
                entity.HasKey(e => e.Card_Seq);

                entity.ToTable("S2_CardOption");

                entity.HasComment("카드옵션정보");

                entity.Property(e => e.Card_Seq).ValueGeneratedNever();

                entity.Property(e => e.DigitalColor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("디지털 인쇄 칼라색상 종류");

                entity.Property(e => e.IsAdd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("추가주문 (0:불가,1:가능)");

                entity.Property(e => e.IsColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("칼라인쇄 (0:없음,1:유료,2:무료)");

                entity.Property(e => e.IsEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("엠보인쇄 (0:없음,1:유료,2:무료)");

                entity.Property(e => e.IsEmboColor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("엠보인쇄칼라(1:기본,2:진회색,3:은색,4:갈색,5:짙은청색,6:자주색)");

                entity.Property(e => e.IsEnvInsert)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("봉투삽입 (0:없음,1:유료,2:무료)");

                entity.Property(e => e.IsFChoice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsHandmade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("부속품제본 (0:없음,1:유료,2:무료)");

                entity.Property(e => e.IsHandmade2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsHanji)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("한지여부(1:일반한지,2:가로형고급한지,3:세로형고급한지)");

                entity.Property(e => e.IsInPaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsJaebon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("내지 끼우기 (0:없음,1:유료,2:무료)");

                entity.Property(e => e.IsLiningJaebon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("봉투라이닝 (0:없음,1:유료,2:무료)");

                entity.Property(e => e.IsOutsideInitial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("겉면인쇄여부");

                entity.Property(e => e.IsQuick)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("초특급 가능 여부");

                entity.Property(e => e.IsSample)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("샘플주문 (0:불가,1:가능)");

                entity.Property(e => e.IsSampleEnd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.IsSensInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("감성내지 (0:없음,1:있음)");

                entity.Property(e => e.IsSticker)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("스티커제공 (0:없음,1:유료,2:무료)");

                entity.Property(e => e.IsUsrComment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("주문시 사용자 멘트(0:없음,1:필요)");

                entity.Property(e => e.IsUsrImg1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("주문시 사용자 이미지업로드(0:없음,1:필요)");

                entity.Property(e => e.IsUsrImg2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("주문시 사용자 이미지업로드(0:없음,1:필요)");

                entity.Property(e => e.IsUsrImg3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("주문시 사용자 이미지업로드(0:없음,1:필요)");

                entity.Property(e => e.IsUsrImg4)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.Master_2Color)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.PrintMethod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("인쇄방법(XXX 세자리 캐릭터값이 다음과 같이 주어진다) G:금박,S:은박, B:먹박,0:박없음, 1:유광,0:무광, 1:형압,0:압없음");

                entity.Property(e => e.SpecialAccYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.embo_print)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("엠보인쇄되는 항목(C:카드,P:약도카드,I:내지 등)");

                entity.Property(e => e.isCardOptionColor)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.isColorMaster)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorOptionCards)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.isCustomDColor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isDesigner)
                    .HasMaxLength(20)
                    .HasComment("카드 디자이너");

                entity.Property(e => e.isDigitalColor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("디지털 인쇄 여부");

                entity.Property(e => e.isEngWedding)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvDesignType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvPremium)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.isEnvSpecial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("고급봉투 가능여부");

                entity.Property(e => e.isEnvSpecialPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isFSC)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isFonttype)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isGreeting)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isGroomBrideYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isHappyPrice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isHoneyMoon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isInternalDigital)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isJigunamu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isLInitial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isLanguage)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("0:사용안함, 1:한글만, 2:영문만, 3:한/영선택");

                entity.Property(e => e.isLaser)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isLaserCard)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isLetterPress)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isMasterDigital)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isMasterPrintColor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isMiniCard)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isMoneyEnv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isNewEvent)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isNewGubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isPhrase)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.isPutGiveCard)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isRepinart)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isSelfEditor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("셀프초안주문 (0:불가,1:가능)");

                entity.Property(e => e.isSpringYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isStarcard)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isTechnic)
                    .HasMaxLength(80)
                    .HasComment("테크닉가공 정보");

                entity.Property(e => e.isUsrImg_info)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isWongoYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isstickerspecial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.option_img1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.option_img2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.outsourcing_print)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("외부업체인쇄되는 항목(C:카드,P:약도카드,I:내지 등)");
            });

            modelBuilder.Entity<S2_CardOption_UsrImg>(entity =>
            {
                entity.HasKey(e => e.uimg_seq);

                entity.ToTable("S2_CardOption_UsrImg");

                entity.HasComment("(더카드)포토카드 업로드 설명	");

                entity.Property(e => e.uimg_card_code)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.uimg_info_img)
                    .HasMaxLength(200)
                    .HasComment("청첩장펼친이미지명");

                entity.Property(e => e.uimg_info_text)
                    .HasMaxLength(100)
                    .HasComment("업로드사진 설명");

                entity.Property(e => e.uimg_number).HasComment("사진갯수");

                entity.Property(e => e.uimg_regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uimg_status).HasDefaultValueSql("((1))");

                entity.Property(e => e.uimg_subtitle)
                    .HasMaxLength(100)
                    .HasComment("사진위치");

                entity.Property(e => e.uimg_title)
                    .HasMaxLength(100)
                    .HasComment("제목");

                entity.Property(e => e.uimg_wh).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<S2_CardRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_CardRank");

                entity.HasIndex(e => e.Card_Seq, "IDX__card_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Company_Seq, "IDX__company_seq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Rank_Div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rank_UpDown)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S2_CardSalesBest>(entity =>
            {
                entity.HasKey(e => new { e.Company_Seq, e.card_seq })
                    .HasName("PK__S2_CardS__E49235E22F9ED46A");

                entity.ToTable("S2_CardSalesBest");
            });

            modelBuilder.Entity<S2_CardSalesPrice>(entity =>
            {
                entity.HasKey(e => new { e.card_seq, e.company_seq });

                entity.ToTable("S2_CardSalesPrice");

                entity.Property(e => e.id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<S2_CardSalesSite>(entity =>
            {
                entity.HasKey(e => new { e.card_seq, e.Company_Seq });

                entity.ToTable("S2_CardSalesSite");

                entity.HasComment("사이트별 카드 판매정보	");

                entity.HasIndex(e => e.Company_Seq, "IDX__company_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IsDisplay, "IDX__isdisplay")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Ranking, "IDX__ranking")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AppSample)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("추천샘플 제품(고객 샘플 주문시 함께 발송카드)");

                entity.Property(e => e.CardDiscount_Seq).HasDefaultValueSql("((0))");

                entity.Property(e => e.DisplayLabel)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Display_Date).HasColumnType("datetime");

                entity.Property(e => e.IsBest)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("베스트 상품");

                entity.Property(e => e.IsDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.IsExtra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("초특가제품");

                entity.Property(e => e.IsExtra2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("베스트 아이콘(임시)");

                entity.Property(e => e.IsInProduct)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsJehyu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("제휴카드 여부");

                entity.Property(e => e.IsJumun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("판매여부(1:판매가능,0:판매불가,2:원주문결제/추가주문가능,3:원주문결제만 가능,4:추가주문만 가능");

                entity.Property(e => e.IsNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("신상품 여부");

                entity.Property(e => e.IsSale)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.MovieURL)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Ranking_m)
                    .HasDefaultValueSql("((1000))")
                    .HasComment("월 랭킹");

                entity.Property(e => e.Ranking_w)
                    .HasDefaultValueSql("((1000))")
                    .HasComment("주 랭킹");

                entity.Property(e => e.Tip)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.input_date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("등록일");

                entity.Property(e => e.isBgcolor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isDigitalCard)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isNotCoupon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("쿠폰적용 불가 상품");

                entity.Property(e => e.isRecommend).HasDefaultValueSql("((0))");

                entity.Property(e => e.isSSPre).HasDefaultValueSql("((0))");

                entity.Property(e => e.isSummary)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("설명");

                entity.Property(e => e.papercover_groupseq).HasDefaultValueSql("((0))");

                entity.Property(e => e.papercover_seq).HasDefaultValueSql("((0))");

                entity.Property(e => e.pocket_groupseq).HasDefaultValueSql("((0))");

                entity.Property(e => e.pocket_seq).HasDefaultValueSql("((0))");

                entity.Property(e => e.ribbon_groupseq).HasDefaultValueSql("((0))");

                entity.Property(e => e.ribbon_seq).HasDefaultValueSql("((0))");

                entity.Property(e => e.sealingsticker_groupseq).HasDefaultValueSql("((0))");

                entity.Property(e => e.sealingsticker_seq).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<S2_CardSamplePrice>(entity =>
            {
                entity.ToTable("S2_CardSamplePrice");

                entity.Property(e => e.id).ValueGeneratedNever();

                entity.Property(e => e.created_at)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.price_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('won')");

                entity.Property(e => e.site_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.updated_at)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.updater)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CardSet_PriceTemp>(entity =>
            {
                entity.HasKey(e => e.Card_Code)
                    .HasName("PK__S2_CardS__6284A6BF1589FCAC");

                entity.ToTable("S2_CardSet_PriceTemp");

                entity.Property(e => e.Card_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CardDiscount_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CardSite>(entity =>
            {
                entity.HasKey(e => e.company_seq);

                entity.ToTable("S2_CardSite");

                entity.Property(e => e.company_seq).ValueGeneratedNever();

                entity.Property(e => e.site_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.site_url)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CardSort>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_CardSort");

                entity.HasIndex(e => e.Card_Code, "IDX__card_code")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ranking, "IDX__ranking")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Card_Code).HasMaxLength(255);
            });

            modelBuilder.Entity<S2_CardStyle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_CardStyle");

                entity.HasComment("카드속성 카테고리");

                entity.HasIndex(e => e.Card_Seq, "IDX__card_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CardStyle_Seq, "IDX__cardstyle_seq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CardStyle_Seq).HasComment("S2_CardStyleItme.cardstyle_seq");

                entity.Property(e => e.id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<S2_CardStyleItem>(entity =>
            {
                entity.HasKey(e => e.CardStyle_Seq);

                entity.ToTable("S2_CardStyleItem");

                entity.HasComment("카드속성 카테고리정보	");

                entity.HasIndex(e => e.CardStyle_Category, "IDX__cardstyle_category")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CardStyle_Site, "IDX__cardstyle_site")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CardStyle_Seq).ValueGeneratedNever();

                entity.Property(e => e.CardStyle)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CardStyle_Category)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CardStyle_Date)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CardStyle_Num)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("스타일명");

                entity.Property(e => e.CardStyle_Site)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S2_CardTechnic>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_CardTechnic__seq");

                entity.ToTable("S2_CardTechnic");

                entity.Property(e => e.technic_comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("테크닉 설명");

                entity.Property(e => e.technic_image)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("테크닉 참고이미지");

                entity.Property(e => e.technic_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("테크닉 이름");
            });

            modelBuilder.Entity<S2_CardView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_CardView");

                entity.Property(e => e.brand_code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.brand_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_code_str)
                    .HasMaxLength(152)
                    .IsUnicode(false);

                entity.Property(e => e.card_div)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_image)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.card_name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.embo_print)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.erp_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isMasterPrintColor)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.isS2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.old_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.outsourcing_print)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CardViewChasu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_CardViewChasu");

                entity.Property(e => e.IsInPaper)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_code_str)
                    .HasMaxLength(152)
                    .IsUnicode(false);

                entity.Property(e => e.card_div)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_image)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.erp_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.isDigital)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.isS2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.old_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.print_group)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CardViewDisplay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_CardViewDisplay");

                entity.Property(e => e.Card_Code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.isDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isJumun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S2_CardViewMerge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_CardViewMerge");

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_code_str)
                    .HasMaxLength(152)
                    .IsUnicode(false);

                entity.Property(e => e.card_div)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_image)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.card_name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.env_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.erp_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.inpaper_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.isHanji)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isS2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.old_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CardViewN>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_CardViewN");

                entity.Property(e => e.FPrint_YORN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PrintMethod)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.brand_code)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.brand_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_code_str)
                    .HasMaxLength(152)
                    .IsUnicode(false);

                entity.Property(e => e.card_div)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_image)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.card_name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.erp_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isS2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.old_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CardViewNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_CardViewNew");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.card_code_str)
                    .HasMaxLength(152)
                    .IsUnicode(false);

                entity.Property(e => e.card_div)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_image)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.card_name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.cardbrand)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.erp_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isS2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CardViewOption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_CardViewOption");

                entity.Property(e => e.Embo_Print)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Outsourcing_Print)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PrintMethod)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_code_str)
                    .HasMaxLength(152)
                    .IsUnicode(false);

                entity.Property(e => e.card_div)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_image)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.card_name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.erp_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isHanji)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isInitial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isS2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.old_code)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CardViewSMART>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_CardViewSMART");

                entity.Property(e => e.Card_Code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.isDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isJumun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S2_CardView_TEST>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_CardView_TEST");

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_code_str)
                    .HasMaxLength(152)
                    .IsUnicode(false);

                entity.Property(e => e.card_div)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_image)
                    .HasMaxLength(108)
                    .IsUnicode(false);

                entity.Property(e => e.card_name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.embo_print)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.erp_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isS2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.old_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.outsourcing_print)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_Card_Detail_Sub>(entity =>
            {
                entity.HasKey(e => e.Seq);

                entity.ToTable("S2_Card_Detail_Sub");

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Step_1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Step_2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Step_3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Step_4)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Step_5)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Step_6)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Step_Img).HasMaxLength(50);

                entity.Property(e => e.Step_Text).HasColumnType("text");

                entity.Property(e => e.Step_Title).HasMaxLength(200);
            });

            modelBuilder.Entity<S2_CardxmlDatum>(entity =>
            {
                entity.HasKey(e => e.Card_SeqNum);

                entity.HasIndex(e => e.Brand, "IDX__brand")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Card_Code, "IDX__card_code")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Gubun, "IDX__gubun")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Brand)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Card_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ImgSize)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S2_CsPoll>(entity =>
            {
                entity.ToTable("S2_CsPoll");

                entity.HasComment("cs 평가 질문/답변 관리");

                entity.Property(e => e.answer1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.answer2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.answer3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.answer4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.answer5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.answer6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.answer7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.answer8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.qtype)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("1:라디오,2:체크박스,3:구문입력");

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CsPollAn>(entity =>
            {
                entity.HasKey(e => e.aid);

                entity.HasComment("cs 평가 고객 답변");

                entity.Property(e => e.answer)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.answer_desc)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CsPollAnsDetail>(entity =>
            {
                entity.HasKey(e => new { e.qid, e.order_seq });

                entity.ToTable("S2_CsPollAnsDetail");

                entity.HasComment("cs 평가 고객 주관식 답변");

                entity.Property(e => e.ans_detail)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_CustomizedCard>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_CustomizedCard__seq");

                entity.ToTable("S2_CustomizedCard");

                entity.Property(e => e.contents)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.custom_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.image_big)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.image_small)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.title)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_Event>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_Event__seq");

                entity.ToTable("S2_Event");

                entity.HasIndex(e => e.charge_use_num, "IDX__charge_use_num")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.charge_use_seq, "IDX__charge_use_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.company_seq, "IDX__company_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.sales_gubun, "IDX__sales_gubun")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.uid, "IDX__uid")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.charge_use)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_EventAdmin_Log>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S2_EventAdmin_Log");

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.admin_memo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.charge_use)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_EventBlog>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_EventBlog__seq");

                entity.ToTable("S2_EventBlog");

                entity.HasIndex(e => e.company_seq, "IDX__company_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.sales_gubun, "IDX__sales_gubun")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.uid, "IDX__uid")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.a_comment).HasColumnType("text");

                entity.Property(e => e.blog_url)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.provide)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.provide_no)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.q_comment)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_EventUse>(entity =>
            {
                entity.HasKey(e => e.charge_use_seq)
                    .HasName("PK_CIDX_S2_EventUse__charge_use_seq");

                entity.ToTable("S2_EventUse");

                entity.Property(e => e.charge_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.event_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_Event_flow>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_Event_flow__seq");

                entity.ToTable("S2_Event_flow");

                entity.Property(e => e.a_comment).HasColumnType("text");

                entity.Property(e => e.q_comment)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_Event_love>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_Event_love__seq");

                entity.ToTable("S2_Event_love");

                entity.Property(e => e.q_comment)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_FAQ>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_FAQ__seq");

                entity.ToTable("S2_FAQ");

                entity.Property(e => e.blank_)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.display_order).HasDefaultValueSql("((1))");

                entity.Property(e => e.faq_div).HasDefaultValueSql("((1))");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.writer)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_MailDomain>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_MailDomain__seq");

                entity.ToTable("S2_MailDomain");

                entity.HasComment("이메일 도메인");

                entity.Property(e => e.domain_msg)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.mail_domain)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_McardClickCount>(entity =>
            {
                entity.HasKey(e => e.Seq);

                entity.ToTable("S2_McardClickCount");

                entity.HasIndex(e => e.OrderSeq, "IDX_S2_McardClickCount_OrderSeq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.RegDate, "IDX_S2_McardClickCount_RegDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Gubun)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ip)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S2_MediaContent>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_MediaContents__seq");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_MediaView>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_MediaView__seq");

                entity.ToTable("S2_MediaView");

                entity.Property(e => e.end_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.start_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.user_img1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.user_img2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.viewdiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.writer)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_News>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.HasComment("뉴스기사");

                entity.Property(e => e.URL_TARGET_BLANK_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.category)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.contents).HasColumnType("ntext");

                entity.Property(e => e.isdp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.medium_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.temp1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.temp2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.url_taget)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.viewcnt).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<S2_Notice>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_Notice__seq");

                entity.ToTable("S2_Notice");

                entity.HasComment("공지사항");

                entity.Property(e => e.blank_)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.end_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.notice_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.start_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.writer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_OrderViewMerge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_OrderViewMerge");

                entity.Property(e => e.CARD_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_code_str)
                    .HasMaxLength(152)
                    .IsUnicode(false);

                entity.Property(e => e.card_div)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isDigital)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.isEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isFPrint)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isinpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.pay_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.print_group)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.print_type)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<S2_OrderViewMerge_For_ChasuGroupSet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_OrderViewMerge_For_ChasuGroupSet");

                entity.Property(e => e.Card_Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Env_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GroupCodeSet)
                    .HasMaxLength(81)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GroupType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_div)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.inpaper_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.isColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isLaserCut)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.pay_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.print_type)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<S2_OrderViewMerge_For_ChasuGroupSet_Admin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_OrderViewMerge_For_ChasuGroupSet_Admin");

                entity.Property(e => e.Card_Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Env_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GroupCodeSet)
                    .HasMaxLength(81)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GroupType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_div)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.inPaper_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.isColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isLaserCut)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.pay_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.print_type)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<S2_OrderViewMerge_New>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_OrderViewMerge_New");

                entity.Property(e => e.GroupCodeSet)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.GroupType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.card_div)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.env_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.inpaper_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.isColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isLaserCut)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.pay_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.print_type)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<S2_OrderViewMerge_New_Admin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_OrderViewMerge_New_Admin");

                entity.Property(e => e.GroupCodeSet)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.GroupType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.card_div)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.env_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.inpaper_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.isColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isLaserCut)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.pay_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.print_type)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<S2_PTRequest>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_PTRequest__seq");

                entity.ToTable("S2_PTRequest");

                entity.HasComment("제휴문의");

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail_R)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address_R)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.com_contents).HasColumnType("text");

                entity.Property(e => e.com_message).HasColumnType("text");

                entity.Property(e => e.com_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.com_url)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.person_email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.person_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.user_upfile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip1_R)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip2_R)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_ProductImage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_ProductImage");

                entity.Property(e => e.CardImage_DIV)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CardImage_HSize)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CardImage_Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CardImage_WSize)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Card_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_RecommendCard>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_RecommendCard__seq");

                entity.ToTable("S2_RecommendCard");

                entity.HasIndex(e => e.card_seq, "IDX__card_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.site_div, "IDX__site_div")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.site_div)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_Report>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_Report");

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_SampleBasket>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_SampleBasket__seq");

                entity.ToTable("S2_SampleBasket");

                entity.HasComment("샘플장바구니");

                entity.HasIndex(e => e.card_seq, "IX_card_seq");

                entity.Property(e => e.GUID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MD_recommend)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_Toss_Bank>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("S2_Toss_Bank");

                entity.HasComment("모바일초대장 Toss은행코드");

                entity.Property(e => e.BANK_CODE)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("은행코드");

                entity.Property(e => e.BANK_NAME)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("은행명");

                entity.Property(e => e.USE_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .HasComment("사용유무");
            });

            modelBuilder.Entity<S2_USERBYE_SECESSION_CAUSE>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("S2_USERBYE_SECESSION_CAUSE");

                entity.HasComment("탈퇴 사유");

                entity.Property(e => e.DUP_INFO)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ETC_COMMENT)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SECESSION_CAUSE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.SITE_DIV)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_USERINFO_AUTH_INFO>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("S2_USERINFO_AUTH_INFO");

                entity.Property(e => e.AUTH_DESC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AUTH_MODULE_TYPE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BIRTH_DATE)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DUPINFO)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ENCODE_DATA)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.GENDER)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NATIONAL_INFO)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S2_USERINFO_SIGNUP_DEVICE>(entity =>
            {
                entity.HasKey(e => e.DUPINFO);

                entity.ToTable("S2_USERINFO_SIGNUP_DEVICE");

                entity.HasComment("고객 접근 디바이스 정보");

                entity.Property(e => e.DUPINFO)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DEVICE_TYPE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.USER_AGENT)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_USERINFO_THIRD_PARTY_MARKETING_AGREEMENT>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("S2_USERINFO_THIRD_PARTY_MARKETING_AGREEMENT");

                entity.HasComment("3자 마케팅동의 로그");

                entity.HasIndex(e => new { e.UID, e.MARKETING_TYPE_CODE }, "IX_S2_USERINFO_THIRD_PARTY_MARKETING_AGREEMENT_UID_TYPE_CODE");

                entity.Property(e => e.MARKETING_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_USER_DEVICE_TOKEN>(entity =>
            {
                entity.HasKey(e => e.S2_USER_DEVICE_TOKEN_SEQ)
                    .HasName("PK_S2_USER_TOKEN");

                entity.ToTable("S2_USER_DEVICE_TOKEN");

                entity.Property(e => e.COMPANY_SEQ)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DEVICE_TYPE_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HTTP_USER_AGENT)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MOBILE_DEVICE_OS_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TOKEN)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_UserBye>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_UserBye__seq");

                entity.ToTable("S2_UserBye");

                entity.HasComment("탈퇴 관리");

                entity.Property(e => e.AuthType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ConnInfo)
                    .HasMaxLength(88)
                    .IsUnicode(false);

                entity.Property(e => e.DupInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NationalInfo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RequestNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.company_seq).HasDefaultValueSql("((5000))");

                entity.Property(e => e.reason_1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reason_2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reason_3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reason_4)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reason_5)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reason_6)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reason_7)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reason_txt)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_UserCardView>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_S2_UserCardView1");

                entity.ToTable("S2_UserCardView");

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.session_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.site_div)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S2_UserComment>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_UserComment__seq");

                entity.ToTable("S2_UserComment");

                entity.HasComment("바비프몰 이용후기");

                entity.HasIndex(e => e.card_code, "IDX__card_code")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.card_seq, "IDX__card_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.company_seq, "IDX__company_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_seq, "IDX__order_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.sales_gubun, "IDX__sales_gubun")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.reg_date, "NCI_REG_DATE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.EVENT_STATUS_CODE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.b_url)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.best_month)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.best_week)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.best_year)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.comm_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.comment)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.device_type)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.edit_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.isBest)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment(" 0:심사중 , 1:당첨축하 , 3:승인보류");

                entity.Property(e => e.isDP)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .HasComment("전시여부");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.score).HasComment("별점");

                entity.Property(e => e.title)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.upimg)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_UserCommentBest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_UserCommentBest");

                entity.HasComment("이용후기 베스트");

                entity.HasIndex(e => e.best_date, "IX_CommentBest_date")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.best_date)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.comment)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.best_seqNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.best_seq)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsrCommentBest_Comment");
            });

            modelBuilder.Entity<S2_UserComment_Copy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_UserComment_Copy");

                entity.Property(e => e.EVENT_STATUS_CODE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.b_url)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.best_month)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.best_week)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.best_year)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.comm_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.comment)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.edit_date).HasColumnType("datetime");

                entity.Property(e => e.isBest)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isDP)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.m_upimg1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.m_upimg2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.m_upimg3)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.m_upimg4)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.m_upimg5)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("datetime");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.seq).ValueGeneratedOnAdd();

                entity.Property(e => e.title)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.upimg)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.upimg1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.upimg2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.upimg3)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.upimg4)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.upimg5)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_UserComment_ETC_reply>(entity =>
            {
                entity.HasKey(e => e.uc_idx);

                entity.ToTable("S2_UserComment_ETC_reply");

                entity.HasComment("프페부가상품 이용후기");

                entity.Property(e => e.uc_comment).HasColumnType("ntext");

                entity.Property(e => e.uc_regdate).HasColumnType("datetime");

                entity.Property(e => e.uc_uname).HasMaxLength(100);
            });

            modelBuilder.Entity<S2_UserComment_Reply>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_UserComment_Reply");

                entity.HasComment("이용후기 답변");

                entity.Property(e => e.uc_idx).ValueGeneratedOnAdd();

                entity.Property(e => e.uc_regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uc_uname)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('admin')");
            });

            modelBuilder.Entity<S2_UserComment_etc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_UserComment_etc");

                entity.Property(e => e.b_url)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.comment)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.device_type)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.edit_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.isDP)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true);

                entity.Property(e => e.isbest)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.seq).ValueGeneratedOnAdd();

                entity.Property(e => e.title)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_UserComment_photo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_UserComment_photo");

                entity.HasComment("이용후기 사진업로드 관련");

                entity.Property(e => e.S2_USERCOMMENT_PHOTO_SEQ).ValueGeneratedOnAdd();

                entity.Property(e => e.img_name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.upimg_name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_UserComment_photo_the>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_UserComment_photo_the");

                entity.HasComment("(더카드)이용후기 사진업로드 관련");

                entity.Property(e => e.img_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("이미지원본파일명");

                entity.Property(e => e.upimg_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("이미지업로드파일명");
            });

            modelBuilder.Entity<S2_UserInfo>(entity =>
            {
                entity.HasKey(e => new { e.uid, e.site_div });

                entity.ToTable("S2_UserInfo");

                entity.HasComment("고객정보");

                entity.HasIndex(e => e.reg_date, "IDX_S2_UserInfo_Reg_Date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.hand_phone1, "IDX_hand_phone1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.hand_phone1, e.hand_phone2, e.hand_phone3 }, "IDX_hand_phone123")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.hand_phone2, "IDX_hand_phone2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.hand_phone3, "IDX_hand_phone3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.phone1, "IDX_phone1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.phone1, e.phone2, e.phone3 }, "IDX_phone123")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.phone2, "IDX_phone2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.phone3, "IDX_phone3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ConnInfo, "NCI_CONNINFO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DupInfo, "NCI_DUPINFO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.REFERER_SALES_GUBUN, "NCI_REFERER_SALES_GUBUN")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.reg_date, "NCI_REG_DATE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.site_div, "NCI_SITE_DIV")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.uid, e.DupInfo }, "NCI_USERINFO_UID_DUPINFO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.site_div)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.AuthType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BACKUP_UID)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ConnInfo)
                    .HasMaxLength(88)
                    .IsUnicode(false);

                entity.Property(e => e.DupInfo)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.INTEGRATION_MEMBER_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.INTERGRATION_BEFORE_ID)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.INTERGRATION_DATE).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NationalInfo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PWD)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PWD_BACKUP)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.REFERER_SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RequestNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SELECT_SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SELECT_USER_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.addr_detail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail_R)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addr_flag).HasDefaultValueSql("((0))");

                entity.Property(e => e.address)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.address_R)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.birth)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.birth_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.casamiaship_leave_date).HasColumnType("datetime");

                entity.Property(e => e.casamiaship_reg_Date).HasColumnType("datetime");

                entity.Property(e => e.chk_DM)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.chk_DormancyAccount)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_casamiamembership)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.chk_cuckoosmembership)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.chk_iloommembership)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_lgmembership)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mail_input)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mailservice)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_myomee)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership_coop)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership_leave)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership_per)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_sms)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.cuckoosship_leave_date).HasColumnType("datetime");

                entity.Property(e => e.cuckoosship_reg_Date).HasColumnType("datetime");

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.iloommembership_reg_date).HasColumnType("datetime");

                entity.Property(e => e.inflow_route)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.isJehu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.isMCardAble)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.is_appSample)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.jumin)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.lgmembership_leave_date).HasColumnType("datetime");

                entity.Property(e => e.lgmembership_reg_date).HasColumnType("datetime");

                entity.Property(e => e.login_date).HasColumnType("datetime");

                entity.Property(e => e.login_date_lastest).HasColumnType("datetime");

                entity.Property(e => e.mkt_chk_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mod_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.myomee_reg_date).HasColumnType("datetime");

                entity.Property(e => e.phone1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.site_div_lastest)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.smembership_chk_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.smembership_inflow_route)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.smembership_leave_date).HasColumnType("datetime");

                entity.Property(e => e.smembership_reg_date).HasColumnType("datetime");

                entity.Property(e => e.ugubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.user_authority)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.var1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_day)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_hour)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_minute)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_month)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_name).HasMaxLength(200);

                entity.Property(e => e.wedd_pgubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.wedd_year)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.zip1)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip1_R)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip2)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip2_R)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_UserInfo_BHand>(entity =>
            {
                entity.HasKey(e => new { e.uid, e.jumin })
                    .HasName("PK_CIDX_S2_UserInfo_BHands__uid");

                entity.HasComment("비핸즈 회원테이블");

                entity.HasIndex(e => e.reg_date, "IDX_S2_UserInfo_Bhands_Reg_Date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.hand_phone1, "IDX_hand_phone1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.hand_phone1, e.hand_phone2, e.hand_phone3 }, "IDX_hand_phone123")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.hand_phone2, "IDX_hand_phone2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.hand_phone3, "IDX_hand_phone3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.phone1, "IDX_phone1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.phone1, e.phone2, e.phone3 }, "IDX_phone123")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.phone2, "IDX_phone2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.phone3, "IDX_phone3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ConnInfo, "NCI_CONNINFO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DupInfo, "NCI_DUPINFO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.REFERER_SALES_GUBUN, "NCI_REFERER_SALES_GUBUN")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.site_div, "NCI_SITE_DIV")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.uid, e.DupInfo }, "NCI_USERINFO_BHANDS_UID_DUPINFO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.AuthType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BACKUP_UID)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ConnInfo)
                    .HasMaxLength(88)
                    .IsUnicode(false);

                entity.Property(e => e.DupInfo)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.INTEGRATION_MEMBER_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.INTERGRATION_BEFORE_ID)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.INTERGRATION_DATE).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NationalInfo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PWD)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PWD_BACKUP)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.REFERER_SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RequestNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SELECT_SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SELECT_USER_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.addr_detail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail_R)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addr_flag)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0:구주소,1:신도로주");

                entity.Property(e => e.address)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.address_R)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.birth)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.birth_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.casamiaship_leave_date).HasColumnType("datetime");

                entity.Property(e => e.casamiaship_reg_Date).HasColumnType("datetime");

                entity.Property(e => e.chk_DM)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.chk_DormancyAccount)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_casamiamembership)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.chk_cuckoosmembership)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.chk_iloommembership)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_lgmembership)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mail_input)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mailservice)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_myomee)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership_coop)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership_leave)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership_per)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_sms)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.cuckoosship_leave_date).HasColumnType("datetime");

                entity.Property(e => e.cuckoosship_reg_Date).HasColumnType("datetime");

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.iloommembership_reg_date).HasColumnType("datetime");

                entity.Property(e => e.inflow_route)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.isJehu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.isMCardAble)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.is_appSample)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.lgmembership_leave_date).HasColumnType("datetime");

                entity.Property(e => e.lgmembership_reg_date).HasColumnType("datetime");

                entity.Property(e => e.login_date).HasColumnType("datetime");

                entity.Property(e => e.login_date_lastest).HasColumnType("datetime");

                entity.Property(e => e.mkt_chk_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mod_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.myomee_reg_date).HasColumnType("datetime");

                entity.Property(e => e.phone1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.site_div)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.site_div_lastest)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.smembership_chk_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.smembership_inflow_route)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.smembership_leave_date).HasColumnType("datetime");

                entity.Property(e => e.smembership_reg_date).HasColumnType("datetime");

                entity.Property(e => e.ugubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.var1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("이지웰 연동 회원일 경우 유저키값을 저장");

                entity.Property(e => e.wedd_day)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_hour)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_minute)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_month)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_name).HasMaxLength(200);

                entity.Property(e => e.wedd_pgubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.wedd_year)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.zip1)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip1_R)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip2)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip2_R)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_UserInfo_Deardeer>(entity =>
            {
                entity.HasKey(e => e.uid)
                    .HasName("PRIMARY")
                    .IsClustered(false);

                entity.ToTable("S2_UserInfo_Deardeer");

                entity.HasComment("사용자관리");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("아이디");

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("주소2");

                entity.Property(e => e.address)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("주소1");

                entity.Property(e => e.birth)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("생일");

                entity.Property(e => e.birth_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("생일구분");

                entity.Property(e => e.chk_mailservice)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .HasComment("이메일 수신동의여부");

                entity.Property(e => e.chk_sms)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .HasComment("SMS 수신동의여부");

                entity.Property(e => e.conninfo)
                    .HasMaxLength(88)
                    .IsUnicode(false)
                    .HasComment("고유번호(추가)");

                entity.Property(e => e.gender)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("성별 - F: 여자, M: 남자");

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("휴대전화1");

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("휴대전화2");

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("휴대전화3");

                entity.Property(e => e.phone1)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("휴대전화");

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("전화번호2");

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("전화번호3");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasComment("새 컬럼");

                entity.Property(e => e.site_div)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("가입채널");

                entity.Property(e => e.umail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("이메일");

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("이름");

                entity.Property(e => e.wedd_day)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("예식일");

                entity.Property(e => e.wedd_month)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("예식월");

                entity.Property(e => e.wedd_pggubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.wedd_year)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("회원가입 예상 예식일자");

                entity.Property(e => e.zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasComment("우편번호1");

                entity.Property(e => e.zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasComment("우편번호2");
            });

            modelBuilder.Entity<S2_UserInfo_Deardeer_Marketing>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S2_UserInfo_Deardeer_Marketing");

                entity.HasComment("마케팅동의(신규)");

                entity.HasIndex(e => new { e.uid, e.agreement_type }, "UK_S2_UserInfo_Deardeer_Marketing")
                    .IsUnique();

                entity.Property(e => e.seq).HasComment("마케팅동의ID");

                entity.Property(e => e.agree_date)
                    .HasColumnType("datetime")
                    .HasComment("동의일시");

                entity.Property(e => e.agreement_type)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("동의구분");

                entity.Property(e => e.cancel_date)
                    .HasColumnType("datetime")
                    .HasComment("취소일시");

                entity.Property(e => e.chk_agreement)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("동의여부");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("회원ID");
            });

            modelBuilder.Entity<S2_UserInfo_TheCard>(entity =>
            {
                entity.HasKey(e => new { e.uid, e.jumin })
                    .HasName("PK_CIDX_S2_UserInfo_TheCard__uid");

                entity.ToTable("S2_UserInfo_TheCard");

                entity.HasComment("더카드 회원테이블");

                entity.HasIndex(e => e.reg_date, "IDX_S2_UserInfo_TheCard_Reg_Date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.hand_phone1, "IDX_hand_phone1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.hand_phone1, e.hand_phone2, e.hand_phone3 }, "IDX_hand_phone123")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.hand_phone2, "IDX_hand_phone2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.hand_phone3, "IDX_hand_phone3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.phone1, "IDX_phone1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.phone1, e.phone2, e.phone3 }, "IDX_phone123")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.phone2, "IDX_phone2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.phone3, "IDX_phone3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ConnInfo, "NCI_CONNINFO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DupInfo, "NCI_DUPINFO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.INTERGRATION_DATE, "NCI_INTERGRATION_DATE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.INTEGRATION_MEMBER_YORN, "NCI_INTERGRATION_MEMBER_YORN")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.REFERER_SALES_GUBUN, "NCI_REFERER_SALES_GUBUN")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SELECT_SALES_GUBUN, "NCI_SELECT_SALES_GUBUN")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.site_div, "NCI_SITE_DIV")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.uid, e.DupInfo }, "NCI_USERINFO_THECARD_UID_DUPINFO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.AuthType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BACKUP_UID)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ConnInfo)
                    .HasMaxLength(88)
                    .IsUnicode(false);

                entity.Property(e => e.DupInfo)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.INTEGRATION_MEMBER_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.INTERGRATION_BEFORE_ID)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.INTERGRATION_DATE).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NationalInfo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PWD)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PWD_BACKUP)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.REFERER_SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RequestNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SELECT_SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SELECT_USER_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.addr_detail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail_R)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addr_flag).HasDefaultValueSql("((0))");

                entity.Property(e => e.address)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.address_R)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.birth)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.birth_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.casamiaship_leave_date).HasColumnType("datetime");

                entity.Property(e => e.casamiaship_reg_Date).HasColumnType("datetime");

                entity.Property(e => e.chk_DM)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.chk_DormancyAccount)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_casamiamembership)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.chk_cuckoosmembership)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.chk_iloommembership)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_lgmembership)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mail_input)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mailservice)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_myomee)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership_coop)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership_leave)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership_per)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_sms)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.cuckoosship_leave_date).HasColumnType("datetime");

                entity.Property(e => e.cuckoosship_reg_Date).HasColumnType("datetime");

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.iloommembership_reg_date).HasColumnType("datetime");

                entity.Property(e => e.inflow_route)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.isJehu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.isMCardAble)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.is_appSample)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.lgmembership_leave_date).HasColumnType("datetime");

                entity.Property(e => e.lgmembership_reg_date).HasColumnType("datetime");

                entity.Property(e => e.login_date).HasColumnType("datetime");

                entity.Property(e => e.login_date_lastest).HasColumnType("datetime");

                entity.Property(e => e.mkt_chk_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mod_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.myomee_reg_date).HasColumnType("datetime");

                entity.Property(e => e.phone1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.site_div)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.site_div_lastest)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.smembership_chk_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.smembership_inflow_route)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.smembership_leave_date).HasColumnType("datetime");

                entity.Property(e => e.smembership_reg_date).HasColumnType("datetime");

                entity.Property(e => e.ugubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.var1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_day)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_hour)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_minute)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_month)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_name).HasMaxLength(200);

                entity.Property(e => e.wedd_pgubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.wedd_year)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.zip1)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip1_R)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip2)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip2_R)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_UserQnA>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_UserQnA");

                entity.HasComment("고객문의");

                entity.HasIndex(e => e.qa_iid, "CI_S2_USERQNA")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.company_seq, "NCI_S2_USERQNA_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.member_id, "NCI_S2_USERQNA_MEMBER_ID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.a_content)
                    .HasColumnType("text")
                    .HasComment("답변한 내용");

                entity.Property(e => e.a_dt)
                    .HasColumnType("datetime")
                    .HasComment("답변한 날짜");

                entity.Property(e => e.a_id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("답변한 상담원 아이디");

                entity.Property(e => e.a_research1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.a_research2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.a_research_date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.a_stat)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("답변 구분(S1:등록, S2:처리중, S3:답변등록, S4:삭제)");

                entity.Property(e => e.admin_upfile1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("제품코드");

                entity.Property(e => e.chk_mail_input)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("이메일 입력 방법 (Y:직접입력, N:선택입력)");

                entity.Property(e => e.e_mail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("이메일");

                entity.Property(e => e.inflow)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.isMail)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("메일 수신 여부 (0:no, 1:yes)");

                entity.Property(e => e.isSMS)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("sms 문자 수신 여부 (0:no, 1:yes)");

                entity.Property(e => e.isSecret)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("비공개 (0:no, 1:yes)");

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("회원ID");

                entity.Property(e => e.member_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("이름");

                entity.Property(e => e.order_seq).HasComment("주문번호");

                entity.Property(e => e.q_content)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasComment("질문 내용");

                entity.Property(e => e.q_kind)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("질문 구분 (K2:결제부분, K4:배송관련, K5:상품문의, K7:추가주문문의, K8:서비스문의, K9:이벤트문의, K10:시스템문의, K11:개인정보문의)");

                entity.Property(e => e.q_title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("질문 제목");

                entity.Property(e => e.qa_iid).ValueGeneratedOnAdd();

                entity.Property(e => e.reg_dt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("작성일");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.tel_no)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("연락처");

                entity.Property(e => e.user_upfile1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("첨부파일1");

                entity.Property(e => e.user_upfile2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("첨부파일2");
            });

            modelBuilder.Entity<S2_UserQnA_Boton>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_UserQnA_Boton");

                entity.Property(e => e.a_content).HasColumnType("text");

                entity.Property(e => e.a_dt).HasColumnType("datetime");

                entity.Property(e => e.a_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.a_research1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.a_research2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.a_research_date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.a_stat)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.chk_mail_input)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.e_mail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isMail)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.isSMS)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.isSecret)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.member_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.q_content)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.q_kind)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.q_title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.qa_iid).ValueGeneratedOnAdd();

                entity.Property(e => e.reg_dt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('BT')");

                entity.Property(e => e.tel_no)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.user_upfile1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.user_upfile2)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_Userinfo_HiPlaza_Log>(entity =>
            {
                entity.HasKey(e => e.uid)
                    .HasName("PK_S2_Userinfo_HiPlaza_Log_1");

                entity.ToTable("S2_Userinfo_HiPlaza_Log");

                entity.Property(e => e.uid).HasMaxLength(20);

                entity.Property(e => e.DECODE_STR).HasMaxLength(400);

                entity.Property(e => e.ENCODE_STR).HasMaxLength(3000);

                entity.Property(e => e.JSON_STR).HasMaxLength(2000);

                entity.Property(e => e.MBS_CARD_NO).HasMaxLength(16);

                entity.Property(e => e.MLG_CUST_ID).HasMaxLength(50);

                entity.Property(e => e.P_ADDR1)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.P_ADDR2)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.P_BIRTHDAY_DATE)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.P_CUST_NM)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.P_DM_RCV_YN)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.P_EMAIL_ID).HasMaxLength(100);

                entity.Property(e => e.P_EMAIL_RCV_YN)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.P_MOBILE_DDD)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.P_MOBILE_NO1)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.P_MOBILE_NO2)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.P_ORG_CD)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.P_PI_MOTION_YN)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.P_POST_CD)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.P_SEX)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.P_SMS_RCV_YN)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.P_SOLAR_CALENDAR_YN).HasMaxLength(50);

                entity.Property(e => e.P_SSN_CI)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.P_TEL_DDD)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.P_TEL_NO1)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.P_TEL_NO2)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.P_TM_RCV_YN)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.P_WEDDING_DATE)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.RESULT_JSON_STR).HasMaxLength(400);

                entity.Property(e => e.RTN_CD).HasMaxLength(4);

                entity.Property(e => e.RTN_MSG).HasMaxLength(300);

                entity.Property(e => e.cancel_date).HasColumnType("datetime");

                entity.Property(e => e.id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasComment("LG 하이플라자 가입 정보 발송 로그");

                entity.Property(e => e.result_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<S2_Userinfo_HiPlaza_store>(entity =>
            {
                entity.HasKey(e => new { e.si_do, e.gu_gun })
                    .HasName("PK_S2_Userinfo_HiPlaza_Store");

                entity.ToTable("S2_Userinfo_HiPlaza_store");

                entity.Property(e => e.si_do).HasMaxLength(20);

                entity.Property(e => e.gu_gun).HasMaxLength(20);

                entity.Property(e => e.org_cd)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsFixedLength(true);

                entity.Property(e => e.stock_org_cd)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength(true);

                entity.Property(e => e.store)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<S2_Userinfo_HiPlaza_zipcode>(entity =>
            {
                entity.HasKey(e => new { e.si_do, e.gu_gun, e.zipcode });

                entity.ToTable("S2_Userinfo_HiPlaza_zipcode");

                entity.Property(e => e.si_do).HasMaxLength(20);

                entity.Property(e => e.gu_gun).HasMaxLength(20);

                entity.Property(e => e.zipcode)
                    .HasMaxLength(6)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S2_UsrBasket>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S2_UsrBasket");

                entity.Property(e => e.option_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.option_str)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.order_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('D')");

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_WishCard>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_WishCard__seq");

                entity.ToTable("S2_WishCard");

                entity.HasIndex(e => e.card_seq, "IDX__card_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.site_div, "IDX__site_div")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.site_div)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_WishGreeting>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_WishGreeting__seq");

                entity.ToTable("S2_WishGreeting");

                entity.HasIndex(e => e.greeting_seq, "IDX__greeting_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.site_div, "IDX__site_div")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.site_div)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_WishMap>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S2_WishMap__seq");

                entity.ToTable("S2_WishMap");

                entity.HasIndex(e => e.site_div, "IDX__site_div")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.weddimg_idx, "IDX__weddimg_idx")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.site_div)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_eCardBest>(entity =>
            {
                entity.HasKey(e => e.Order_Seq);

                entity.ToTable("S2_eCardBest");

                entity.Property(e => e.Order_Seq).ValueGeneratedNever();

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S2_eCardBoard>(entity =>
            {
                entity.HasKey(e => e.Board_Seq);

                entity.ToTable("S2_eCardBoard");

                entity.HasIndex(e => e.Order_Seq, "IDX__S2_eCardBoard__Order_Seq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Content).HasColumnType("text");

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Pwd)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S2_eCardOrder>(entity =>
            {
                entity.HasKey(e => new { e.Order_Seq, e.Company_Seq });

                entity.ToTable("S2_eCardOrder");

                entity.HasIndex(e => e.worder_seq, "IDX__S2_eCardOrder__worder_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Company_Seq, "NCI_S2_ECARDORDER_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Uid, "NCI_S2_ECARDORDER_UID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Uid, e.Company_Seq }, "NCI_S2_ECARDORDER_UID_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Order_Seq).ValueGeneratedOnAdd();

                entity.Property(e => e.Addr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BrideName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GroomName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsOpen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Skin_Seq)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UploadImageURL)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.WeddingHall)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.XmlBackgroundData)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.XmlMovieData).HasColumnType("text");

                entity.Property(e => e.XmlMovieModiDate).HasColumnType("smalldatetime");

                entity.Property(e => e.XmlPictureData).HasColumnType("text");

                entity.Property(e => e.XmlPictureModiDate).HasColumnType("smalldatetime");

                entity.Property(e => e.dacom_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.event_Day)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.event_ampm)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.event_hour)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.event_minute)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.event_month)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.event_weekname)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.event_year)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_state)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .HasComment("0:삭제, 1:사용");

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.pg_resultinfo2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.pg_shopid)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.pg_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.settle_cancel_date).HasColumnType("datetime");

                entity.Property(e => e.settle_date).HasColumnType("datetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.settle_status).HasDefaultValueSql("((0))");

                entity.Property(e => e.status_seq)
                    .HasDefaultValueSql("((2))")
                    .HasComment("2:주문완료");

                entity.Property(e => e.weddinghall_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.xmlBackgroundModiDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<S2_mCardOrder>(entity =>
            {
                entity.HasKey(e => e.Order_Seq);

                entity.ToTable("S2_mCardOrder");

                entity.HasIndex(e => e.worder_seq, "IDX_S2_mCardOrder_WOrder_Seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Company_Seq, "NCI_S2_MCARDORDER_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Uid, "NCI_S2_MCARDORDER_UID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BrideName).HasMaxLength(50);

                entity.Property(e => e.GroomName).HasMaxLength(50);

                entity.Property(e => e.IsOpen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Qrcode)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WeddingAddr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WeddingHall).HasMaxLength(100);

                entity.Property(e => e.addr)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.bride_pf_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.bride_pm_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.dacom_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.event_Day)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.event_ampm)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.event_hour)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.event_minute)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.event_month)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.event_weekname)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.event_year)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.groom_pf_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.groom_pm_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.latitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.longitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name).HasMaxLength(50);

                entity.Property(e => e.order_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_state)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.pg_resultinfo2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.pg_shopid)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.pg_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.poi_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.poi_weddingaddr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.poi_weddinghall)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.poi_x)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.poi_y)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.settle_cancel_date).HasColumnType("datetime");

                entity.Property(e => e.settle_date).HasColumnType("datetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S2_medium>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.Property(e => e.Thumbnail_url)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.company_seq).HasDefaultValueSql("((5000))");

                entity.Property(e => e.contents).HasColumnType("text");

                entity.Property(e => e.isdp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.summary)
                    .HasMaxLength(2500)
                    .IsUnicode(false);

                entity.Property(e => e.temp1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.temp2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.writer)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S2_orderLst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_orderLst");

                entity.Property(e => e.AUTO_CHOAN_STATUS_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_NAME)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Expr2).HasColumnType("smalldatetime");

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_code_str)
                    .HasMaxLength(152)
                    .IsUnicode(false);

                entity.Property(e => e.couponseq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.erp_partcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.etc_name).HasMaxLength(605);

                entity.Property(e => e.fetype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ftype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isBaesongRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCCG)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isChoanRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCompose)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvInsert)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isSpecial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isVar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ishandmade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isinpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.map_trans_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.old_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.order_add_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_add_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.pay_Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sales_Gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.src_CloseCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_compose_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_compose_mod_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_jebon_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_modRequest_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_packing_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printW_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_print_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_send_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trouble_type)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_name).HasMaxLength(200);
            });

            modelBuilder.Entity<S2_orderLstN>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_orderLstN");

                entity.Property(e => e.Auto_Choan_Status_Code)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Auto_Choan_Status_Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_NAME)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Expr2).HasColumnType("smalldatetime");

                entity.Property(e => e.Inflow_Route_Order)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Inflow_Route_Settle)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PrintMethod)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.addition_couponseq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.brand_code)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.cancel_type_comment).HasMaxLength(200);

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_code_str)
                    .HasMaxLength(152)
                    .IsUnicode(false);

                entity.Property(e => e.couponseq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.crnc_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.discount_in_advance)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.discount_in_advance_cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.discount_in_advance_reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.erp_partcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.etc_name).HasMaxLength(605);

                entity.Property(e => e.isBaesongRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCCG)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isChoanRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCompose)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvCharge)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvInsert)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvSpecial)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isLiningJaebon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isSpecial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isVar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ishandmade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isinpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.map_trans_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.old_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.order_add_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_add_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.pay_Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sales_Gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.src_CloseCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_ap_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_compose_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_compose_mod_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_modRequest_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_packing_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printW_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_print_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_send_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trouble_type)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_addr).HasMaxLength(1000);

                entity.Property(e => e.wedd_name).HasMaxLength(200);

                entity.Property(e => e.wedd_phone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_place).HasMaxLength(200);
            });

            modelBuilder.Entity<S2_orderLstN_>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_orderLstN_");

                entity.Property(e => e.Auto_Choan_Status_Code)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Auto_Choan_Status_Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_NAME)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Expr2).HasColumnType("smalldatetime");

                entity.Property(e => e.Inflow_Route_Order)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Inflow_Route_Settle)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PrintMethod)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.addition_couponseq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.brand_code)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.cancel_type_comment).HasMaxLength(200);

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_code_str)
                    .HasMaxLength(152)
                    .IsUnicode(false);

                entity.Property(e => e.couponseq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.crnc_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.discount_in_advance)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.discount_in_advance_cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.discount_in_advance_reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.erp_partcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.etc_name).HasMaxLength(605);

                entity.Property(e => e.isBaesongRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isChoanRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCompose)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvCharge)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvInsert)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvSpecial)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isLiningJaebon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isSpecial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isVar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ishandmade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isinpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.map_trans_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.member_id_)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.old_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.order_add_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_add_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.pay_Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sales_Gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.src_CloseCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_ap_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_compose_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_compose_mod_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_modRequest_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_packing_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printW_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_print_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_send_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trouble_type)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_addr).HasMaxLength(1000);

                entity.Property(e => e.wedd_name).HasMaxLength(200);

                entity.Property(e => e.wedd_phone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_place).HasMaxLength(200);
            });

            modelBuilder.Entity<S2_orderLstN_20201113>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("S2_orderLstN_20201113");

                entity.Property(e => e.Auto_Choan_Status_Code)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Auto_Choan_Status_Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_NAME)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Expr2).HasColumnType("smalldatetime");

                entity.Property(e => e.Inflow_Route_Order)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Inflow_Route_Settle)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PrintMethod)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.addition_couponseq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.brand_code)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.cancel_type_comment).HasMaxLength(200);

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_code_str)
                    .HasMaxLength(152)
                    .IsUnicode(false);

                entity.Property(e => e.couponseq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.crnc_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.discount_in_advance)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.discount_in_advance_cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.discount_in_advance_reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.erp_partcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.etc_name).HasMaxLength(605);

                entity.Property(e => e.isBaesongRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isChoanRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCompose)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvCharge)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvInsert)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvSpecial)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isLiningJaebon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isSpecial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isVar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ishandmade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isinpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.map_trans_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.old_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.order_add_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_add_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.pay_Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sales_Gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.src_CloseCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_ap_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_compose_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_compose_mod_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_modRequest_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_packing_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printW_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_print_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_send_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trouble_type)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_addr).HasMaxLength(1000);

                entity.Property(e => e.wedd_name).HasMaxLength(200);

                entity.Property(e => e.wedd_phone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_place).HasMaxLength(200);
            });

            modelBuilder.Entity<S2_price_code>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_price_code");

                entity.Property(e => e.brand)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.price_code).HasMaxLength(20);
            });

            modelBuilder.Entity<S2_price_tb_code>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_price_tb_code");

                entity.Property(e => e.price_code).HasMaxLength(20);
            });

            modelBuilder.Entity<S2_product>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_product");

                entity.Property(e => e.acc1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.acc1_gr)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.acc2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.acc2_gr)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.brand)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.comment).HasMaxLength(500);

                entity.Property(e => e.discount).HasMaxLength(10);

                entity.Property(e => e.env)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.env_gr)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.folding)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.gubun_1).HasMaxLength(10);

                entity.Property(e => e.gubun_10).HasMaxLength(10);

                entity.Property(e => e.gubun_2).HasMaxLength(10);

                entity.Property(e => e.gubun_3).HasMaxLength(10);

                entity.Property(e => e.gubun_4).HasMaxLength(10);

                entity.Property(e => e.gubun_5).HasMaxLength(10);

                entity.Property(e => e.gubun_6).HasMaxLength(10);

                entity.Property(e => e.gubun_7).HasMaxLength(10);

                entity.Property(e => e.gubun_8).HasMaxLength(10);

                entity.Property(e => e.gubun_9).HasMaxLength(10);

                entity.Property(e => e.inp)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.inp_gr)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.item_code)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.item_info1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.item_info2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.item_map)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.jumun_1)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.jumun_2)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.jumun_3)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.jumun_4).HasMaxLength(200);

                entity.Property(e => e.lining)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.lining_gr)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.new_old)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.option_1).HasMaxLength(10);

                entity.Property(e => e.option_10).HasMaxLength(10);

                entity.Property(e => e.option_11).HasMaxLength(10);

                entity.Property(e => e.option_12).HasMaxLength(10);

                entity.Property(e => e.option_13).HasMaxLength(10);

                entity.Property(e => e.option_2).HasMaxLength(10);

                entity.Property(e => e.option_3).HasMaxLength(10);

                entity.Property(e => e.option_4).HasMaxLength(10);

                entity.Property(e => e.option_5).HasMaxLength(10);

                entity.Property(e => e.option_6).HasMaxLength(10);

                entity.Property(e => e.option_7).HasMaxLength(10);

                entity.Property(e => e.option_8).HasMaxLength(30);

                entity.Property(e => e.option_9).HasMaxLength(10);

                entity.Property(e => e.size)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.style_10).HasMaxLength(10);

                entity.Property(e => e.style_11).HasMaxLength(10);

                entity.Property(e => e.style_12).HasMaxLength(10);

                entity.Property(e => e.style_13).HasMaxLength(10);

                entity.Property(e => e.style_14).HasMaxLength(10);

                entity.Property(e => e.style_15).HasMaxLength(10);

                entity.Property(e => e.style_16).HasMaxLength(10);

                entity.Property(e => e.style_3).HasMaxLength(10);

                entity.Property(e => e.style_4).HasMaxLength(10);

                entity.Property(e => e.style_5).HasMaxLength(10);

                entity.Property(e => e.style_6).HasMaxLength(10);

                entity.Property(e => e.style_7).HasMaxLength(10);

                entity.Property(e => e.style_8).HasMaxLength(10);
            });

            modelBuilder.Entity<S2_search_result>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S2_search_result");

                entity.Property(e => e.gubun).HasMaxLength(20);

                entity.Property(e => e.item_code).HasMaxLength(20);
            });

            modelBuilder.Entity<S4_BHANDS_EVENT_BANNER>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_BHANDS_EVENT_BANNER");

                entity.Property(e => e.BACKGROUND_COLOR)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.BAND_BANNER_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CREATE_DATE).HasColumnType("datetime");

                entity.Property(e => e.CREATE_ID)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.END_DATE).HasColumnType("datetime");

                entity.Property(e => e.EVENT_OPEN_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IMGFILE_PATH)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JEHU_VIEW_DIV)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LINK_TARGET)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LINK_URL)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MD_TITLE)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SEQ).ValueGeneratedOnAdd();

                entity.Property(e => e.START_DATE).HasColumnType("datetime");

                entity.Property(e => e.SUB_TITLE)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.VIEW_DIV)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WING_BANNER_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S4_BestTotalRanking_BHand>(entity =>
            {
                entity.HasKey(e => new { e.Gubun_date, e.Gubun, e.SubGubun, e.RankNo })
                    .HasName("PK__S4_BestT__BC6E615610903D65");

                entity.HasComment("비핸즈 랭킹");

                entity.Property(e => e.Gubun_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Gubun)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubGubun)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RankChangeGubun)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RankChangeNo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_BestTotalRanking_BSmall>(entity =>
            {
                entity.HasKey(e => new { e.Gubun_date, e.Gubun, e.SubGubun, e.RankNo })
                    .HasName("PK__S4_BestT__BC6E61569E801409");

                entity.ToTable("S4_BestTotalRanking_BSmall");

                entity.HasComment("바른손몰 랭킹");

                entity.Property(e => e.Gubun_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Gubun)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubGubun)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RankChangeGubun)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RankChangeNo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_BestTotalRanking_Barunson>(entity =>
            {
                entity.HasKey(e => new { e.Gubun_date, e.Gubun, e.SubGubun, e.RankNo })
                    .HasName("PK__S4_BestT__BC6E615629D0EC7B");

                entity.ToTable("S4_BestTotalRanking_Barunson");

                entity.HasComment("바른손 랭킹");

                entity.Property(e => e.Gubun_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Gubun)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubGubun)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RankChangeGubun)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RankChangeNo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_BestTotalRanking_Premier>(entity =>
            {
                entity.HasKey(e => new { e.Gubun_date, e.Gubun, e.SubGubun, e.RankNo })
                    .HasName("PK__S4_BestT__BC6E61560E72EAC9");

                entity.ToTable("S4_BestTotalRanking_Premier");

                entity.HasComment("프리미어 랭킹");

                entity.Property(e => e.Gubun_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Gubun)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubGubun)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RankChangeGubun)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RankChangeNo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_BestTotalRanking_TheCard>(entity =>
            {
                entity.HasKey(e => new { e.Gubun_date, e.Gubun, e.SubGubun, e.RankNo })
                    .HasName("PK__S4_BestT__BC6E61560BCB8848");

                entity.ToTable("S4_BestTotalRanking_TheCard");

                entity.HasComment("더카드 랭킹");

                entity.Property(e => e.Gubun_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Gubun)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubGubun)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RankChangeGubun)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RankChangeNo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_CART>(entity =>
            {
                entity.HasKey(e => new { e.CART_OWNER_ID, e.CARD_SEQ });

                entity.ToTable("S4_CART");

                entity.HasComment("더카드 장바구니");

                entity.HasIndex(e => e.COMPANY_SEQ, "NCI_S4_CART_CART_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CART_OWNER_ID, "NCI_S4_CART_CART_OWNER_ID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CART_OWNER_ID, e.COMPANY_SEQ }, "NCI_S4_CART_CART_OWNER_ID_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CART_OWNER_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_OPTION)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CART_SEQ).ValueGeneratedOnAdd();

                entity.Property(e => e.Cart_Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.ORDER_TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('O')")
                    .IsFixedLength(true)
                    .HasComment("O:시판주문,S:샘플주문");

                entity.Property(e => e.OWNER_SESSION_ID)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SALES_GUBUN)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')");
            });

            modelBuilder.Entity<S4_COUPON>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("S4_COUPON");

                entity.HasIndex(e => e.coupon_code, "NCI_COUPON_CODE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.company_seq, "NCI_S4_COUPON_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.uid, "NCI_S4_COUPON_UID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.uid, e.company_seq }, "NCI_S4_COUPON_UID_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.COUPON_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('114001')");

                entity.Property(e => e.DEVICE_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.cardbrand)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.coupon_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.coupon_desc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.discount_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('R')")
                    .IsFixedLength(true);

                entity.Property(e => e.dup_ind)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.isJehu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.isRecycle)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.isWeddingCoupon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.isYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.item_type)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W1')");

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_COUPON_ADDON_CARD_SEQ>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("S4_COUPON_ADDON_CARD_SEQ");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_COUPON_GURIM>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_COUPON_GURIM");

                entity.Property(e => e.coupon_code)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_COUPON_WEEKLY_SPECIAL>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("S4_COUPON_WEEKLY_SPECIAL");

                entity.Property(e => e.DOWNLOAD_END_DATE).HasColumnType("datetime");

                entity.Property(e => e.DOWNLOAD_START_DATE).HasColumnType("datetime");

                entity.Property(e => e.LIMIT_DOWNLOAD_QTY).HasDefaultValueSql("((0))");

                entity.Property(e => e.REAL_DOWNLOAD_QTY).HasDefaultValueSql("((0))");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.VIRTUAL_DOWNLOAD_QTY).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<S4_CPC_Static>(entity =>
            {
                entity.HasKey(e => e.S4_CPC_Idx);

                entity.Property(e => e.S4_CPC_Banner_Title).HasMaxLength(50);

                entity.Property(e => e.S4_CPC_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_CPC_Sub_Static>(entity =>
            {
                entity.HasKey(e => e.S4_CPC_Sub_Idx);

                entity.HasIndex(e => new { e.S4_CPC_Sub_Code, e.S4_CPC_Sub_Regdate }, "IX_S4_CPC_Sub_Statics")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.S4_CPC_Sub_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_CS_Member>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_CS_Member__seq");

                entity.ToTable("S4_CS_Member");

                entity.HasComment("cs 팀원 정보");

                entity.Property(e => e.act_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.member_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_CardClickCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_CardClickCount");
            });

            modelBuilder.Entity<S4_CardImage_Str>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_CardImage_Str");

                entity.HasComment("더카드)이미지 설명");

                entity.Property(e => e.card_img_b10_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b11_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b12_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b13_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b14_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b1_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b2_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b3_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b4_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b5_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b6_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b7_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b8_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_b9_str)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_Card_Talk>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_Card_Talk__seq");

                entity.ToTable("S4_Card_Talk");

                entity.HasComment("더카드)카드질문");

                entity.Property(e => e.seq).ValueGeneratedNever();

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.chk_send_mail)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_send_sms)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_Change_intra_id>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_Change_intra_id");

                entity.Property(e => e.password)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.seq).ValueGeneratedOnAdd();

                entity.Property(e => e.user_id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_Coupon_OKC>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S4_Coupon_OKC");

                entity.Property(e => e.ckey)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isAdminYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.isYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.use_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<S4_EVENT_MUSIC_REPLY_PARENT_WEDDING_EVENT>(entity =>
            {
                entity.HasKey(e => e.REPLY_PARENT_WEDDING_EVENT_SEQ);

                entity.ToTable("S4_EVENT_MUSIC_REPLY_PARENT_WEDDING_EVENT");

                entity.Property(e => e.BACK_IMG)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FATHER_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FRONT_IMG)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MOTHER_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PARENT_WEDDING_DAY)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.STATUS_CODE).HasDefaultValueSql("((0))");

                entity.Property(e => e.WEDDING_DAY)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.WEDDING_IMG)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_EventBlog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_EventBlog");

                entity.Property(e => e.Blog_URL)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cafe_URL)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Reg_Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Seq).ValueGeneratedOnAdd();

                entity.Property(e => e.Uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Uname)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.comment)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.isOpen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true);

                entity.Property(e => e.isSelection)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S4_EventBlog_Gifticon>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_EventBlog_Gifticon");

                entity.Property(e => e.blog_url)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.cafe_url)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.gifticon_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.hphone1)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.hphone2)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hphone3)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.isSms)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.msg).HasMaxLength(200);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.seq).ValueGeneratedOnAdd();

                entity.Property(e => e.sms_date).HasColumnType("datetime");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<S4_EventManager>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_EventManager", "invtmng");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EventDescription)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EventKind).HasDefaultValueSql("((1))");

                entity.Property(e => e.EventListImage)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EventName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EventUrl)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ManagerComment)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.seq).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<S4_EventManagerComment>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_EventManagerComment__seq");

                entity.ToTable("S4_EventManagerComment");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.comment).IsRequired();

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.var1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<S4_EventMusic_Reply>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_EventMusic_Reply__seq");

                entity.ToTable("S4_EventMusic_Reply");

                entity.HasComment("이벤트 댓글");

                entity.Property(e => e.comment).HasMaxLength(4000);

                entity.Property(e => e.inflow_route)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.var1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<S4_EventMusic_Str>(entity =>
            {
                entity.HasKey(e => e.EVENT_MUSIC_SEQ);

                entity.ToTable("S4_EventMusic_Str");

                entity.HasComment("댓글 이벤트");

                entity.Property(e => e.duplication_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("이벤트 중복참여 가능여부, Y : 중복참여가능");

                entity.Property(e => e.end_date)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.event_title)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.event_url)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.start_date)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.view_cnt).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<S4_EventMusic_Str_Temp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_EventMusic_Str_Temp");

                entity.Property(e => e.duplication_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.end_date)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.event_title)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.event_url)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("datetime");

                entity.Property(e => e.start_date)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_EventOnliving>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_EventOnliving__seq");

                entity.ToTable("S4_EventOnliving");

                entity.HasComment("더카드 이벤트");

                entity.Property(e => e.gubun)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_EventOnliving_Count>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S4_EventOnliving_Count");

                entity.Property(e => e.gubun)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.item_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_EventOnliving_Reply>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_EventOnliving_Reply__seq");

                entity.ToTable("S4_EventOnliving_Reply");

                entity.Property(e => e.comment)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.hphone)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.isDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_seq)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.vote_card)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_EventPoll>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S4_EventPoll");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_EventPoll_item>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S4_EventPoll_item");

                entity.Property(e => e.item_title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_EventPoll_item_etc>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S4_EventPoll_item_etc");

                entity.Property(e => e.item_comment)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_EventRelay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_EventRelay");

                entity.Property(e => e.give_status)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.relay_uid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_EventRelay_Reply>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_EventRelay_Reply__seq");

                entity.ToTable("S4_EventRelay_Reply");

                entity.Property(e => e.comment)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_Event_Blank_Keyword>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S4_Event_Blank_Keyword");

                entity.HasComment("프리미어 빈칸이벤트");

                entity.Property(e => e.comment)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_Event_Halloween>(entity =>
            {
                entity.HasKey(e => e.event_seq);

                entity.ToTable("S4_Event_Halloween");

                entity.HasComment("할로윈 이벤트");

                entity.Property(e => e.coupon_number)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.coupon_reg_date).HasColumnType("datetime");

                entity.Property(e => e.reg_date).HasColumnType("datetime");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_Event_Raina>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S4_Event_Raina");

                entity.HasComment("3자동의");

                entity.HasIndex(e => new { e.company_seq, e.uid }, "IX_S4_Event_Raina_UID_Company_Seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.uid, "IX_S4_Event_Raina_uid");

                entity.Property(e => e.event_div)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.inflow_route)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_Event_Review>(entity =>
            {
                entity.HasKey(e => e.ER_Idx);

                entity.ToTable("S4_Event_Review");

                entity.HasComment("샘플이용후기");

                entity.HasIndex(e => e.ER_Regdate, "NCI_ER_REGDATE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ER_Type, "NCI_ER_TYPE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ER_View, "NCI_ER_VIEW")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.inflow_route, "NCI_INFLOW_ROUTE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ER_isBest, "NCI_ISBEST")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ER_Company_Seq, "NCI_S4_EVENT_REVIEW_ER_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ER_UserId, "NCI_S4_EVENT_REVIEW_ER_USERID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.ER_UserId, e.ER_Company_Seq }, "NCI_S4_EVENT_REVIEW_ER_USERID_ER_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ER_Company_Seq, "NonClusteredIndex-20150131-181753")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ER_Card_Seq, "NonClusteredIndex-20150131-181859")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ER_Card_Code).HasMaxLength(10);

                entity.Property(e => e.ER_Comm_Div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ER_Comment).HasColumnType("text");

                entity.Property(e => e.ER_Recom_Cnt).HasDefaultValueSql("((0))");

                entity.Property(e => e.ER_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ER_Review_Content).HasColumnType("ntext");

                entity.Property(e => e.ER_Review_Design).HasDefaultValueSql("((5))");

                entity.Property(e => e.ER_Review_Price).HasDefaultValueSql("((5))");

                entity.Property(e => e.ER_Review_Quality).HasDefaultValueSql("((5))");

                entity.Property(e => e.ER_Review_Reply).HasColumnType("ntext");

                entity.Property(e => e.ER_Review_Satisfaction).HasDefaultValueSql("((5))");

                entity.Property(e => e.ER_Review_Star).HasDefaultValueSql("((5))");

                entity.Property(e => e.ER_Review_Title).HasMaxLength(150);

                entity.Property(e => e.ER_Review_Url).HasMaxLength(250);

                entity.Property(e => e.ER_Review_Url2).HasMaxLength(500);

                entity.Property(e => e.ER_Review_Url3).HasMaxLength(500);

                entity.Property(e => e.ER_Review_Url_a).HasMaxLength(250);

                entity.Property(e => e.ER_Review_Url_b).HasMaxLength(250);

                entity.Property(e => e.ER_Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("승인여");

                entity.Property(e => e.ER_UserId)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ER_UserName).HasMaxLength(20);

                entity.Property(e => e.ER_View)
                    .HasDefaultValueSql("((0))")
                    .HasComment("전시/비전시여부");

                entity.Property(e => e.ER_isBest)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.ER_isPhoto)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.device_type)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.inflow_route).HasMaxLength(20);
            });

            modelBuilder.Entity<S4_Event_ReviewBest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_Event_ReviewBest");

                entity.HasComment("이용후기 베스트");

                entity.Property(e => e.best_date)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("");

                entity.Property(e => e.best_seq).HasComment("");

                entity.Property(e => e.comment)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("");

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("");

                entity.HasOne(d => d.best_seqNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.best_seq)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Event_ReviewBest_Comment");
            });

            modelBuilder.Entity<S4_Event_Review_New>(entity =>
            {
                entity.HasKey(e => e.ER_Idx);

                entity.ToTable("S4_Event_Review_New");

                entity.HasComment("더카드 샘플이용후기");

                entity.HasIndex(e => e.ER_Company_Seq, "NCI_S4_EVENTREVIEW_NEW_ER_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ER_UserId, "NCI_S4_EVENTREVIEW_NEW_ER_USERID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.ER_UserId, e.ER_Company_Seq }, "NCI_S4_EVENTREVIEW_NEW_ER_USERID_ER_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ER_Card_Code).HasMaxLength(10);

                entity.Property(e => e.ER_Recom_Cnt).HasDefaultValueSql("((0))");

                entity.Property(e => e.ER_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ER_Review_Content).HasColumnType("ntext");

                entity.Property(e => e.ER_Review_Star).HasDefaultValueSql("((5))");

                entity.Property(e => e.ER_Review_Title).HasColumnType("ntext");

                entity.Property(e => e.ER_Review_Url).HasMaxLength(250);

                entity.Property(e => e.ER_Review_Url_a).HasMaxLength(250);

                entity.Property(e => e.ER_Review_Url_b).HasMaxLength(250);

                entity.Property(e => e.ER_Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.ER_UserId)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ER_UserName).HasMaxLength(20);

                entity.Property(e => e.ER_View).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<S4_Event_Review_Status>(entity =>
            {
                entity.HasKey(e => e.ERA_Idx);

                entity.ToTable("S4_Event_Review_Status");

                entity.HasComment("샘플이용후기 관리자답변");

                entity.HasIndex(e => e.ERA_ER_idx, "NCI_ERA_ER_IDX")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ERA_Status, "NCI_ERA_STATUS")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ERA_Comment).HasColumnType("ntext");

                entity.Property(e => e.ERA_Comment_Cancel).HasColumnType("ntext");

                entity.Property(e => e.ERA_Coupon_Code).HasMaxLength(20);

                entity.Property(e => e.ERA_Coupon_Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("실쿠폰 전송여부 0:미전송, 1:전");

                entity.Property(e => e.ERA_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ERA_Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("글상태 0:승인대기, 1:승인완료, 2:발급취소");

                entity.Property(e => e.ERA_adminID).HasMaxLength(20);
            });

            modelBuilder.Entity<S4_Event_Review_Status_New>(entity =>
            {
                entity.HasKey(e => e.ERA_Idx);

                entity.ToTable("S4_Event_Review_Status_New");

                entity.HasComment("더카드 샘플이용후기 관리자답변");

                entity.Property(e => e.ERA_Comment).HasColumnType("ntext");

                entity.Property(e => e.ERA_Comment_Cancel).HasColumnType("ntext");

                entity.Property(e => e.ERA_Coupon_Code).HasMaxLength(20);

                entity.Property(e => e.ERA_Coupon_Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.ERA_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ERA_Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.ERA_adminID).HasMaxLength(20);
            });

            modelBuilder.Entity<S4_Event_Review_Sub>(entity =>
            {
                entity.HasKey(e => e.ERS_Idx);

                entity.ToTable("S4_Event_Review_Sub");

                entity.Property(e => e.ERS_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ERS_UserId).HasMaxLength(20);
            });

            modelBuilder.Entity<S4_Event_Review_photo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_Event_Review_photo");

                entity.HasComment("샘플후기 사진업로드 관련");

                entity.Property(e => e.S4_Event_Review_PHOTO_SEQ).ValueGeneratedOnAdd();

                entity.Property(e => e.img_name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.upimg_name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_Event_install>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S4_Event_install");

                entity.HasComment("바로가기.즐겨찾기 참여");

                entity.Property(e => e.desktop_cnt).HasDefaultValueSql("((0))");

                entity.Property(e => e.desktop_install)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.favorite_cnt).HasDefaultValueSql("((0))");

                entity.Property(e => e.favorite_install)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.isSelection)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.isUsed)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_Holiday>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("S4_Holiday");

                entity.HasComment("휴일 관리");

                entity.Property(e => e.END_DATE).HasColumnType("datetime");

                entity.Property(e => e.START_DATE).HasColumnType("datetime");
            });

            modelBuilder.Entity<S4_LinkPrice_Log>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_LinkPrice_Log");

                entity.Property(e => e.HHMISS)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.LPINFO)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.YYYYMMDD)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.card_name)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.category_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.user_ip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_LoginIpInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_LoginIpInfo");

                entity.HasComment("로그인 정보");

                entity.HasIndex(e => e.COMPANY_SEQ, "NCI-COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IP, "NCI-IP")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.REGDATE, "NCI-REGDATE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UID, "NCI-UID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SEQ, "PK_CIDX_S4_LoginIpInfo")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AGENT_TYPE).HasMaxLength(400);

                entity.Property(e => e.DEVICE_TYPE_NAME)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IP)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.REFERER_URL)
                    .HasMaxLength(2000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.REGDATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SEQ).ValueGeneratedOnAdd();

                entity.Property(e => e.UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UMAIL)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UNAME).HasMaxLength(50);
            });

            modelBuilder.Entity<S4_MARKETING_AGREEMENT_LOG>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_MARKETING_AGREEMENT_LOG");

                entity.Property(e => e.DEL_DATE).HasColumnType("datetime");

                entity.Property(e => e.MARKETING_TYPE_CODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.SALES_GUBUN)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SEQ)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_MD_Choice>(entity =>
            {
                entity.HasKey(e => e.SEQ)
                    .HasName("PK_CIDX_S4_MD_Choice__seq");

                entity.ToTable("S4_MD_Choice");

                entity.HasComment("기획전 등록 제품");

                entity.Property(e => e.ADMIN_ID)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.BRAND_KIND)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_TEXT)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CUSTOM_IMG)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.END_DATE).HasColumnType("datetime");

                entity.Property(e => e.EVENT_OPEN_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.GRADE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.GUBUN)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IMGFILE_PATH)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JEHU_VIEW_DIV)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.LINK_TARGET)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LINK_URL)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MD_CONTENT)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MD_DESC)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MD_TITLE)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SNS_SHARE_IMAGE_URL)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SNS_SHARE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.SNS_TYPE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.START_DATE).HasColumnType("datetime");

                entity.Property(e => e.VIEW_DIV)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S4_MD_Choice_ProdBanner>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S4_MD_Choice_ProdBanner");

                entity.Property(e => e.banner_status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.banner_title)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.card_code)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.end_date).HasColumnType("datetime");

                entity.Property(e => e.item_type1_yorn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.item_type2_yorn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.mo_banner_image).HasMaxLength(255);

                entity.Property(e => e.mo_content)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("Mobile 배너 설명");

                entity.Property(e => e.mo_move_url).HasMaxLength(255);

                entity.Property(e => e.mo_new_win_yorn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mo_show_yorn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mo_title)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("Mobile 배너 제목");

                entity.Property(e => e.mod_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mod_date).HasColumnType("datetime");

                entity.Property(e => e.pc_banner_image).HasMaxLength(255);

                entity.Property(e => e.pc_content)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("Pc 배너 설명");

                entity.Property(e => e.pc_move_url).HasMaxLength(255);

                entity.Property(e => e.pc_new_win_yorn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pc_show_yorn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pc_title)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("Pc 배너 제목");

                entity.Property(e => e.reg_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("datetime");

                entity.Property(e => e.start_date).HasColumnType("datetime");

                entity.Property(e => e.target_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength(true);

                entity.Property(e => e.use_yorn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S4_MD_Choice_Str>(entity =>
            {
                entity.HasKey(e => e.md_seq)
                    .HasName("PK_CIDX_S4_MD_Choice_Str__md_seq");

                entity.ToTable("S4_MD_Choice_Str");

                entity.HasComment("기획전");

                entity.Property(e => e.cardtitle_yn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.choice_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.customimg_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.link_target)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.link_url)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.md_html).HasColumnType("text");

                entity.Property(e => e.md_image)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.md_sub_text)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.md_text)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_MD_Choice_Str_UsedYN>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_MD_Choice_Str_UsedYN");

                entity.HasComment("메뉴 오픈여부");

                entity.Property(e => e.used_yn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S4_MD_Choice_Str_temp>(entity =>
            {
                entity.HasKey(e => e.md_seq)
                    .HasName("PK__S4_MD_Ch__42D89E12ACE2FFD7");

                entity.ToTable("S4_MD_Choice_Str_temp");

                entity.Property(e => e.md_text)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_MD_Choice_UseCoupon>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S4_MD_Choice_UseCoupon");

                entity.Property(e => e.coupon_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.down_end_dt).HasColumnType("datetime");

                entity.Property(e => e.down_start_dt).HasColumnType("datetime");
            });

            modelBuilder.Entity<S4_MD_Choice_weeklyhotdeal>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S4_MD_Choice_weeklyhotdeal");

                entity.Property(e => e.seq).HasComment("유일값");

                entity.Property(e => e.choice_seq).HasComment("MD 상품 유일값");

                entity.Property(e => e.hotdeal_price).HasComment("핫딜가격");
            });

            modelBuilder.Entity<S4_McardEditInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_McardEditInfo");

                entity.HasComment("예전모바일청첩장");

                entity.Property(e => e.FileName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GirlTel)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.GirlX1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GirlX2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GirlY1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GirlY2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Image_Id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ManTel)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ManX1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ManX2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ManY1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ManY2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MoreX1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MoreX2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MoreY1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MoreY2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TextFieldBgAlpha)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TextFieldColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TextFieldH)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TextFieldText).HasColumnType("text");

                entity.Property(e => e.TextFieldW)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TextFieldX)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TextFieldY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TitleAlpha)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TitleColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TitleX1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TitleY1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_McardImageInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_McardImageInfo");

                entity.HasComment("예전모바일청첩장");

                entity.HasIndex(e => e.Order_Seq, "IDX_S4_McardImageInfo")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.FileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.imagePositionX).HasDefaultValueSql("((0))");

                entity.Property(e => e.imagePositionY).HasDefaultValueSql("((0))");

                entity.Property(e => e.imageRotation).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<S4_MyCoupon>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_MyCoupon");

                entity.HasComment("고객 쿠폰 발급 내역");

                entity.HasIndex(e => e.id, "CI_S4_MYCOUPON")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.coupon_code, "NCI_COUPON_CODE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.company_seq, "NCI_S4_MYCOUPON_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.uid, "NCI_S4_MYCOUPON_UID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.uid, e.company_seq }, "NCI_S4_MYCOUPON_UID_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.coupon_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.end_date).HasColumnType("datetime");

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.isMyYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_MySweetWedding>(entity =>
            {
                entity.HasKey(e => e.order_seq);

                entity.ToTable("S4_MySweetWedding");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.casamia1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.casamia2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clubmed1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clubmed2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.goldendew1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.goldendew2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.regdate).HasColumnType("datetime");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_NICE_Log>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_NICE_Log");

                entity.HasComment("nice 인증 로그");

                entity.Property(e => e.NIC_AUTH).HasMaxLength(50);

                entity.Property(e => e.NIC_BIRTHDATE).HasMaxLength(50);

                entity.Property(e => e.NIC_CI).HasMaxLength(250);

                entity.Property(e => e.NIC_DI).HasMaxLength(250);

                entity.Property(e => e.NIC_GENDER).HasMaxLength(50);

                entity.Property(e => e.NIC_Idx).ValueGeneratedOnAdd();

                entity.Property(e => e.NIC_MSG).HasMaxLength(250);

                entity.Property(e => e.NIC_NAME).HasMaxLength(50);

                entity.Property(e => e.NIC_NTL).HasMaxLength(50);

                entity.Property(e => e.NIC_REQ).HasMaxLength(50);

                entity.Property(e => e.NIC_RES).HasMaxLength(50);

                entity.Property(e => e.NIC_RTN).HasMaxLength(50);

                entity.Property(e => e.NIC_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_NonUserInfo_Sm>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.HasComment("비회원 S M S  여부 관리");

                entity.Property(e => e.inflow_route)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sms_chk)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_PhotoStory>(entity =>
            {
                entity.HasKey(e => new { e.event_num, e.seq })
                    .HasName("PK_S4_PhotoStory_1");

                entity.ToTable("S4_PhotoStory");

                entity.Property(e => e.event_num).HasDefaultValueSql("((1))");

                entity.Property(e => e.seq).ValueGeneratedOnAdd();

                entity.Property(e => e.MOD_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UP_CNT).HasDefaultValueSql("((0))");

                entity.Property(e => e.addr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addr2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.image_url)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.isVisible)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.url)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_PhotoStory_Reply>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_PhotoStory_Reply");

                entity.Property(e => e.event_num).HasDefaultValueSql("((1))");

                entity.Property(e => e.ip)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.regdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<S4_Poll>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_Poll__seq");

                entity.ToTable("S4_Poll");

                entity.HasComment("설문이벤트");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.end_date)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.poll_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.start_date)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.view_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S4_Poll_item>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S4_Poll_item");

                entity.HasComment("설문지 내용");

                entity.Property(e => e.item_etc_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.item_title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_Poll_itemComment>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("S4_Poll_itemComment");

                entity.Property(e => e.comment)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.isOpen)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.uphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_Poll_item_etc>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_Poll_item_etc__seq");

                entity.ToTable("S4_Poll_item_etc");

                entity.Property(e => e.item_comment)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S4_Portfolio>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_Portfolio__seq");

                entity.ToTable("S4_Portfolio");

                entity.HasComment("협찬 Portfolio");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.list_img).HasMaxLength(200);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.section_gubun)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.sub_img).HasMaxLength(200);

                entity.Property(e => e.sub_title).HasColumnType("text");

                entity.Property(e => e.thumb_img).HasMaxLength(200);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.writer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_Premier_Business_Card>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_Premier_Business_Card");

                entity.HasComment("예전모바일청첩장");

                entity.Property(e => e.business_type)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.card_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_text)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.seq).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<S4_Premier_Business_Img>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S4_Premier_Business_Img");

                entity.HasComment("예전 프리미어페이퍼 이미지경로");

                entity.Property(e => e.card_text).HasMaxLength(200);

                entity.Property(e => e.img_big)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.img_thumb)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_Premier_Movie>(entity =>
            {
                entity.HasKey(e => e.order_seq);

                entity.ToTable("S4_Premier_Movie");

                entity.HasIndex(e => e.order_seq, "IX_S4_Premier_Movie")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.etc_comment).HasMaxLength(500);

                entity.Property(e => e.isComplete)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.movie_url).HasMaxLength(200);

                entity.Property(e => e.qrcode_image).HasMaxLength(200);

                entity.Property(e => e.regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.seq).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<S4_Premier_SN>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_Premier_SNS__seq");

                entity.ToTable("S4_Premier_SNS");

                entity.HasComment("프리미어 페이퍼 SNS");

                entity.Property(e => e.best_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.comment)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.contents_url)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sns_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.view_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S4_Ranking_Sort>(entity =>
            {
                entity.HasKey(e => e.ST_SEQ);

                entity.ToTable("S4_Ranking_Sort");

                entity.HasComment("메뉴별 카드 순위 관리");

                entity.HasIndex(e => new { e.ST_SDate, e.ST_Edate }, "IX_S4_Ranking_Sort")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.ST_company_seq, e.ST_tabgubun, e.ST_brand }, "IX_S4_Ranking_Sort_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ST_Card_Code_Arry).HasMaxLength(4000);

                entity.Property(e => e.ST_Code).HasMaxLength(50);

                entity.Property(e => e.ST_Edate).HasColumnType("smalldatetime");

                entity.Property(e => e.ST_Editdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ST_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ST_SDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ST_Title).HasColumnType("ntext");

                entity.Property(e => e.ST_brand).HasMaxLength(50);

                entity.Property(e => e.ST_tabgubun).HasMaxLength(50);
            });

            modelBuilder.Entity<S4_Ranking_Sort_Plu>(entity =>
            {
                entity.HasKey(e => e.ST_SEQ);

                entity.HasComment("더카드) 답례품 순위관리");

                entity.Property(e => e.ST_Card_Code_Arry).HasColumnType("ntext");

                entity.Property(e => e.ST_Code)
                    .HasMaxLength(50)
                    .HasComment("카테고리코");

                entity.Property(e => e.ST_Edate).HasColumnType("smalldatetime");

                entity.Property(e => e.ST_Editdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ST_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ST_SDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ST_Title).HasColumnType("ntext");

                entity.Property(e => e.ST_brand)
                    .HasMaxLength(50)
                    .HasComment("제품브랜드");

                entity.Property(e => e.ST_tabgubun)
                    .HasMaxLength(50)
                    .HasComment("정렬탭코드(추천순, 신상품순 등)");
            });

            modelBuilder.Entity<S4_Ranking_Sort_Table>(entity =>
            {
                entity.HasKey(e => e.RK_Idx);

                entity.ToTable("S4_Ranking_Sort_Table");

                entity.HasIndex(e => e.RK_ST_SEQ, "IX_S4_Ranking_Sort_Table")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.RK_Title).HasMaxLength(100);
            });

            modelBuilder.Entity<S4_Ranking_Sort_Table_Plu>(entity =>
            {
                entity.HasKey(e => e.RK_Idx);

                entity.Property(e => e.RK_Title).HasMaxLength(100);
            });

            modelBuilder.Entity<S4_Review_URL>(entity =>
            {
                entity.HasKey(e => e.Review_Id);

                entity.ToTable("S4_Review_URL");

                entity.Property(e => e.CellPhone)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Company_Seq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Evaluate_Comment).HasColumnType("text");

                entity.Property(e => e.Evaluate_Content).HasColumnType("text");

                entity.Property(e => e.Evaluate_Date).HasColumnType("datetime");

                entity.Property(e => e.Evaluator)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Review_Date).HasColumnType("datetime");

                entity.Property(e => e.Review_Group)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Review_Url)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Review_Url2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Send_Date)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.User_Id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.User_Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.View_Flag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");
            });

            modelBuilder.Entity<S4_ShopHelper>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_ShopHelper__seq");

                entity.ToTable("S4_ShopHelper");

                entity.Property(e => e.comment)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.view_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S4_ShopHelper_Reply>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_ShopHelper_Reply__seq");

                entity.ToTable("S4_ShopHelper_Reply");

                entity.Property(e => e.comment)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_Stock_Alarm>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_Stock_Alarm__seq");

                entity.ToTable("S4_Stock_Alarm");

                entity.HasComment("품절카드 입고 문자 관리");

                entity.Property(e => e.hand_phone1)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.isAlarm_send)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("발송 여부");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");

                entity.Property(e => e.send_date)
                    .HasColumnType("datetime")
                    .HasComment("발송일");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S4_UserOpinion>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_S4_UserOpinion__seq");

                entity.ToTable("S4_UserOpinion");

                entity.Property(e => e.comment)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.hot_line)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.view_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.wr_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<S4_mCardBoard>(entity =>
            {
                entity.HasKey(e => e.Board_Seq);

                entity.ToTable("S4_mCardBoard");

                entity.HasComment("예전모바일방명록");

                entity.HasIndex(e => e.Order_Seq, "IDX_S4_mCardBoard")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Contents).HasColumnType("text");

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S5_Event_Item>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S5_Event_Item");

                entity.Property(e => e.CE_IMG).HasMaxLength(50);

                entity.Property(e => e.CE_Idx).ValueGeneratedOnAdd();

                entity.Property(e => e.CE_Item_CNT).HasDefaultValueSql("((0))");

                entity.Property(e => e.CE_Item_NM).HasMaxLength(50);

                entity.Property(e => e.CE_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S5_Event_Member>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("S5_Event_Member");

                entity.Property(e => e.CEM_Idx).ValueGeneratedOnAdd();

                entity.Property(e => e.CEM_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CEM_UID).HasMaxLength(50);
            });

            modelBuilder.Entity<S5_Happy_Price_Item>(entity =>
            {
                entity.HasKey(e => new { e.hpi_idx, e.hpi_hp_idx });

                entity.ToTable("S5_Happy_Price_Item");

                entity.HasComment("더카드 할인 카드");

                entity.Property(e => e.hpi_idx).ValueGeneratedOnAdd();

                entity.Property(e => e.hpi_limit_cnt).HasDefaultValueSql("((3000))");

                entity.Property(e => e.hpi_regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.hpi_title).HasMaxLength(200);
            });

            modelBuilder.Entity<S5_Happy_Price_Main>(entity =>
            {
                entity.HasKey(e => e.hp_idx);

                entity.ToTable("S5_Happy_Price_Main");

                entity.HasComment("더카드 할인 회차 관리");

                entity.Property(e => e.hp_Edate).HasColumnType("smalldatetime");

                entity.Property(e => e.hp_Sdate).HasColumnType("smalldatetime");

                entity.Property(e => e.hp_regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.hp_title).HasMaxLength(200);
            });

            modelBuilder.Entity<S5_Plus_Friend>(entity =>
            {
                entity.HasKey(e => e.PF_Idx);

                entity.HasComment("이벤트 더카드 친구소개");

                entity.HasIndex(e => new { e.PF_UID, e.PF_FUID }, "IX_S5_Plus_Friends")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PF_Coupon_Status)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.PF_Coupon_Status_F)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.PF_FUID).HasMaxLength(50);

                entity.Property(e => e.PF_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PF_Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.PF_UID).HasMaxLength(50);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S5_Plus_Friends_UID>(entity =>
            {
                entity.HasKey(e => e.P_Idx);

                entity.ToTable("S5_Plus_Friends_UID");

                entity.HasIndex(e => e.P_UID, "IX_S5_Plus_Friends_UID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.P_Coupon_Regdate).HasColumnType("datetime");

                entity.Property(e => e.P_Coupon_Status)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.P_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.P_UID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S5_Supporters_User>(entity =>
            {
                entity.HasKey(e => e.SP_Idx);

                entity.ToTable("S5_Supporters_User");

                entity.HasComment("더카드)서포터즈 이벤트");

                entity.HasIndex(e => e.SP_Company_seq, "NCI_S5_SUPPORTERS_USER_SP_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SP_UserID, "NCI_S5_SUPPORTERS_USER_SP_USERID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SP_Company_seq, "NCI_S5_SUPPORTERS_USER_SP_USERID_SP_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SP_Auth_Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SP_Best)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("N:미승인, Y:베스트승인");

                entity.Property(e => e.SP_Comment).HasMaxLength(1000);

                entity.Property(e => e.SP_Contents)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.SP_Level).HasComment("0:미승인, 1:미, 2:선, 3:진");

                entity.Property(e => e.SP_Regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SP_Status).HasComment("0:미승인, 1:승인");

                entity.Property(e => e.SP_Title)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SP_URL).HasMaxLength(500);

                entity.Property(e => e.SP_UserID)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<S5_TodayViewItem>(entity =>
            {
                entity.HasKey(e => new { e.uid, e.view_date, e.card_seq });

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.view_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.seq).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<S5_nmCardBoard>(entity =>
            {
                entity.HasKey(e => e.Board_Seq);

                entity.ToTable("S5_nmCardBoard");

                entity.HasComment("예전모바일청첩장");

                entity.HasIndex(e => e.Order_Seq, "NCI_ORDER_SEQ")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Contents).HasColumnType("text");

                entity.Property(e => e.HTTP_USER_AGENT)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IP)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S5_nmCardImageInfo>(entity =>
            {
                entity.HasKey(e => new { e.Order_Seq, e.FileType, e.FileIndex })
                    .HasName("PK_ORDER_SEQ_FILETYPE_FILEINDEX");

                entity.ToTable("S5_nmCardImageInfo");

                entity.HasComment("예전모바일청첩장");

                entity.Property(e => e.FileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrgFileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<S5_nmCardOrder>(entity =>
            {
                entity.HasKey(e => e.Order_Seq)
                    .HasName("PK_S5_nmCardOrder_1");

                entity.ToTable("S5_nmCardOrder");

                entity.HasComment("예전모바일초대장");

                entity.HasIndex(e => e.Addr, "NCI_ADDR")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Addr, e.Company_Seq }, "NCI_ADDR_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Uid, e.Company_Seq }, "NCI_S5_NMCARDORDER_UID_COMPANY_SEQ")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Addr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Qrcode)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WeddingAddr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WeddingHall)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.bride_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.bride_name_eng)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.bride_name_kor)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.event_Day)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.event_ampm)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.event_hour)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.event_minute)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.event_month)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.event_weekname)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.event_year)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.greeting_content).HasMaxLength(4000);

                entity.Property(e => e.groom_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.groom_name_eng)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.groom_name_kor)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.latitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.longitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.lunar_yorn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.map_type)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_state)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.show_hash)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_place)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<S5_nmCardShowInfo>(entity =>
            {
                entity.HasKey(e => new { e.Order_Seq, e.ShowIndex });

                entity.ToTable("S5_nmCardShowInfo");

                entity.Property(e => e.ShowIndex).ValueGeneratedOnAdd();

                entity.Property(e => e.DelFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.ModDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PurchasedStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ShakrInstanceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShowHash)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShowHdDownUrl)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShowSdDownUrl)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShowViewAliasHdUrl)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShowViewAliasSdUrl)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShowViewAliasUrl)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShowViewUrl)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Skin_img).HasMaxLength(200);

                entity.Property(e => e.StyleSlug)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SAMPLE_DELIVERY_PRICE_INFO>(entity =>
            {
                entity.HasKey(e => e.SALES_GUBUN);

                entity.ToTable("SAMPLE_DELIVERY_PRICE_INFO");

                entity.HasComment("샘플 배송비 관리");

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(2)
                    .HasComment("사이트구분");

                entity.Property(e => e.CREATED_TMSTMP)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CREATED_USERID).HasMaxLength(50);

                entity.Property(e => e.DELIVERY_PRICE).HasComment("첫 주문 이후 배송비");

                entity.Property(e => e.FIRST_DELIVERY_PRICE).HasComment("첫 주문 배송비");
            });

            modelBuilder.Entity<SAMPLE_DIRECTION_INFO>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("SAMPLE_DIRECTION_INFO");

                entity.Property(e => e.BENEFIT_CONTENT1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BENEFIT_CONTENT2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BENEFIT_CONTENT3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BENEFIT_CONTENT4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BENEFIT_CONTENT5)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BENEFIT_CONTENT6)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BENEFIT_TITLE)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_CONTENT)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.REGIST_DATE).HasColumnType("datetime");

                entity.Property(e => e.REGIST_UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SITE_GUBUN)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SITE_IMAGE_URL)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.SITE_THUMB_IMAGE_URL)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATE_DATE).HasColumnType("datetime");

                entity.Property(e => e.UPDATE_UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SAMPLE_LIKE_CHECK>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SAMPLE_LIKE_CHECK");

                entity.Property(e => e.LIKE_IP)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.LIKE_SEQ).ValueGeneratedOnAdd();

                entity.Property(e => e.LIKE_UID)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SALES_GUBUN)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SAMSUNG_BRANCH>(entity =>
            {
                entity.HasKey(e => new { e.branch_code, e.status });

                entity.ToTable("SAMSUNG_BRANCH");

                entity.Property(e => e.branch_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.branch_addr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.branch_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.branch_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.branch_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SAMSUNG_DAILY_DISCOUNT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SAMSUNG_DAILY_DISCOUNT");

                entity.Property(e => e.chk_smembership)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership_leave)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.conninfo)
                    .HasMaxLength(88)
                    .IsUnicode(false);

                entity.Property(e => e.dacom_tid)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.discount_in_advance)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.discount_in_advance_cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.discount_in_advance_reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.pg_shopid)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.pg_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date_s).HasColumnType("smalldatetime");

                entity.Property(e => e.sales_Gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.seq).ValueGeneratedOnAdd();

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.smembership_leave_date).HasColumnType("datetime");

                entity.Property(e => e.smembership_reg_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<SAMSUNG_DAILY_INFO>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("SAMSUNG_DAILY_INFO");

                entity.HasComment("삼성전자동의 전송 데이터");

                entity.Property(e => e.Birthdate)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ConnInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.c_addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.c_address)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.c_zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.c_zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.chk_DM)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.chk_TM)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.chk_aoi)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.chk_mailservice)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.chk_smembership)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.chk_sms)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.chk_tpa)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.p_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.phone1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.reg_date_s).HasColumnType("smalldatetime");

                entity.Property(e => e.secession)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.site_div)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.smembership_leave_date).HasColumnType("smalldatetime");

                entity.Property(e => e.smembership_reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.ugubun)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_day)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_month)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_pgubun)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("웨딩장소");

                entity.Property(e => e.wedd_year)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SAMSUNG_DELETE_MEMBER>(entity =>
            {
                entity.HasKey(e => new { e.CONNINFO, e.UID });

                entity.ToTable("SAMSUNG_DELETE_MEMBER");

                entity.HasComment("삼성전자동의 취소 데이터");

                entity.Property(e => e.CONNINFO)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UID)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DELETE_CUCKOO)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DELETE_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DELETE_LG)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DELETE_MARKETING)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.DELETE_SAMSUNG)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.DELETE_UID)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.UNAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SAMSUNG_DELIVERY>(entity =>
            {
                entity.ToTable("SAMSUNG_DELIVERY");

                entity.Property(e => e.branch_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.greeting_type).HasDefaultValueSql("(1)");

                entity.Property(e => e.recv_addr1)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.recv_addr2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.recv_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.recv_phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.recv_zip)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.send_Addr1)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.send_addr2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.send_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.send_zip)
                    .HasMaxLength(7)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SC_LOG>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SC_LOG", "invtmng");

                entity.HasIndex(e => new { e.TR_SENDDATE, e.TR_SENDSTAT }, "SC_LOG_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.TR_ID, e.TR_RSLTSTAT }, "SC_LOG_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TR_CALLBACK)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ETC1)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ETC2)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ETC3)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ETC4)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ETC5)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ETC6)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ID)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TR_MODIFIED).HasColumnType("datetime");

                entity.Property(e => e.TR_MSG)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_MSGTYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TR_NET)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TR_PHONE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TR_REALSENDDATE).HasColumnType("datetime");

                entity.Property(e => e.TR_RSLTDATE).HasColumnType("datetime");

                entity.Property(e => e.TR_RSLTSTAT)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TR_SENDDATE).HasColumnType("datetime");

                entity.Property(e => e.TR_SENDSTAT)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SC_TRAN>(entity =>
            {
                entity.HasKey(e => e.TR_NUM)
                    .HasName("PK__SC_TRAN__4012D150");

                entity.ToTable("SC_TRAN", "invtmng");

                entity.HasIndex(e => e.TR_NUM, "SC_TRAN_0")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.TR_SENDDATE, e.TR_SENDSTAT }, "SC_TRAN_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.TR_ID, e.TR_RSLTSTAT }, "SC_TRAN_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TR_MODIFIED, "SC_TRAN_3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TR_CALLBACK)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ETC1)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ETC2)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ETC3)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ETC4)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ETC5)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ETC6)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_ID)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TR_MODIFIED).HasColumnType("datetime");

                entity.Property(e => e.TR_MSG)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TR_MSGTYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.TR_NET)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TR_PHONE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TR_REALSENDDATE).HasColumnType("datetime");

                entity.Property(e => e.TR_RSLTDATE).HasColumnType("datetime");

                entity.Property(e => e.TR_RSLTSTAT)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.TR_SENDDATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TR_SENDSTAT)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");
            });

            modelBuilder.Entity<SEASON_MEMBER>(entity =>
            {
                entity.HasKey(e => e.uid)
                    .HasName("PK_CIDX_SEASON_UserInfo__uid");

                entity.ToTable("SEASON_MEMBER");

                entity.Property(e => e.uid)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.chk_mailservice)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.chk_sms)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.hand_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.mod_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.out_date).HasColumnType("smalldatetime");

                entity.Property(e => e.out_yorn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.pwd)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.site_div)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SESSION_GENERATER>(entity =>
            {
                entity.HasKey(e => e.TCNT)
                    .HasName("PK__SESSION_GENERATE__40F9A68C");

                entity.ToTable("SESSION_GENERATER");

                entity.Property(e => e.TCNT).ValueGeneratedNever();
            });

            modelBuilder.Entity<SH_Notice>(entity =>
            {
                entity.HasKey(e => e.N_num);

                entity.ToTable("SH_Notice");

                entity.HasComment("old) 방명록");

                entity.HasIndex(e => e.N_id, "nind_N_id")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.N_insdate, "nind_N_insdate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.N_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.N_insdate).HasColumnType("datetime");

                entity.Property(e => e.N_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.N_passwd)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.N_text)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.N_title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.org_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.view_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SMARTAD_CONTACT_U>(entity =>
            {
                entity.HasKey(e => e.SEQ);

                entity.ToTable("SMARTAD_CONTACT_US");

                entity.HasComment("SmartAD 1:1문의");

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.USER_CONTENTS).HasMaxLength(2000);

                entity.Property(e => e.USER_EMAIL).HasMaxLength(100);

                entity.Property(e => e.USER_HPHONE).HasMaxLength(50);

                entity.Property(e => e.USER_NAME).HasMaxLength(50);
            });

            modelBuilder.Entity<SMARTAD_COUPON_MST>(entity =>
            {
                entity.HasKey(e => e.SMARTAD_COUPON_MST_SEQ);

                entity.ToTable("SMARTAD_COUPON_MST");

                entity.HasComment("SmartAD 쿠폰정보");

                entity.Property(e => e.COUPON_CD)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DISCOUNT_PRICE).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DISCOUNT_TYPE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.END_DATE).HasColumnType("datetime");

                entity.Property(e => e.PROMOTION_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.START_DATE).HasColumnType("datetime");

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SMARTAD_COUPON_SUB>(entity =>
            {
                entity.HasKey(e => e.SMARTAD_COUPON_SUB_SEQ);

                entity.ToTable("SMARTAD_COUPON_SUB");

                entity.Property(e => e.COUPON_CODE)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ISSUE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.USER_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SMARTAD_EVENT_INFO>(entity =>
            {
                entity.HasKey(e => e.EVENT_SEQ);

                entity.ToTable("SMARTAD_EVENT_INFO");

                entity.HasComment("SmartAD 지문방명록 이벤트");

                entity.Property(e => e.CANCEL_DATE).HasColumnType("datetime");

                entity.Property(e => e.CANCEL_ID).HasMaxLength(50);

                entity.Property(e => e.CHOAN_DATE).HasColumnType("datetime");

                entity.Property(e => e.CONFIRM_DATE).HasColumnType("datetime");

                entity.Property(e => e.COUPON_CODE)
                    .HasMaxLength(30)
                    .IsFixedLength(true);

                entity.Property(e => e.DELIVERY_CD).HasMaxLength(50);

                entity.Property(e => e.DELIVERY_DATE).HasColumnType("datetime");

                entity.Property(e => e.DELIVERY_NUM).HasMaxLength(50);

                entity.Property(e => e.DEL_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EVENT_TYPE).HasMaxLength(20);

                entity.Property(e => e.FRAME_TYPE).HasMaxLength(50);

                entity.Property(e => e.IMG_URL).HasMaxLength(2000);

                entity.Property(e => e.IMG_URL2).HasMaxLength(2000);

                entity.Property(e => e.IMG_URL3).HasMaxLength(2000);

                entity.Property(e => e.MEMO).HasMaxLength(2000);

                entity.Property(e => e.MODIFY_DATE).HasColumnType("datetime");

                entity.Property(e => e.PARAM1).HasMaxLength(1000);

                entity.Property(e => e.PARAM2).HasMaxLength(1000);

                entity.Property(e => e.PARAM3).HasMaxLength(1000);

                entity.Property(e => e.PARAM4).HasMaxLength(1000);

                entity.Property(e => e.PARAM5).HasMaxLength(1000);

                entity.Property(e => e.PARAM6).HasMaxLength(1000);

                entity.Property(e => e.PARAM7).HasMaxLength(1000);

                entity.Property(e => e.PRINT_DATE).HasColumnType("datetime");

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.STATUS_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UPD_DATE).HasColumnType("datetime");

                entity.Property(e => e.UPD_ID).HasMaxLength(50);

                entity.Property(e => e.USER_EMAIL).HasMaxLength(100);

                entity.Property(e => e.USER_HPHONE).HasMaxLength(100);

                entity.Property(e => e.USER_NAME).HasMaxLength(50);

                entity.Property(e => e.USER_PHONE).HasMaxLength(100);

                entity.Property(e => e.USER_PWD).HasMaxLength(50);

                entity.Property(e => e.WEDD_DATE).HasColumnType("datetime");
            });

            modelBuilder.Entity<SMARTAD_EVENT_REQUEST>(entity =>
            {
                entity.HasKey(e => e.REQUEST_SEQ);

                entity.ToTable("SMARTAD_EVENT_REQUEST");

                entity.HasComment("SmartAD 지문방명록 이벤트 수정요청(초안)");

                entity.Property(e => e.REQUEST_DATE).HasColumnType("datetime");

                entity.Property(e => e.REQUEST_MSG).HasMaxLength(2000);
            });

            modelBuilder.Entity<SMARTAD_MYCOUPON>(entity =>
            {
                entity.HasKey(e => e.MYCOUPON_SEQ);

                entity.ToTable("SMARTAD_MYCOUPON");

                entity.HasComment("SmartAD 받은쿠폰");

                entity.Property(e => e.COUPON_CD).HasMaxLength(50);

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.UID).HasMaxLength(50);

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SNS_CLICK>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SNS_CLICK");

                entity.Property(e => e.device)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.user_ip)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.visit_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.visit_dt)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(CONVERT([varchar],getdate(),(112)))");
            });

            modelBuilder.Entity<SQM_QA_TBL>(entity =>
            {
                entity.HasKey(e => e.QA_IID)
                    .IsClustered(false);

                entity.ToTable("SQM_QA_TBL");

                entity.HasIndex(e => e.COMPANY_SEQ, "clu_company_seq")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.A_CONTENT)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.A_DT).HasColumnType("smalldatetime");

                entity.Property(e => e.A_ID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.A_STAT)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_SEQ).HasDefaultValueSql("((1))");

                entity.Property(e => e.E_MAIL)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_NAME)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Q_CONTENT)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.Q_KIND)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Q_TITLE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.REG_DT)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TEL_NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.a_research1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.a_research2)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.a_research_date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEmail)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.isSMS)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isSecret)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.order_tbl)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.user_upfile1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.user_upfile2)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SS_MMS_SEND_20190910>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SS_MMS_SEND_20190910");

                entity.Property(e => e.PHONE_RECEIVER)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<STORE_BARUNSON_ORDER_MATCHING>(entity =>
            {
                entity.HasKey(e => e.Uid);

                entity.ToTable("STORE_BARUNSON_ORDER_MATCHING");

                entity.Property(e => e.Uid).ValueGeneratedNever();

                entity.Property(e => e.Last_Matching_Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Reg_Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<STORE_ORDER_DATE_SEND_LOG>(entity =>
            {
                entity.HasKey(e => e.Seq);

                entity.ToTable("STORE_ORDER_DATE_SEND_LOG");

                entity.Property(e => e.Auto_Yn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IP)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Member_ID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RefererURL)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reg_Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.User_Agent)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SampleBook>(entity =>
            {
                entity.HasKey(e => e.SampleBook_ID)
                    .HasName("PK_SampleBook_1");

                entity.ToTable("SampleBook");

                entity.Property(e => e.SampleBook_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Admin_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Admin_Memo)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Delivery_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Regist_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.SampleBook_Condition)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Seq).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SampleBook_History>(entity =>
            {
                entity.HasKey(e => new { e.Seq, e.SampleBook_ID })
                    .HasName("PK_SampleBook_History_1");

                entity.ToTable("SampleBook_History");

                entity.Property(e => e.Seq).ValueGeneratedOnAdd();

                entity.Property(e => e.SampleBook_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Admin_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Admin_Memo)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Regist_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.SampleBook_Condition)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Sample_Addon>(entity =>
            {
                entity.HasKey(e => e.Sample_Addon_Seq)
                    .HasName("PK_SAMPLE_ADDON");

                entity.ToTable("Sample_Addon");

                entity.Property(e => e.Card_Code)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Promotion_Month)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Promotion_Year)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Reg_Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Sales_Gubun)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Use_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Season_estimate>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("Season_estimate");

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("N:연하장, C:크리스마스");

                entity.Property(e => e.charge_email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.charge_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.charge_position)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.color_opt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("N:안함, C:속지만, E:봉투만, A:모두");

                entity.Property(e => e.com_address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.com_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.com_place)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.etc_message)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.hphone)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.isembo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("0:신청안함, 1:신청함");

                entity.Property(e => e.isenvinsert)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("0:신청안함, 1:신청함");

                entity.Property(e => e.ishandmade)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("0:신청안함, 1:신청함");

                entity.Property(e => e.isinpaper)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("0:신청안함, 1:신청함");

                entity.Property(e => e.isprintadd)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("0:신청안함, 1:신청함");

                entity.Property(e => e.osheet_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("E:완제품카드, P:주문카드, D:맞춤제작");

                entity.Property(e => e.phone)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.phone_extension)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.rdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reply_yn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("");

                entity.Property(e => e.upload_file)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sheet1_20200520>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sheet1_20200520");

                entity.Property(e => e.ptitle).HasMaxLength(50);

                entity.Property(e => e.담당자).HasMaxLength(255);

                entity.Property(e => e.주문자).HasMaxLength(255);

                entity.Property(e => e.차수).HasMaxLength(255);

                entity.Property(e => e.카드).HasMaxLength(255);
            });

            modelBuilder.Entity<SmartADNotice>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_SmartADNotice__seq");

                entity.ToTable("SmartADNotice");

                entity.HasComment("SmartAD 공지사항");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.display_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.end_date).HasColumnType("datetime");

                entity.Property(e => e.notice_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.start_date).HasColumnType("datetime");

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.viewcnt).HasDefaultValueSql("((0))");

                entity.Property(e => e.writer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SmartAD_Partner>(entity =>
            {
                entity.HasKey(e => e.PARTNER_SEQ);

                entity.ToTable("SmartAD_Partner");

                entity.HasComment("SmartAD 광고업체");

                entity.Property(e => e.PARTNER_ADMIN_DEPARTMENT).HasMaxLength(100);

                entity.Property(e => e.PARTNER_ADMIN_NAME).HasMaxLength(25);

                entity.Property(e => e.PARTNER_ADMIN_POSITION).HasMaxLength(100);

                entity.Property(e => e.PARTNER_CELLPHONE).HasMaxLength(25);

                entity.Property(e => e.PARTNER_CONTENT).HasMaxLength(2000);

                entity.Property(e => e.PARTNER_EMAIL).HasMaxLength(100);

                entity.Property(e => e.PARTNER_HOMEPAGE).HasMaxLength(200);

                entity.Property(e => e.PARTNER_ID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PARTNER_NAME).HasMaxLength(25);

                entity.Property(e => e.PARTNER_PASSWORD)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.PARTNER_TELEPHONE).HasMaxLength(25);

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.UPD_DATE).HasColumnType("datetime");

                entity.Property(e => e.UPD_ID).HasMaxLength(100);

                entity.Property(e => e.USE_ADMIN_ID).HasMaxLength(100);

                entity.Property(e => e.USE_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SmartAD_Partner_AD>(entity =>
            {
                entity.HasKey(e => e.AD_SEQ);

                entity.ToTable("SmartAD_Partner_AD");

                entity.HasComment("SmartAD 광고업체가 등록한 광고정보");

                entity.Property(e => e.AD_TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CAUTION_MSG).HasMaxLength(2000);

                entity.Property(e => e.CONTENT1).HasMaxLength(50);

                entity.Property(e => e.CONTENT2).HasMaxLength(50);

                entity.Property(e => e.CONTENT3).HasMaxLength(2000);

                entity.Property(e => e.COUPON_CODE).HasMaxLength(20);

                entity.Property(e => e.DIRECTION_MSG).HasMaxLength(2000);

                entity.Property(e => e.DISPLAY_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.END_DATE).HasColumnType("datetime");

                entity.Property(e => e.PROMOTION_TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.START_DATE).HasColumnType("datetime");

                entity.Property(e => e.UPD_DATE).HasColumnType("datetime");

                entity.Property(e => e.UPD_ID).HasMaxLength(100);
            });

            modelBuilder.Entity<SmartAD_Partner_AD_IMAGE>(entity =>
            {
                entity.HasKey(e => e.IMAGE_SEQ);

                entity.ToTable("SmartAD_Partner_AD_IMAGE");

                entity.HasComment("SmartAD 광고업체가 등록한 광고이미지");

                entity.Property(e => e.IMAGE_TYPE)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.IMG_URL).HasMaxLength(3000);

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.UPD_DATE).HasColumnType("datetime");

                entity.Property(e => e.UPD_ID).HasMaxLength(100);
            });

            modelBuilder.Entity<StdMonth>(entity =>
            {
                entity.HasKey(e => new { e.yyyymm, e.LangID })
                    .HasName("PK__StdMonth__976094E2318EF298");

                entity.ToTable("StdMonth");

                entity.Property(e => e.yyyymm)
                    .HasMaxLength(6)
                    .IsFixedLength(true);

                entity.Property(e => e.LangID)
                    .HasMaxLength(3)
                    .IsFixedLength(true);

                entity.Property(e => e.MonthEnd)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsFixedLength(true);

                entity.Property(e => e.MonthStart)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsFixedLength(true);

                entity.Property(e => e.mmName)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.yyyymmName)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.yyyymmS)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsFixedLength(true);

                entity.Property(e => e.yyyyq)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SurveyAnswer>(entity =>
            {
                entity.HasKey(e => new { e.SurveyNo, e.QuestionNo, e.AnswerNo });

                entity.ToTable("SurveyAnswer");

                entity.HasComment("설문이벤트 답변");

                entity.Property(e => e.AnswerText)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RegDT).HasColumnType("datetime");

                entity.Property(e => e.UseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SurveyMaster>(entity =>
            {
                entity.HasKey(e => e.SurveyNo);

                entity.ToTable("SurveyMaster");

                entity.HasComment("더카드)설문 이벤트");

                entity.Property(e => e.Comment)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FromDT).HasColumnType("datetime");

                entity.Property(e => e.RegDT).HasColumnType("datetime");

                entity.Property(e => e.SalesGubun)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SendMessage)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ToDT).HasColumnType("datetime");

                entity.Property(e => e.UseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SurveyQuestion>(entity =>
            {
                entity.HasKey(e => new { e.SurveyNo, e.QuestionNo });

                entity.ToTable("SurveyQuestion");

                entity.HasComment("설문이벤트 질문");

                entity.Property(e => e.QuestionText)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RegDT).HasColumnType("datetime");

                entity.Property(e => e.UseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SurveyResponse>(entity =>
            {
                entity.HasKey(e => new { e.SurveyNo, e.QuestionNo, e.ResponseNo });

                entity.ToTable("SurveyResponse");

                entity.HasComment("설문이벤트 답변참여");

                entity.Property(e => e.ResponseNo).ValueGeneratedOnAdd();

                entity.Property(e => e.Comment)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.MemberID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegDT).HasColumnType("datetime");
            });

            modelBuilder.Entity<TB_Holiday>(entity =>
            {
                entity.ToTable("TB_Holiday");

                entity.HasComment("연휴관리");

                entity.Property(e => e.add_d).HasDefaultValueSql("(0)");

                entity.Property(e => e.hday)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.hmonth)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.hyear)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.msg)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_PB_COVER>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_PB_COVERS");

                entity.Property(e => e.CATEGORY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.COVERS_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.COVER_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.E_SAMLE_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.E_THUMB_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.E_XML_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PAGES)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PE_YN)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_TYPE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.P_SAMLE_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.P_THUMB_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.P_XML_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SAMPLE_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SIZE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SKIN_MAPSET)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.THUMB_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XML_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_PB_EPILOGUE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_PB_EPILOGUE");

                entity.Property(e => e.CATEGORY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_TYPE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SAMLE_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SIZE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SKIN_MAPSET)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.THUMB_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XML_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_PB_OASI>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_PB_OASIS");

                entity.Property(e => e.COATING_YN)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.COVER_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.COVER_SOURCE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OASIS_IDX)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PAGES)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_TYPE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SIZE)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_PB_PRODUCT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_PB_PRODUCT");

                entity.Property(e => e.CT_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IMAGE_URL)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MAKE_COMCODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_MAPSET)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_ORDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_TYPE)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_PB_PROLOGUE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_PB_PROLOGUE");

                entity.Property(e => e.CATEGORY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_TYPE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SAMLE_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SIZE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SKIN_MAPSET)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.THUMB_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XML_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_PB_SIZE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_PB_SIZE");

                entity.Property(e => e.PAGES)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_PRICE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_TYPE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SIZE)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_PB_SKIN>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_PB_SKIN");

                entity.Property(e => e.CATEGORY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_TYPE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SAMLE_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SIZE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SKIN_MAPSET)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.THUMB_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XML_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_PRODUCT_SIZE>(entity =>
            {
                entity.HasKey(e => e.PS_IDX);

                entity.ToTable("TB_PRODUCT_SIZE", "invtmng");

                entity.Property(e => e.COVER_GROUP)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.COVER_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ETC)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IMAGE_INFO)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.INFOMATION)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PAGE_NUMBER)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PAPER_CODE)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SIZE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WH)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TB_RESP_ACCOUNT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_ACCOUNT");

                entity.Property(e => e.MERT_ID)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.amount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.bank_code)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_BRANCH>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_BRANCH");

                entity.Property(e => e.amount)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.bank_code)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_CARD>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_CARD");

                entity.Property(e => e.amount3)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_CARD_BMC>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_CARD_BMC");

                entity.Property(e => e.amount)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_ETC>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_ETC");

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_EWED>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_EWED");

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_EWEDD_BMC>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_EWEDD_BMC");

                entity.Property(e => e.MERT_ID)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.amount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.bank_code)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_EWEDD_CBR>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_EWEDD_CBR");

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_LOG>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_LOG");

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.order_id)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_PHOTOBOOK_BMC>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_PHOTOBOOK_BMC");

                entity.Property(e => e.MERT_ID)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.amount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.bank_code)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.result_msg)
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_PHOTOBOOK_CBR>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_PHOTOBOOK_CBR");

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.regdate).HasColumnType("smalldatetime");

                entity.Property(e => e.result_msg)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_SAMPLE>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_SAMPLE");

                entity.Property(e => e.amount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.bank_code)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_SAMPLE_BMC>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_SAMPLE_BMC");

                entity.Property(e => e.MERT_ID)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.amount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.bank_code)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_SAMPLE_CA>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_SAMPLE_CAS");

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_SAMPLE_CBR>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_SAMPLE_CBR");

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_SEASON_BMC>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_SEASON_BMC");

                entity.Property(e => e.MERT_ID)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.amount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.result_msg)
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_SEASON_CBR>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_SEASON_CBR");

                entity.Property(e => e.MERT_ID)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.amount3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.result_msg)
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_WEDD>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_WEDD");

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_WEDD_BMC>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_WEDD_BMC");

                entity.Property(e => e.MERT_ID)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.amount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.bank_code)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.result_msg)
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_WEDD_CA>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_WEDD_CAS");

                entity.Property(e => e.amount3)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TB_RESP_WEDD_CBR>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TB_RESP_WEDD_CBR");

                entity.Property(e => e.cflag)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mert_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_seq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.regdate).HasColumnType("smalldatetime");

                entity.Property(e => e.result_msg)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<THE_MEMBER_OUT>(entity =>
            {
                entity.HasKey(e => new { e.uid, e.sales_gubun });

                entity.ToTable("THE_MEMBER_OUT");

                entity.Property(e => e.uid)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.ans1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans4)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans5)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans6)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans7)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans_detail)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(getdate())")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<THE_ZZIM>(entity =>
            {
                entity.HasKey(e => new { e.member_id, e.zzim_type, e.zzim_id, e.company_seq });

                entity.ToTable("THE_ZZIM");

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.zzim_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("G:인사말,M:약도");

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('T')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TODAY_PRINTJOB>(entity =>
            {
                entity.HasKey(e => new { e.pdate, e.pseq, e.pid });

                entity.ToTable("TODAY_PRINTJOB");

                entity.Property(e => e.pdate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.printer_id)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ptype)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength(true);

                entity.Property(e => e.src_pdate)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TU_Bestcard>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_TU_Bestcard__seq");

                entity.ToTable("TU_Bestcard");

                entity.Property(e => e.best_view)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.detail_view)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.rdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TU_Member>(entity =>
            {
                entity.HasKey(e => e.uid);

                entity.ToTable("TU_Member");

                entity.HasIndex(e => e.jumin, "nind_jumin")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.uid)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addressCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.birth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.bride_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.chk_ad)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_event)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mailservice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_penpal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.groom_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.isLunar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.job)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.login_date).HasColumnType("datetime");

                entity.Property(e => e.login_date_latest).HasColumnType("datetime");

                entity.Property(e => e.mail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phoneCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pw)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.rdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('U')")
                    .IsFixedLength(true);

                entity.Property(e => e.zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<T_CCG>(entity =>
            {
                entity.HasKey(e => e.member_id);

                entity.ToTable("T_CCG");

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.cancel_date).HasColumnType("datetime");

                entity.Property(e => e.reg_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<The_Card_overture>(entity =>
            {
                entity.HasKey(e => e.OVERTURE_ID);

                entity.ToTable("The_Card_overture");

                entity.Property(e => e.B_REFER_SITE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.B_REMOTE_ADDR)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CONNECT_TIME)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MOM_OVERTURE_ID)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.QUERY_STRING)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.REFER_SITE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.REMOTE_ADDR)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<The_Card_overture_history>(entity =>
            {
                entity.HasKey(e => e.OVERTURE_ID);

                entity.ToTable("The_Card_overture_history");

                entity.Property(e => e.CONNECT_TIME)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.REFER_SITE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.REMOTE_ADDR)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<The_Ewed_BGM>(entity =>
            {
                entity.HasKey(e => e.BGM_ID);

                entity.ToTable("The_Ewed_BGM");

                entity.Property(e => e.Album)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.File_Path)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Free)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Price)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Singer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State).HasDefaultValueSql("(0)");

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<The_Ewed_Best>(entity =>
            {
                entity.HasKey(e => e.idx);

                entity.ToTable("The_Ewed_Best");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Sales_Gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('T')")
                    .IsFixedLength(true);

                entity.Property(e => e.best_month)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.best_week)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.best_year)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.bride_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.groom_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.regdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<The_Ewed_Coupon>(entity =>
            {
                entity.HasKey(e => e.coupon_code);

                entity.ToTable("The_Ewed_Coupon");

                entity.Property(e => e.coupon_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.iscoupon_kind)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("(O:주문발행, S:스티커발행)");

                entity.Property(e => e.isuse_yn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("(Y,N)");

                entity.Property(e => e.rdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.seq).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<The_Ewed_FAQ>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("The_Ewed_FAQ");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.mdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<The_Ewed_MyBGM>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("The_Ewed_MyBGM");

                entity.Property(e => e.Sales_Gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('T')")
                    .IsFixedLength(true);

                entity.Property(e => e.idx)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.member_id)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.my_state)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('P')")
                    .IsFixedLength(true);

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.pg_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.src_erp_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<The_Ewed_Order>(entity =>
            {
                entity.HasKey(e => e.Order_ID);

                entity.ToTable("The_Ewed_Order");

                entity.HasIndex(e => e.Order_Seq, "IDX_The_Ewed_Order_Order_Seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Sales_gubun, e.is_display }, "com_gubun_display")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.linkurl, "nind_linkurl")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.member_id, "nind_member_id")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_email, "nind_order_email")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Admin_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BGM_FileName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bride_Name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Event_AmPm)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event_Day)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event_Hour)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event_Minute)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event_Month)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event_WeekName)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.Event_Year)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Groom_Name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sales_gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('T')")
                    .IsFixedLength(true);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Wedd_Addr)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Wedd_Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Wedd_Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Wedd_Place)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Wedd_Url)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ac_State)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('P')")
                    .IsFixedLength(true)
                    .HasComment("데이콤 정산일");

                entity.Property(e => e.dacom_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.is_coupon_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.is_display)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.linkurl)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_pwd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_result)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.pg_caldate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_paydate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("데이콤 수금일");

                entity.Property(e => e.pg_recaldate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_repaydate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.pg_shopid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('theCard')");

                entity.Property(e => e.pg_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.settle_cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.settle_order_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_erp_date).HasColumnType("smalldatetime");

                entity.Property(e => e.status_seq).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<The_Ewed_Order_DELETE>(entity =>
            {
                entity.HasKey(e => e.Order_ID);

                entity.ToTable("The_Ewed_Order_DELETE");

                entity.Property(e => e.Order_ID).ValueGeneratedNever();

                entity.Property(e => e.Admin_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BGM_FileName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bride_Name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Event_AmPm)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event_Day)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event_Hour)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event_Minute)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event_Month)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Event_WeekName)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.Event_Year)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Groom_Name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Wedd_Addr)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Wedd_Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Wedd_Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Wedd_Place)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Wedd_Url)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ac_State)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_result)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pg_caldate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_paydate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_recaldate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_repaydate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.pg_shopid)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("datetime");

                entity.Property(e => e.settle_cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<The_Ewed_Product>(entity =>
            {
                entity.HasKey(e => e.Product_ID);

                entity.ToTable("The_Ewed_Product");

                entity.Property(e => e.Content).HasColumnType("text");

                entity.Property(e => e.Designer)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("W:청첩장 , V:초대장");

                entity.Property(e => e.Sales_Gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('T')")
                    .IsFixedLength(true);

                entity.Property(e => e.Samp_FileName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State).HasDefaultValueSql("(0)");

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<The_Member>(entity =>
            {
                entity.HasKey(e => e.uid);

                entity.ToTable("The_Member");

                entity.HasIndex(e => e.jumin, "nind_jumin")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.uid)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addressCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.birth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.bride_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.chk_ad)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_event)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mailservice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_penpal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.company_seq).HasDefaultValueSql("(0)");

                entity.Property(e => e.groom_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.isLunar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.job)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.login_date).HasColumnType("datetime");

                entity.Property(e => e.login_date_latest).HasColumnType("datetime");

                entity.Property(e => e.mail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phoneCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pw)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.rdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('T')")
                    .IsFixedLength(true);

                entity.Property(e => e.zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TiaraBestRanking>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TiaraBestRanking");

                entity.Property(e => e.Gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("MB:월간베스트\r\nWB:주간베스트\r\nSB:샘플베스트\r\nSF:여성베스트\r\nSM:남성베스트\r\nAA:20대베스트\r\nAB:30대베스트\r\nAC:40대베스트\r\nAD:50대베스트\r\nPA:300~600원대\r\nPB:700~1000원대\r\nPC:1100~1400원대\r\nPD:1500원이상\r\nBA:티아라,유사미디자인스\r\nBB:바른손카드\r\nBC:신상품\r\nBD:위시메이드\r\nBE:해피카드\r\nBF:스튜디오진,벨라피오레");

                entity.Property(e => e.RegDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<Tiara_Event>(entity =>
            {
                entity.ToTable("Tiara_Event");

                entity.Property(e => e.email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.etc_info_s)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.hphone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.phone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tiara_Member>(entity =>
            {
                entity.HasKey(e => e.uid);

                entity.ToTable("Tiara_Member");

                entity.HasIndex(e => e.jumin, "nind_jumin")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.uid, "nind_uid")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.uid)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addressCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.birth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.bride_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.chk_ad)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_event)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mailservice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_penpal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.groom_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.isBaro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isLunar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isSample)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.job)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.login_date).HasColumnType("datetime");

                entity.Property(e => e.login_date_latest).HasColumnType("datetime");

                entity.Property(e => e.mail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.phone1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phoneCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pw)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.rdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tiara_ProdView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Tiara_ProdView");

                entity.Property(e => e.BEST_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_CODE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_MS)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ISHAVE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ISSAMPLE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NEW_YES_OR_NO)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReInputDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.card_shape)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.display_yes_or_no)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.is100)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.is200)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.is300)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isButterFly)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isElegant)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isFlower)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isGold)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isHeart)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isHologram)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isPearl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isPress)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isRomantic)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isSelfEdit)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isStylish)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isSweet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isTie)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isTrendy)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isWinitial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isYu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.issbaesong)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.online_yes_or_no)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.recomend_yes_or_no)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.regist_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tiara_basket>(entity =>
            {
                entity.ToTable("Tiara_basket");

                entity.Property(e => e.member_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sessionID)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tiara_board>(entity =>
            {
                entity.ToTable("Tiara_board");

                entity.Property(e => e.id).ValueGeneratedNever();

                entity.Property(e => e.addr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.contents)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.depth).HasDefaultValueSql("(0)");

                entity.Property(e => e.email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.isCoupon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isSecret)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pw)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.title)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.vcnt).HasDefaultValueSql("(0)");

                entity.Property(e => e.zipcode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<UserInfo_Bhands_ci>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UserInfo_Bhands_ci");

                entity.Property(e => e.ConnInfo).HasMaxLength(255);

                entity.Property(e => e.DupInfo).HasMaxLength(255);

                entity.Property(e => e.no).HasMaxLength(255);

                entity.Property(e => e.uid).HasMaxLength(255);

                entity.Property(e => e.uname).HasMaxLength(255);
            });

            modelBuilder.Entity<UserInfo_TheCard_ci>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UserInfo_TheCard_ci");

                entity.Property(e => e.ConnInfo).HasMaxLength(255);

                entity.Property(e => e.DupInfo).HasMaxLength(255);

                entity.Property(e => e.no).HasMaxLength(255);

                entity.Property(e => e.uid).HasMaxLength(255);

                entity.Property(e => e.uname).HasMaxLength(255);
            });

            modelBuilder.Entity<UserInfo_ci>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UserInfo_ci");

                entity.Property(e => e.ConnInfo).HasMaxLength(255);

                entity.Property(e => e.DupInfo).HasMaxLength(255);

                entity.Property(e => e.no).HasMaxLength(255);

                entity.Property(e => e.uid).HasMaxLength(255);

                entity.Property(e => e.uname).HasMaxLength(255);
            });

            modelBuilder.Entity<Util_Date>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Util_Date");

                entity.Property(e => e.sdate)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSTAT_CARD>(entity =>
            {
                entity.HasKey(e => new { e.card_seq, e.card_type, e.vdate, e.company_seq });

                entity.ToTable("VSTAT_CARD");

                entity.Property(e => e.card_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.vdate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.company_seq).HasDefaultValueSql("(1)");

                entity.Property(e => e.vcnt).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<VSTAT_ICON>(entity =>
            {
                entity.ToTable("VSTAT_ICON");

                entity.Property(e => e.reg_Date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.usrIP)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSTAT_SITE>(entity =>
            {
                entity.HasKey(e => new { e.vdate, e.vdomain, e.company_seq });

                entity.ToTable("VSTAT_SITE");

                entity.Property(e => e.vdate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.vdomain)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.company_seq).HasDefaultValueSql("(1)");

                entity.Property(e => e.vcnt).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<VSTAT_SITE_EPOST>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VSTAT_SITE_EPOST");

                entity.Property(e => e.vdate)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_COUPONTYPE_ORDER_AMT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COUPONTYPE_ORDER_AMT");

                entity.Property(e => e.Coupon_Type_Code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_COUPON_CALC_FOR_CO>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COUPON_CALC_FOR_CO");

                entity.Property(e => e.ADD_COUPON_ALLOW_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AD_COUPON_ALLOW_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_NAME).HasMaxLength(50);

                entity.Property(e => e.COUPON_SERVICE_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_SERVICE_TYPE_NAME)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DISCOUNT_DELIVERY_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_EMBO_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_ENVINSERT_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_ENVSPECIAL_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_EXPRESS_SHIPPING_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_FIXED_RATE_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DISCOUNT_FLOWER_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_FTICKET_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_GUESTBOOK_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_JEBON_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_LINING_ENV_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_ORDER_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_PAPERCOVER_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_PRINT_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_RIBBON_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_SEALING_STICKER_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_TOTAL_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DUP_COUPON_ALLOW_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_TYPE)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.USE_DEVICE)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_COUPON_CALC_FOR_CO_20200303_bak>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COUPON_CALC_FOR_CO_20200303_bak");

                entity.Property(e => e.ADD_COUPON_ALLOW_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AD_COUPON_ALLOW_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_NAME).HasMaxLength(50);

                entity.Property(e => e.COUPON_SERVICE_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_SERVICE_TYPE_NAME)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DISCOUNT_DELIVERY_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_EMBO_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_ENVINSERT_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_EXPRESS_SHIPPING_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_FIXED_RATE_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DISCOUNT_FTICKET_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_GUESTBOOK_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_JEBON_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_LINING_ENV_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_ORDER_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_PRINT_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_TOTAL_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DUP_COUPON_ALLOW_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_TYPE)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.USE_DEVICE)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_COUPON_CALC_FOR_CO_TEST>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COUPON_CALC_FOR_CO_TEST");

                entity.Property(e => e.ADD_COUPON_ALLOW_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AD_COUPON_ALLOW_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_NAME).HasMaxLength(50);

                entity.Property(e => e.COUPON_SERVICE_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_SERVICE_TYPE_NAME)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DISCOUNT_DELIVERY_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_EMBO_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_ENVINSERT_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_ENVSPECIAL_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_EXPRESS_SHIPPING_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_FIXED_RATE_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DISCOUNT_FLOWER_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_FTICKET_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_GUESTBOOK_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_JEBON_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_LINING_ENV_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_ORDER_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_PAPERCOVER_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_PRINT_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_RIBBON_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_SEALING_STICKER_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_TOTAL_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DUP_COUPON_ALLOW_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_TYPE)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.USE_DEVICE)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_COUPON_CALC_FOR_CO_nsm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COUPON_CALC_FOR_CO_nsm");

                entity.Property(e => e.ADD_COUPON_ALLOW_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AD_COUPON_ALLOW_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_NAME).HasMaxLength(50);

                entity.Property(e => e.COUPON_SERVICE_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_SERVICE_TYPE_NAME)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DISCOUNT_DELIVERY_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_EMBO_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_ENVINSERT_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_EXPRESS_SHIPPING_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_FIXED_RATE_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DISCOUNT_FTICKET_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_GUESTBOOK_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_JEBON_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_LINING_ENV_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_ORDER_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_PRINT_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DISCOUNT_TOTAL_PRICE).HasColumnType("numeric(29, 6)");

                entity.Property(e => e.DUP_COUPON_ALLOW_YN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_TYPE)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.USE_DEVICE)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_COUPON_USER_LIST>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COUPON_USER_LIST");

                entity.Property(e => e.ACTIVE_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ADD_COUPON_ALLOW_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AD_COUPON_ALLOW_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_CODE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_DESC)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.COUPON_GROUP_CODE)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.COUPON_NAME)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.COUPON_TYPE_CODE)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DISCOUNT_FIXED_RATE_TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DOWNLOAD_KIND)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DOWNLOAD_KIND_ETC_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DOWNLOAD_USER_GB)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DUP_COUPON_ALLOW_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.END_DATE).HasColumnType("datetime");

                entity.Property(e => e.EXPIRY_END_DATE).HasColumnType("datetime");

                entity.Property(e => e.EXPIRY_START_DATE).HasColumnType("datetime");

                entity.Property(e => e.EXPIRY_TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_APPLY_TYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_TYPE_CODE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.SALES_GUBUN)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS_ACTIVE_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.USE_DEVICE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.USE_PLACE)
                    .IsRequired()
                    .HasMaxLength(5);
            });

            modelBuilder.Entity<VW_DELIVERY_MST>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_DELIVERY_MST");

                entity.Property(e => e.COMPANY_NAME)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.DELIVERY_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DELIVERY_MSG)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ERP_PARTCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ISHJ)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ORDER_TABLE_NAME)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RECV_ADDR)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RECV_ADDR_DETAIL)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RECV_HPHONE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RECV_MSG)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RECV_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RECV_PHONE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RECV_ZIP)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SEND_DATE).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VW_HALL_SALES_STATIC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_HALL_SALES_STATICS");
            });

            modelBuilder.Entity<VW_MO_TRAN>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_MO_TRAN");

                entity.Property(e => e.ACCEPT_DATE)
                    .HasMaxLength(33)
                    .IsUnicode(false);

                entity.Property(e => e.MO_ACCEPTTIME)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.MO_MODIFIED)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.MO_MSG)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.MO_NET)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MO_NUM).ValueGeneratedOnAdd();

                entity.Property(e => e.MO_NUMBER)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MO_REPLY_DATE)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.MO_REPLY_MSG)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.MO_SENDER)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MO_STATUS)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.act_date).HasColumnType("datetime");

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<VW_OUTSOURCING_ORDER_MST>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_OUTSOURCING_ORDER_MST");

                entity.Property(e => e.BOTH_SIDE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_CODE).HasMaxLength(100);

                entity.Property(e => e.COMPANY_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_TYPE_NAME)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CUTOUT_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DELIVERY_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DELIVERY_TYPE_NAME)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DEV_FLAG)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EDGE_COLOR).HasMaxLength(30);

                entity.Property(e => e.EDGE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ERP_PART_SUB_TYPE_CODE)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ERP_PART_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ERP_PART_TYPE_NAME)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.EXPECT_DATE).HasColumnType("datetime");

                entity.Property(e => e.FOIL_TYPE_NAME).HasMaxLength(50);

                entity.Property(e => e.GLOSSY_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IMAGE_FILE_URL)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LASER_CUT_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MEMO).HasMaxLength(1000);

                entity.Property(e => e.MEMO_EX)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_NAME).HasMaxLength(100);

                entity.Property(e => e.ORDER_STATUS_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_STATUS_CODE_NAME)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_SUB_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_SUB_TYPE_NAME)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.OSI_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PAGES_PER_SHEET_VALUE).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PAPER_SIZE).HasMaxLength(200);

                entity.Property(e => e.PAPER_TYPE_NAME).HasMaxLength(200);

                entity.Property(e => e.PRESS_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PRINT_CHASU)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PRINT_FILE_URL)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PRINT_LOSS_VALUE).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.RECEIPT_DATE).HasColumnType("datetime");

                entity.Property(e => e.REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.REQUESTOR_NAME).HasMaxLength(100);

                entity.Property(e => e.SITE_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.SITE_TYPE_NAME)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_USER_INFO>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_USER_INFO");

                entity.Property(e => e.AuthType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BIRTH_DATE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BIRTH_DATE_TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CHK_MYOMEE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CHOICE_AGREEMENT_FOR_SAMSUNG_CHOICE_PERSONAL_DATA)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CHOICE_AGREEMENT_FOR_SAMSUNG_MEMBERSHIP)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CHOICE_AGREEMENT_FOR_SAMSUNG_THIRDPARTY)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ConnInfo)
                    .HasMaxLength(88)
                    .IsUnicode(false);

                entity.Property(e => e.DupInfo)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.HPHONE)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.INTEGRATION_MEMBER_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.INTERGRATION_BEFORE_ID)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.INTERGRATION_DATE).HasColumnType("datetime");

                entity.Property(e => e.MYOMEE_REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.NATIONAL_INFO)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ORIGINAL_BIRTH_DATE)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PHONE)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.REFERER_SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SELECT_SALES_GUBUN)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SELECT_USER_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SITE_DIV_NAME)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WEDDING_DAY)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.WEDDING_HALL)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.WEDD_DAY)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.WEDD_MONTH)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.WEDD_YEAR)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.ZIPCODE)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.chk_iloommembership)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_lgmembership)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mailservice)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_sms)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.iloommembership_reg_date).HasColumnType("datetime");

                entity.Property(e => e.inflow_route)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.isJehu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isMCardAble)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.lgmembership_reg_date).HasColumnType("datetime");

                entity.Property(e => e.mkt_chk_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pwd)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("datetime");

                entity.Property(e => e.site_div)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.smembership_reg_date).HasColumnType("datetime");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.zip1)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip2)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_USER_INFO_ASTERISK>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_USER_INFO_ASTERISK");

                entity.Property(e => e.AuthType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ConnInfo)
                    .HasMaxLength(88)
                    .IsUnicode(false);

                entity.Property(e => e.DupInfo)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.INTEGRATION_MEMBER_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NationalInfo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RequestNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.addr_detail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail_R)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.address_R)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.birth)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.birth_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_DM)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_DormancyAccount)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mail_input)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mailservice)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership_coop)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership_leave)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_smembership_per)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_sms)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.hand_phone1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.hand_phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.inflow_route)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.isJehu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isMCardAble)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.is_appSample)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.jumin)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.login_date).HasColumnType("datetime");

                entity.Property(e => e.login_date_lastest).HasColumnType("datetime");

                entity.Property(e => e.mkt_chk_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.phone1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.phone3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.pwd)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("datetime");

                entity.Property(e => e.site_div)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.site_div_lastest)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.smembership_chk_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.smembership_inflow_route)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.smembership_leave_date).HasColumnType("datetime");

                entity.Property(e => e.smembership_reg_date).HasColumnType("datetime");

                entity.Property(e => e.ugubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.var1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_day)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_hour)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_minute)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_month)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_pgubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.wedd_year)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.zip1)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip1_R)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip2)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.zip2_R)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_WEDDING_HALL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_WEDDING_HALL");

                entity.Property(e => e.AREA)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.JOB_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WRoadNameAddress).HasMaxLength(400);

                entity.Property(e => e.Waddress)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Wname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Wphone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.corelFolder)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isAutoWeddInfo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isAutoupdate)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isIllur)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isIllur_update)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isUpdate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.iscorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.map_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.poi_id)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.poi_matching)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.poi_x)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.poi_y)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.update_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.waddress_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_keyword)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V_BoardList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BoardList");

                entity.Property(e => e.boardid)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.contents).HasColumnType("ntext");

                entity.Property(e => e.end_date)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("datetime");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.start_date)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.title).HasMaxLength(200);

                entity.Property(e => e.writer).HasMaxLength(50);
            });

            modelBuilder.Entity<V_OrderGroupDetailList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OrderGroupDetailList");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Hp)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MemberID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OrderDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OrderName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.bankInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.couponSeq)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.couponTitle)
                    .HasMaxLength(264)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryAddr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryAddrDetail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryCountry)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.deliveryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.deliveryHp)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryPhone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryZip)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.depositor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.guBun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.payDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<V_OrderGroupList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OrderGroupList");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Hp)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MemberID)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OrderDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OrderName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OrderSeq).ValueGeneratedOnAdd();

                entity.Property(e => e.PayType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.bankInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryAddr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryAddrDetail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryCountry)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.deliveryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.deliveryHp)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryPhone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.deliveryZip)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.depositor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.payDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<V_order_list>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_order_list");

                entity.Property(e => e.MEMBER_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.delivery_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.delivery_com)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.delivery_date).HasColumnType("smalldatetime");

                entity.Property(e => e.member_email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_case)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.order_type_str).HasMaxLength(20);

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.pg_resultinfo2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pg_shopid)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.pg_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.settle_date).HasColumnType("datetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.status_seq_str).HasMaxLength(20);
            });

            modelBuilder.Entity<V_order_list_v2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_order_list_v2");

                entity.Property(e => e.MEMBER_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.delivery_com)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.delivery_date).HasColumnType("smalldatetime");

                entity.Property(e => e.member_email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_case)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.pg_resultinfo2)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.pg_shopid)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.pg_tid)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.settle_date).HasColumnType("datetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Visit_Reservation>(entity =>
            {
                entity.HasKey(e => e.visit_seq);

                entity.ToTable("Visit_Reservation");

                entity.HasComment("방문상담 예약 정보");

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.chk_call)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.domain_info).HasMaxLength(50);

                entity.Property(e => e.gubun)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.tel_no1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.tel_no2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.tel_no3)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.visit_content).HasColumnType("text");

                entity.Property(e => e.visit_date)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.visit_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.visit_time)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_date)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_time)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WEDD_FAQ>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("WEDD_FAQ");

                entity.HasComment("고객FAQ");

                entity.Property(e => e.COMPANY_SEQ).HasDefaultValueSql("((1))");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.isBest)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.mdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WEDD_MAIL>(entity =>
            {
                entity.ToTable("WEDD_MAIL");

                entity.HasComment("메일,SMS 발송관리");

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.div)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.div_s2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.email_msg)
                    .HasMaxLength(7800)
                    .IsUnicode(false);

                entity.Property(e => e.email_sender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.email_title)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.sms_msg)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.sms_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WeddingHall>(entity =>
            {
                entity.HasKey(e => e.wedd_idx)
                    .IsClustered(false);

                entity.ToTable("WeddingHall");

                entity.HasComment("웨딩홀정보");

                entity.HasIndex(e => e.Wname, "IX_WeddingHall")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AREA)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.JOB_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.POI).HasDefaultValueSql("((9999))");

                entity.Property(e => e.WRoadNameAddress)
                    .HasMaxLength(400)
                    .HasDefaultValueSql("('')")
                    .HasComment("도로명주소");

                entity.Property(e => e.Waddress)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("주소");

                entity.Property(e => e.Wcnt).HasDefaultValueSql("((0))");

                entity.Property(e => e.Wname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("예식장명");

                entity.Property(e => e.Wphone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("예식장 연락처");

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.corelFolder)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isAutoWeddInfo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.isAutoupdate)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isIllur)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isIllur_update)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isUpdate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.iscorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.map_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.poi_id)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.poi_matching)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.poi_x)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.poi_y)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.update_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.waddress_detail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_keyword)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasComment("키워드");
            });

            modelBuilder.Entity<WeddingHall_Image>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("WeddingHall_Image");

                entity.HasComment("웨딩홀 약도이미지");

                entity.HasIndex(e => e.Wedd_IDX, "IX_WeddingHall_Image")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WeddImg_IDX, "NCI-WEDDIMG_IDX")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ImgName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.imgFolder)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isColor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true);

                entity.Property(e => e.isDP)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.isR)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.reg_Date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sort).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<WeddingHall_Log>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WeddingHall_Log");

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.gubun)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Weddinghall_location>(entity =>
            {
                entity.HasKey(e => e.loc_code);

                entity.ToTable("Weddinghall_location");

                entity.HasComment("웨딩홀 위치");

                entity.Property(e => e.loc_code).ValueGeneratedNever();

                entity.Property(e => e.loc_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Wish_OSI>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Wish_OSI");

                entity.Property(e => e.card_osi).HasMaxLength(255);

                entity.Property(e => e.card_osi_result).HasMaxLength(255);

                entity.Property(e => e.card_size).HasMaxLength(255);
            });

            modelBuilder.Entity<XBBS_ARTICLE>(entity =>
            {
                entity.HasKey(e => e.XA_SEQ)
                    .HasName("PK__XBBS_ARTICLE__4DB4832C");

                entity.ToTable("XBBS_ARTICLE");

                entity.HasIndex(e => e.XI_SEQ, "IDX__XBBS_ARTICLE__XI_SEQ")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XA_CONTENT).HasColumnType("text");

                entity.Property(e => e.XA_DEPTH).HasDefaultValueSql("(1)");

                entity.Property(e => e.XA_EMAIL)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.XA_FILE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XA_HOMEPAGE)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.XA_PASSWD)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XA_POSITION).HasDefaultValueSql("(1)");

                entity.Property(e => e.XA_THREAD).HasDefaultValueSql("(0)");

                entity.Property(e => e.XA_TITLE)
                    .IsRequired()
                    .HasMaxLength(1528)
                    .IsUnicode(false);

                entity.Property(e => e.XA_WRITER)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.XA_WRITER_IP)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.HasOne(d => d.XI_SEQNavigation)
                    .WithMany(p => p.XBBS_ARTICLEs)
                    .HasForeignKey(d => d.XI_SEQ)
                    .HasConstraintName("FK__XBBS_ARTI__XI_SE__789EE131");
            });

            modelBuilder.Entity<XBBS_INFO>(entity =>
            {
                entity.HasKey(e => e.XI_SEQ)
                    .HasName("PK__XBBS_INFO__44CA3770");

                entity.ToTable("XBBS_INFO");

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.XI_DESCRIPTION)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.XI_PUBLIC)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("0:공지사항게시판,1:자유게시판");

                entity.Property(e => e.XI_TITLE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XI_TITLE_IMG)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XI_TMP_FILE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Yoosami>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Yoosami");

                entity.Property(e => e.RegDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Seq).ValueGeneratedOnAdd();

                entity.Property(e => e.Site)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Source)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<antHall>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("antHall");

                entity.Property(e => e.WRoadNameAddress).HasMaxLength(400);

                entity.Property(e => e.Waddress)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Wname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Wphone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.isAutoWeddInfo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isUpdate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.iscorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.update_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_keyword)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.wid).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ata_banlist>(entity =>
            {
                entity.HasKey(e => new { e.service_type, e.ban_seq })
                    .HasName("PK__ata_banl__7F4D396326EE1F86");

                entity.ToTable("ata_banlist");

                entity.HasComment("비즈톡 스팸등록");

                entity.HasIndex(e => new { e.ban_type, e.service_type, e.ban_status_yn }, "idx_ata_banlist_1");

                entity.HasIndex(e => e.content, "idx_ata_banlist_2");

                entity.Property(e => e.service_type)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("서비스 메시지 전송 타입(3-알림톡)")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ban_status_yn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .HasComment("전송 차단 여부(Y:차단, N:취소)")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ban_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("스팸 차단 구분 R-수신 번호(recipient_num필드와 비교) , T-메시지 내용(content필드와 비교)")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasComment("스팸 문구")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록 시간");

                entity.Property(e => e.reg_user)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.send_yn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("스팸 문구 전송 여부 (Y:발송 N:발송안함)")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.update_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.update_user)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E19235D1F6");

                entity.ToTable("ata_mmt_log");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true);

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true);

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ata_mmt_log_201803>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E132ABEC08");

                entity.ToTable("ata_mmt_log_201803");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201803_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201803_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201803_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201803_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201804>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1EC236CBD");

                entity.ToTable("ata_mmt_log_201804");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201804_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201804_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201804_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201804_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201805>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1374B3F05");

                entity.ToTable("ata_mmt_log_201805");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201805_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201805_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201805_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201805_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201806>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E18487CA44");

                entity.ToTable("ata_mmt_log_201806");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201806_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201806_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201806_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201806_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201807>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1F22D3BAB");

                entity.ToTable("ata_mmt_log_201807");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201807_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201807_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201807_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201807_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201808>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1EBBEBF65");

                entity.ToTable("ata_mmt_log_201808");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201808_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201808_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201808_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201808_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201809>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1342BDABF");

                entity.ToTable("ata_mmt_log_201809");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201809_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201809_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201809_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201809_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201810>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E192ECE1B7");

                entity.ToTable("ata_mmt_log_201810");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201810_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201810_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201810_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201810_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201811>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E16E16E89D");

                entity.ToTable("ata_mmt_log_201811");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201811_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201811_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201811_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201811_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201812>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E15A9B3B47");

                entity.ToTable("ata_mmt_log_201812");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201812_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201812_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201812_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201812_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201901>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E16CA89851");

                entity.ToTable("ata_mmt_log_201901");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201901_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201901_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201901_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201901_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201902>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E18B8C9570");

                entity.ToTable("ata_mmt_log_201902");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201902_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201902_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201902_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201902_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201903>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E16EC0B83B");

                entity.ToTable("ata_mmt_log_201903");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201903_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201903_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201903_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201903_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201904>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1CB481F6F");

                entity.ToTable("ata_mmt_log_201904");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201904_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201904_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201904_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201904_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201905>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1721B2671");

                entity.ToTable("ata_mmt_log_201905");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201905_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201905_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201905_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201905_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201906>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E142CF3645");

                entity.ToTable("ata_mmt_log_201906");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201906_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201906_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201906_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201906_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201907>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1F508A034");

                entity.ToTable("ata_mmt_log_201907");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201907_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201907_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201907_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201907_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201908>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1A1870904");

                entity.ToTable("ata_mmt_log_201908");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201908_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201908_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201908_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201908_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201909>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1B2E38058");

                entity.ToTable("ata_mmt_log_201909");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201909_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201909_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201909_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201909_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201910>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E16250BEF9");

                entity.ToTable("ata_mmt_log_201910");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201910_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201910_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201910_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201910_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201911>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1C3BF3044");

                entity.ToTable("ata_mmt_log_201911");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201911_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201911_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201911_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201911_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_201912>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E122E11261");

                entity.ToTable("ata_mmt_log_201912");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_201912_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_201912_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_201912_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_201912_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202001>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1B0CF4525");

                entity.ToTable("ata_mmt_log_202001");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202001_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202001_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202001_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202001_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202002>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E129F8C5B2");

                entity.ToTable("ata_mmt_log_202002");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202002_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202002_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202002_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202002_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202003>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E13DCD5657");

                entity.ToTable("ata_mmt_log_202003");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202003_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202003_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202003_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202003_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202004>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1AC04D27E");

                entity.ToTable("ata_mmt_log_202004");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202004_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202004_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202004_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202004_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202005>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E15DA7FC01");

                entity.ToTable("ata_mmt_log_202005");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202005_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202005_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202005_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202005_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202006>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1CE4EF898");

                entity.ToTable("ata_mmt_log_202006");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202006_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202006_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202006_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202006_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202007>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E161A38D42");

                entity.ToTable("ata_mmt_log_202007");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202007_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202007_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202007_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202007_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202008>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E14915BE1D");

                entity.ToTable("ata_mmt_log_202008");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202008_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202008_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202008_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202008_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202009>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1C1F21357");

                entity.ToTable("ata_mmt_log_202009");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202009_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202009_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202009_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202009_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202010>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E19E2A1012");

                entity.ToTable("ata_mmt_log_202010");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202010_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202010_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202010_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202010_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202011>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1F403BBCC");

                entity.ToTable("ata_mmt_log_202011");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202011_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202011_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202011_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202011_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202012>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E12D5AD77E");

                entity.ToTable("ata_mmt_log_202012");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202012_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202012_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202012_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202012_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202101>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E13CE1929F");

                entity.ToTable("ata_mmt_log_202101");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202101_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202101_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202101_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202101_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_log_202102>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E13228BD9E");

                entity.ToTable("ata_mmt_log_202102");

                entity.HasIndex(e => new { e.date_client_req, e.recipient_num }, "idx_ata_mmt_log_202102_1");

                entity.HasIndex(e => new { e.date_mt_report, e.report_code }, "idx_ata_mmt_log_202102_2");

                entity.HasIndex(e => e.msg_status, "idx_ata_mmt_log_202102_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_log_202102_4");

                entity.Property(e => e.mt_pr).ValueGeneratedNever();

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')");

                entity.Property(e => e.date_mt_report).HasColumnType("datetime");

                entity.Property(e => e.date_mt_sent).HasColumnType("datetime");

                entity.Property(e => e.date_rslt).HasColumnType("datetime");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type).HasDefaultValueSql("('1008')");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reg_date_tran).HasColumnType("datetime");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<ata_mmt_tran>(entity =>
            {
                entity.HasKey(e => e.mt_pr)
                    .HasName("PK__ata_mmt___910A22E1257DEFA8");

                entity.ToTable("ata_mmt_tran");

                entity.HasComment("비즈톡 발송");

                entity.HasIndex(e => new { e.msg_status, e.date_client_req }, "idx_ata_mmt_tran_1");

                entity.HasIndex(e => e.recipient_num, "idx_ata_mmt_tran_2");

                entity.HasIndex(e => e.ata_id, "idx_ata_mmt_tran_3");

                entity.HasIndex(e => new { e.sender_key, e.template_code }, "idx_ata_mmt_tran_4");

                entity.Property(e => e.ad_flag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("카카오톡 친구톡 발송시 광고성메시지")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.ata_id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true)
                    .HasComment("ATA 이중화시 사용되는 ID")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("발신자 전화 번호")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasComment("전송 메시지")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.country_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('82')")
                    .HasComment("국가 코드")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.crypto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .HasComment("암호화 사용 유무")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.date_client_req)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1970-01-01 00:00:00')")
                    .HasComment("전송 예약 시간");

                entity.Property(e => e.date_mt_report)
                    .HasColumnType("datetime")
                    .HasComment("Biz talk 으로부터 결과 수신한 시간");

                entity.Property(e => e.date_mt_sent)
                    .HasColumnType("datetime")
                    .HasComment("Biz talk G/W 접수 시간");

                entity.Property(e => e.date_rslt)
                    .HasColumnType("datetime")
                    .HasComment("단말기 도착 시간");

                entity.Property(e => e.etc_date_1).HasColumnType("datetime");

                entity.Property(e => e.etc_num_1).HasComment("유저 기타필드)company_seq");

                entity.Property(e => e.etc_text_1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("유저 기타필드)sales_gubun")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("유저 기타필드)호출프로시저")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.etc_text_3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("친구톡 이미지 클릭시 이동할 URL")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.img_url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("친구톡 이미지 URL")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasComment("버튼템플릿 전송시 버튼 정보")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("카카오톡 전송방식 1-format string 2-JSON 3-XML")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .HasComment("메시지 상태 (1-전송대기, 2-결과대기, 3-완료)")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.msg_type)
                    .HasDefaultValueSql("('1008')")
                    .HasComment("메시지 종류(1008-알림톡, 1009-친구톡)");

                entity.Property(e => e.mt_refkey)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("부서 코드 (참조용 필드)")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.priority)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true)
                    .HasComment("메시지 우선 순위")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.recipient_num)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("수신자 전화 번호")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("데이터 등록일자");

                entity.Property(e => e.report_code)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("전송 결과(1000-성공, 기타-실패)")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.response_method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('push')")
                    .HasComment("메시지 발송 방식")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.rs_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("전송된 Biz talk G/W 정보")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.sender_key)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComment("발신 프로필 키")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.subject)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .HasComment("메시지 제목")
                    .UseCollation("Korean_Wansung_CS_AS");

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("메시지 유형 템플릿 코드")
                    .UseCollation("Korean_Wansung_CS_AS");
            });

            modelBuilder.Entity<barunToclosed_history_log>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("barunToclosed_history_log");

                entity.HasComment("혼수폐쇄몰 회원이동 history Log");

                entity.HasIndex(e => e.uid, "idx_barunToclosed_history_log_01");

                entity.Property(e => e.linked_tmstmp)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("방문시간");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("회원아이디");
            });

            modelBuilder.Entity<barunToclosed_log>(entity =>
            {
                entity.HasKey(e => e.uid);

                entity.ToTable("barunToclosed_log");

                entity.HasComment("혼수폐쇄몰 회원이동log 테이블");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .HasComment("회원아이디");

                entity.Property(e => e.created_tmstmp)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("최초방문일");

                entity.Property(e => e.device_gb)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("PC/M구분 (P/M)");

                entity.Property(e => e.linked_cnt)
                    .HasDefaultValueSql("((0))")
                    .HasComment("이동횟수");

                entity.Property(e => e.site_div)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("최초 이동시 진입사이트");

                entity.Property(e => e.updated_tmstmp)
                    .HasColumnType("datetime")
                    .HasComment("최종방문일");
            });

            modelBuilder.Entity<barunson_authinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("barunson_authinfo");

                entity.HasComment("barunson_authinfo");

                entity.Property(e => e.conninfo).HasMaxLength(255);

                entity.Property(e => e.dupinfo).HasMaxLength(255);

                entity.Property(e => e.uid).HasMaxLength(255);

                entity.Property(e => e.이름_주민번호)
                    .HasMaxLength(255)
                    .HasColumnName("이름-주민번호");
            });

            modelBuilder.Entity<barunson_day_count>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("barunson_day_count");

                entity.HasComment("barunson_day_count");

                entity.Property(e => e.day)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bbarunson_log>(entity =>
            {
                entity.ToTable("bbarunson_log");

                entity.HasComment("빠른손 로그");

                entity.HasIndex(e => new { e.id, e.gubun, e.admin_id, e.reg_date, e.key_idx }, "IDX_bbarunson_log")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.act_sql)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("작업 쿼리문");

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.gubun)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("구분");

                entity.Property(e => e.key_idx)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<bbarunson_notice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bbarunson_notice");

                entity.HasComment("빠른손 공지");

                entity.Property(e => e.UpdateContent)
                    .HasColumnType("text")
                    .HasComment("공시사항");

                entity.Property(e => e.UpdateDT)
                    .HasColumnType("smalldatetime")
                    .HasComment("공지일");

                entity.Property(e => e.UseYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<bhands_day_count>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bhands_day_count");

                entity.Property(e => e.day)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<board_basic_info>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("board_basic_info");

                entity.HasComment("게시판기본정보");

                entity.Property(e => e.Idx).ValueGeneratedOnAdd();

                entity.Property(e => e.admin_name).HasMaxLength(20);

                entity.Property(e => e.answer)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.editdate).HasColumnType("datetime");

                entity.Property(e => e.editor)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.helper).HasMaxLength(200);

                entity.Property(e => e.pwd)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.regdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.reply)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.siteid).HasMaxLength(20);

                entity.Property(e => e.status)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.title).HasMaxLength(50);

                entity.Property(e => e.writer_view).HasMaxLength(10);
            });

            modelBuilder.Entity<board_filter_info>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("board_filter_info");

                entity.Property(e => e.filter).HasMaxLength(250);

                entity.Property(e => e.my_cnt)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.protect)
                    .HasMaxLength(1)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<bsmall_main_view>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__bsmall_m__DDDFBCBE9769B270");

                entity.ToTable("bsmall_main_view");

                entity.HasComment("제휴 메인 페이지 관리");

                entity.Property(e => e.jehu_grade)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("제휴등급(A,B,C)");

                entity.Property(e => e.updated_tmstmp).HasColumnType("datetime");

                entity.Property(e => e.updated_uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.view_gb)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("메인 메뉴구분");

                entity.Property(e => e.view_num).HasComment("메인 메뉴 순서번호");
            });

            modelBuilder.Entity<card_bb>(entity =>
            {
                entity.HasKey(e => e.pk_id)
                    .HasName("PK__card_bbs__23893F36");

                entity.Property(e => e.content).HasColumnType("text");

                entity.Property(e => e.email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.forum_id)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.hide)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.homepage)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ip)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.passwd)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.subject)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.tag)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.writedate).HasColumnType("smalldatetime");

                entity.Property(e => e.writer)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<card_design>(entity =>
            {
                entity.HasKey(e => e.card_code);

                entity.ToTable("card_design");

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.design_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true)
                    .HasComment("1:기본,2:특이");

                entity.Property(e => e.isBackground)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isFPrint)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isMapFPrint)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<card_design_detail>(entity =>
            {
                entity.HasKey(e => new { e.card_code, e.rtype });

                entity.ToTable("card_design_detail");

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.rtype).HasComment("1:인+이+일,2:약도,3:교통편,");

                entity.Property(e => e.alignment).HasComment("0:\"중앙,1:왼쪽,2:오른쪽 정렬");

                entity.Property(e => e.isFPrint)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<card_discount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("card_discount");

                entity.Property(e => e.card_group)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_kind)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.disrate_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<card_discount_rate_2u>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("card_discount_rate_2u");

                entity.HasComment("카드할인율");

                entity.Property(e => e.card_Group)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.disrate_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<card_discount_season>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("card_discount_season");

                entity.Property(e => e.disrate_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.produce_year)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<card_faq>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("card_faq");

                entity.HasComment("FAQ 관련");

                entity.Property(e => e.content).HasColumnType("text");

                entity.Property(e => e.forum_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pkid).ValueGeneratedOnAdd();

                entity.Property(e => e.subject)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<card_printinfo>(entity =>
            {
                entity.HasKey(e => new { e.print_type, e.card_code });

                entity.ToTable("card_printinfo");

                entity.HasComment("제퓸별 인쇄(병합)정보");

                entity.HasIndex(e => e.card_code, "IX_card_code")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.print_type, "IX_print_type")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.print_group, "IX_printer_group")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.print_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("제품 타입(C/I/G/P/E)");

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("카드 코드");

                entity.Property(e => e.BOTH_SIDE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.F_isBackImg)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.F_isBarcode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.F_isDPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.F_isDigital)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.F_print_group)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.F_rotate_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.backimg_offset_left).HasDefaultValueSql("((0))");

                entity.Property(e => e.backimg_offset_midH).HasDefaultValueSql("((0))");

                entity.Property(e => e.backimg_offset_midW).HasDefaultValueSql("((0))");

                entity.Property(e => e.backimg_offset_top).HasDefaultValueSql("((0))");

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.isBackImg)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("1이면 절단선 삽입");

                entity.Property(e => e.isBarcode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.isBothSidePrinterYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isDPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("1이면 양면인쇄");

                entity.Property(e => e.isDigital)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.offset_left).HasDefaultValueSql("((0))");

                entity.Property(e => e.offset_midH).HasDefaultValueSql("((0))");

                entity.Property(e => e.offset_midW).HasDefaultValueSql("((0))");

                entity.Property(e => e.offset_top).HasDefaultValueSql("((0))");

                entity.Property(e => e.print_group)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('A01')");

                entity.Property(e => e.print_panH).HasDefaultValueSql("((0))");

                entity.Property(e => e.print_panW).HasDefaultValueSql("((0))");

                entity.Property(e => e.print_sizeH).HasComment("포인트 Y값");

                entity.Property(e => e.print_sizeW).HasComment("포인트 X값");

                entity.Property(e => e.printer_group)
                    .HasDefaultValueSql("((0))")
                    .HasComment("사내 인쇄소(0:기본 마스터, 1:기본내지,2:디지털인쇄실)");

                entity.Property(e => e.rotate).HasDefaultValueSql("((0))");

                entity.Property(e => e.rotate_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true)
                    .HasComment("1이면 회전각 사용, 그 외의 경우 가로가 길 경우만 회전각 사용");
            });

            modelBuilder.Entity<choan_admin_log>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .IsClustered(false);

                entity.ToTable("choan_admin_log");

                entity.HasIndex(e => e.order_seq, "ix_order_seq");

                entity.Property(e => e.admin_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.function_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.regdate).HasColumnType("datetime");

                entity.Property(e => e.screen_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.worker_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<concierge_wedding_info>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("concierge_wedding_info");

                entity.Property(e => e.wedd_day)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.whall_address)
                    .IsRequired()
                    .HasMaxLength(400);

                entity.Property(e => e.whall_gubun)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.whall_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<coperation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("coperation");

                entity.Property(e => e.coperation_seq).ValueGeneratedOnAdd();

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<cost_zipcode>(entity =>
            {
                entity.HasKey(e => e.C_ZIPCODE)
                    .HasName("PK__cost_zip__03D9801DDDC78697");

                entity.ToTable("cost_zipcode");

                entity.Property(e => e.C_ZIPCODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C_ZIPCODE_ADDR)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<custom_card_faq>(entity =>
            {
                entity.HasKey(e => e.pkid)
                    .HasName("PK__custom_card_faq__2759D01A");

                entity.ToTable("custom_card_faq");

                entity.HasComment("고객센터)자주묻는질문");

                entity.Property(e => e.content).HasColumnType("text");

                entity.Property(e => e.forum_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.hide)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.subject)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.writedate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<custom_cms_msg>(entity =>
            {
                entity.ToTable("custom_cms_msg");

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cms_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.cphone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.msg)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.order_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<custom_info>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("custom_info");

                entity.Property(e => e.chphone)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.cname)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cphone)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.order_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<custom_order>(entity =>
            {
                entity.HasKey(e => e.order_seq)
                    .HasName("PK_custom_order_1")
                    .IsClustered(false);

                entity.ToTable("custom_order");

                entity.HasComment("주문관련정보");

                entity.HasIndex(e => e.company_seq, "IDX_corder__company_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.member_id, "IDX_corder__member_id")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.src_ap_date, "IDX_corder__order_apdate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_email, "IDX_corder__order_email")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_hphone, "IDX_corder__order_hphone")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_name, "IDX_corder__order_name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_phone, "IDX_corder__order_phone")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.sales_Gubun, "IDX_corder__sales_gubun")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.settle_date, "IDX_corder__settle_date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.src_CloseCopy_date, "IDX_corder__src_closecopy_date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.src_compose_date, "IDX_corder__src_compose_date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.src_compose_mod_date, "IDX_corder__src_compose_mod_date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.src_confirm_date, "IDX_corder__src_confirm_date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.src_jebon_date, "IDX_corder__src_jebon_date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.src_packing_date, "IDX_corder__src_packing_date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.src_print_commit_date, "IDX_corder__src_print_commit_date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.src_print_date, "IDX_corder__src_print_date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.src_printW_date, "IDX_corder__src_printw_date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.src_send_date, "IDX_corder__src_send_date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.up_order_seq, "IDX_corder__up_order_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_g_seq, "IDX_orger_g_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_count, "NCI_ORDER_COUNT")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_type, "NCI_ORDER_TYPE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_date, "clu_order_date")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.pg_caldate, e.src_compose_admin_id }, "custom_order60")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.pg_tid, "nind_pg_tid")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.status_seq, e.settle_status }, "nind_status_seq_settle_status")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.AUTO_CHOAN_REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.AUTO_CHOAN_STATUS_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('138001')");

                entity.Property(e => e.AUTO_CHOAN_UPLOAD_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('140001')");

                entity.Property(e => e.AUTO_CHOAN_UPLOAD_REG_DATE).HasColumnType("datetime");

                entity.Property(e => e.EnvPremium_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.EnvSpecial_Price).HasDefaultValueSql("((0))");

                entity.Property(e => e.LiningJaebon_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("라이닝제본비용");

                entity.Property(e => e.OUTSOURCING_MERGE_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.OUTSOURCING_PRINTING_HOUSE_TYPE_CODE)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.OUTSOURCING_RECEIPT_DATE).HasColumnType("smalldatetime");

                entity.Property(e => e.OUTSOURCING_TYPE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PB_Coupon)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("포토북 쿠폰");

                entity.Property(e => e.PosFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("포스 전송 여부");

                entity.Property(e => e.ProcLevel)
                    .HasDefaultValueSql("((1))")
                    .HasComment("우선처리도.숫자 높을수록 우선처리.");

                entity.Property(e => e.Trouble_Comment)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.WisaFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.addition_couponseq)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("중복쿠폰번호");

                entity.Property(e => e.addition_reduce_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("중복쿠폰할인액");

                entity.Property(e => e.cancel_type).HasDefaultValueSql("((0))");

                entity.Property(e => e.cancel_type_comment).HasMaxLength(200);

                entity.Property(e => e.card_installmonth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.card_nointyn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_opt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("staff몰에서 주문시 직원 이름");

                entity.Property(e => e.company_seq).HasDefaultValueSql("((1))");

                entity.Property(e => e.cont_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("칼라내지 비용");

                entity.Property(e => e.coop_orderid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("제휴사측의 주문번호");

                entity.Property(e => e.coop_sale_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("사용 안함");

                entity.Property(e => e.couponseq)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("사용쿠폰번호");

                entity.Property(e => e.dacom_tid)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.delivery_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("배송비");

                entity.Property(e => e.discount_in_advance)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.discount_in_advance_cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.discount_in_advance_reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.discount_rate)
                    .HasDefaultValueSql("((0))")
                    .HasComment("할인율");

                entity.Property(e => e.embo_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("엠보인쇄 비용");

                entity.Property(e => e.envInsert_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.env_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.etc_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("기타비용");

                entity.Property(e => e.etc_price_ment)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("기타금액변동 사유");

                entity.Property(e => e.fticket_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("식권비용");

                entity.Property(e => e.guestbook_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.inflow_route)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.inflow_route_settle)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.isAscrow)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("에스크로 신청여부");

                entity.Property(e => e.isBaesongRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("1:급초안처리요망");

                entity.Property(e => e.isCCG)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isChoanRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("1:고급내지 옵션선택");

                entity.Property(e => e.isColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("0:일반인쇄 / 1:칼라 일반인쇄 / 2:한면 칼라인쇄 /3:양면 칼라인쇄");

                entity.Property(e => e.isColorPrt_card)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("내지 칼라인쇄여부");

                entity.Property(e => e.isColorPrt_env)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("봉투 칼라인쇄여부");

                entity.Property(e => e.isCompose)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("코렐 작성 여부");

                entity.Property(e => e.isContAdd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("1:급매송처리요망");

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("사용 안함.");

                entity.Property(e => e.isEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvAdd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("1:카드인쇄판 추가");

                entity.Property(e => e.isEnvCharge)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.isEnvInsert)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("1:봉투인쇄판추가");

                entity.Property(e => e.isEnvSpecial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("고급봉투 신청여부");

                entity.Property(e => e.isFTicket)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("1:식권주문");

                entity.Property(e => e.isLanguage)
                    .HasMaxLength(3)
                    .HasComment("0:사용안함, KOR:한글, ENG:영문");

                entity.Property(e => e.isLiningJaebon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("봉투라이닝 (0:없음,1:유료,2:무료)");

                entity.Property(e => e.isMiniCard)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isMoneyEnv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isPDF)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("포토내지 청첩장 PDF작성 여부(사용안함)");

                entity.Property(e => e.isPerfume)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isPrintCopy)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("지시서 검증 여부(아직 사용안함)");

                entity.Property(e => e.isReceipt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("1:현금영수증 발행");

                entity.Property(e => e.isRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isSpecial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("1:초특급 서비스 요청");

                entity.Property(e => e.isStoreRequisit)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isVar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("기타 관리(현재는 T-map 신청여부)");

                entity.Property(e => e.isWMovie)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("동영상 신청여부(프리미어비핸즈)");

                entity.Property(e => e.ishandmade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("1:핸드메이드서비스 가능");

                entity.Property(e => e.ishandmade2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.isinpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("1:속지부착 서비스 가능");

                entity.Property(e => e.jebon_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("제본비");

                entity.Property(e => e.label_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("라벨비용");

                entity.Property(e => e.laser_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.last_total_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("최종ERP전송금액");

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("주문 회원 아이디");

                entity.Property(e => e.mini_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("미니청첩장");

                entity.Property(e => e.mini_status_seq)
                    .HasDefaultValueSql("((0))")
                    .HasComment("미니청첩장 인쇄 진행 상태");

                entity.Property(e => e.moneyenv_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.option_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("인쇄판추가비용");

                entity.Property(e => e.order_add_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("0:수정사항 없는 추가주문,1:수정추가주문");

                entity.Property(e => e.order_add_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("0:셋트주문,2:봉투주문,3:백봉투주문");

                entity.Property(e => e.order_bname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("신부 이름");

                entity.Property(e => e.order_count).HasComment("주문수량");

                entity.Property(e => e.order_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("주문일");

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("주문자 이메일");

                entity.Property(e => e.order_etc_comment)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("주문 요구사항");

                entity.Property(e => e.order_faxphone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("주문자팩스번호");

                entity.Property(e => e.order_gname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("신랑 이름");

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("주문자 핸드폰 번호");

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("주문자 이름");

                entity.Property(e => e.order_phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("주문자 전화번호");

                entity.Property(e => e.order_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("카드정가합계");

                entity.Property(e => e.order_total_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("카드할인가합계(카드 할인가 + env_price)");

                entity.Property(e => e.order_type)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .HasComment("주문타입 (1:청첩장 2:감사장 3:초대장 4,시즌카드 5:미니청첩장 6:포토/디지탈 7:이니셜 8:포토미니)");

                entity.Property(e => e.pay_Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true)
                    .HasComment("0:pg 결제,1:주문영업결제,2:제휴사 후불,4:사고건");

                entity.Property(e => e.perfume_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.pg_caldate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("PG환불정산일");

                entity.Property(e => e.pg_fee)
                    .HasDefaultValueSql("((0))")
                    .HasComment("PG수수료");

                entity.Property(e => e.pg_paydate)
                    .HasColumnType("smalldatetime")
                    .HasComment("PG정산일");

                entity.Property(e => e.pg_payprice).HasComment("사용안함");

                entity.Property(e => e.pg_recaldate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .HasComment("PG환불수금일");

                entity.Property(e => e.pg_receipt_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("현금영수증 이니시스 TID");

                entity.Property(e => e.pg_repaydate)
                    .HasColumnType("smalldatetime")
                    .HasComment("PG수금일");

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("PG결제메세지");

                entity.Property(e => e.pg_resultinfo2)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("가상계좌일 경우 입금자 이름");

                entity.Property(e => e.pg_shopid)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('barunson2')")
                    .HasComment("PG아이디");

                entity.Property(e => e.pg_status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("사용안함");

                entity.Property(e => e.pg_tid)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("이니시스 TID");

                entity.Property(e => e.point_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("적립금");

                entity.Property(e => e.printW_status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("인쇄 대기 상태");

                entity.Property(e => e.print_color)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("칼라내지 인쇄 색상");

                entity.Property(e => e.print_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("인쇄비");

                entity.Property(e => e.print_type)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .HasComment("이니셜 청첩장의 인쇄타입");

                entity.Property(e => e.reduce_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("쿠폰할인금액");

                entity.Property(e => e.sales_Gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .HasComment("B:제휴,H:프페 제휴, SA:비핸즈, SS:프페,SB: 바른손, ST:더카드,D:대리점 , P:아웃바운드, Q:지역대리점");

                entity.Property(e => e.sasik_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("사식비");

                entity.Property(e => e.settle_cancel_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("결제취소일");

                entity.Property(e => e.settle_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("결제일");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("결제방법(1:계좌이체,3:무통장,2,6:카드, 8:카카오페이)");

                entity.Property(e => e.settle_price).HasComment("결제금액");

                entity.Property(e => e.settle_status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("결제상태 (0:결제이전/ 1:가상계좌입금전/ 2:결제완료/ 3,5:결제취소)");

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("(0:원래의 사이트,1:제휴사,3:제휴사 커스터마이징,4:사고건)");

                entity.Property(e => e.src_CloseCopy_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("원고마감 처리일");

                entity.Property(e => e.src_PrintCopy_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("원고출력자");

                entity.Property(e => e.src_ap_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("주문승인 처리자");

                entity.Property(e => e.src_ap_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_cancel_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("주문 취소자");

                entity.Property(e => e.src_cancel_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("주문 취소일");

                entity.Property(e => e.src_compose_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("초안작성자");

                entity.Property(e => e.src_compose_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("초안작성일");

                entity.Property(e => e.src_compose_mod_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("초안수정자");

                entity.Property(e => e.src_compose_mod_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("초안 최종 수정일");

                entity.Property(e => e.src_confirm_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("초안 확정일");

                entity.Property(e => e.src_erp_date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("ERP전송일");

                entity.Property(e => e.src_jebon_commit_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("제본 완료일");

                entity.Property(e => e.src_jebon_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("제본시작일");

                entity.Property(e => e.src_mini_cut_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("사용 안함");

                entity.Property(e => e.src_mini_packing_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("사용 안함");

                entity.Property(e => e.src_mini_print_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("사용 안함");

                entity.Property(e => e.src_modRequest_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("초안 최종 수정 요청일");

                entity.Property(e => e.src_packing_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("포장 처리일");

                entity.Property(e => e.src_printCopy_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("원고출력 처리일");

                entity.Property(e => e.src_printW_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("인쇄대기 처리일");

                entity.Property(e => e.src_print_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("인쇄처리자");

                entity.Property(e => e.src_print_commit_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("인쇄 완료일");

                entity.Property(e => e.src_print_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("인쇄 처리일");

                entity.Property(e => e.src_printer_seq).HasComment("인쇄소(0:내부,1:내부-구분,2:내부-3층,3:학술,4:성원,5:대리점)");

                entity.Property(e => e.src_sendW_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("배송대기 처리일(현재 사용안함)");

                entity.Property(e => e.src_send_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("배송 처리일");

                entity.Property(e => e.status_seq).HasComment("1:주문 삭제 / 0:주문진행중 / 1:주문완료/ 3:주문취소/ 5:결제취소/ 6:초안수정요청/ 7:초안등록/ 8:초안수정등록/ 9:컨펌완료/ 10:인쇄대기/ 11:인쇄중/ 12:인쇄완료/ 13:제본/ 14:포장/ 15:발송");

                entity.Property(e => e.sticker_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("유료스티커");

                entity.Property(e => e.tmap_price).HasDefaultValueSql("((0))");

                entity.Property(e => e.trouble_type)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .HasComment("사고유형");

                entity.Property(e => e.unicef_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("유니세스 기부금");

                entity.Property(e => e.up_order_seq).HasComment("추가주문일 경우 원 주문번호");

                entity.Property(e => e.weddinfo_id)
                    .HasDefaultValueSql("((0))")
                    .HasComment(".order_seq추가주문이거나 사고건인 경우 원주문의 order_Seq가 된다.");
            });

            modelBuilder.Entity<custom_order_OtherInfo>(entity =>
            {
                entity.HasKey(e => e.ORDER_SEQ)
                    .HasName("PK__custom_o__6F0E90B89192D41F");

                entity.ToTable("custom_order_OtherInfo");

                entity.Property(e => e.ORDER_SEQ).ValueGeneratedNever();

                entity.Property(e => e.ADMIN_ID)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.EditMemo).HasMaxLength(2000);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<custom_order_WeddInfo>(entity =>
            {
                entity.HasKey(e => e.iid)
                    .IsClustered(false);

                entity.ToTable("custom_order_WeddInfo");

                entity.HasComment("카드인쇄정보");

                entity.HasIndex(e => e.weddimg_idx, "NCI-WEDDIMG_IDX")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.wedd_idx, "NCI-WEDD_IDX")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.wedd_date, "NCI_WEDD_DATE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_seq, "custom_order_WeddInfo3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AddrDirectInd)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MiniCard_Contents)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MiniCard_Contents2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MiniCard_Opt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.addr_gb)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.bible_content).HasMaxLength(4000);

                entity.Property(e => e.bible_title).HasMaxLength(200);

                entity.Property(e => e.bride_Fname_eng)
                    .HasMaxLength(100)
                    .HasComment("미니청첩장용 영문 성");

                entity.Property(e => e.bride_Fname_eng1).HasMaxLength(100);

                entity.Property(e => e.bride_Illustration)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.bride_father)
                    .HasMaxLength(100)
                    .HasComment("신부 아버지");

                entity.Property(e => e.bride_father_fname)
                    .HasMaxLength(50)
                    .HasComment("신부 아버지 성");

                entity.Property(e => e.bride_father_header)
                    .HasMaxLength(50)
                    .HasComment("신부 아버지 故");

                entity.Property(e => e.bride_father_tail)
                    .HasMaxLength(50)
                    .HasComment("신부 아버지 세례명");

                entity.Property(e => e.bride_fname)
                    .HasMaxLength(50)
                    .HasComment("신부 성");

                entity.Property(e => e.bride_initial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("스토리러브 청첩장중, 이니셜 신부 이니셜");

                entity.Property(e => e.bride_initial1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.bride_mother)
                    .HasMaxLength(100)
                    .HasComment("신부 어머니");

                entity.Property(e => e.bride_mother_fname)
                    .HasMaxLength(50)
                    .HasComment("신부 어머니 성");

                entity.Property(e => e.bride_mother_header)
                    .HasMaxLength(50)
                    .HasComment("신부 어머니 故");

                entity.Property(e => e.bride_mother_tail)
                    .HasMaxLength(50)
                    .HasComment("신부 어머니 세례명");

                entity.Property(e => e.bride_name)
                    .HasMaxLength(100)
                    .HasComment("신부이름");

                entity.Property(e => e.bride_name_eng)
                    .HasMaxLength(100)
                    .HasComment("미니청첩장용 영문 이름");

                entity.Property(e => e.bride_name_eng1).HasMaxLength(100);

                entity.Property(e => e.bride_rank)
                    .HasMaxLength(50)
                    .HasComment("신부 관계");

                entity.Property(e => e.bride_star)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.bride_tail)
                    .HasMaxLength(50)
                    .HasComment("신부 세례명");

                entity.Property(e => e.etc_comment)
                    .HasMaxLength(4000)
                    .HasComment("기타 요청사항");

                entity.Property(e => e.etc_file)
                    .HasMaxLength(500)
                    .HasComment("기타 요청사항 첨부파일");

                entity.Property(e => e.event_Day)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("예식 일");

                entity.Property(e => e.event_ampm)
                    .HasMaxLength(20)
                    .HasComment("예식 오전/오후/낮 표기");

                entity.Property(e => e.event_hour)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("예식 시");

                entity.Property(e => e.event_minute)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("예식 분");

                entity.Property(e => e.event_month)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("예식 월");

                entity.Property(e => e.event_weekname)
                    .HasMaxLength(50)
                    .HasComment("예식 요일");

                entity.Property(e => e.event_year)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("예식 년");

                entity.Property(e => e.fetype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("봉투 폰트타입");

                entity.Property(e => e.ftype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("폰트타입(0:A type,1:B type,2:C type,3:E type) ,한지카드의 경우 2:가로형,3:세로형");

                entity.Property(e => e.greeting_content)
                    .HasMaxLength(4000)
                    .HasComment("인사말 내용");

                entity.Property(e => e.groom_Fname_eng)
                    .HasMaxLength(100)
                    .HasComment("미니청첩장용 영문 성");

                entity.Property(e => e.groom_Fname_eng1).HasMaxLength(100);

                entity.Property(e => e.groom_Illustration)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.groom_father)
                    .HasMaxLength(100)
                    .HasComment("신랑 아버지");

                entity.Property(e => e.groom_father_fname)
                    .HasMaxLength(50)
                    .HasComment("신랑 아버지 성");

                entity.Property(e => e.groom_father_header)
                    .HasMaxLength(50)
                    .HasComment("신랑 아버지 故");

                entity.Property(e => e.groom_father_tail)
                    .HasMaxLength(50)
                    .HasComment("신랑 아버지 세례명");

                entity.Property(e => e.groom_fname)
                    .HasMaxLength(50)
                    .HasComment("신랑 성");

                entity.Property(e => e.groom_initial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("스토리러브 청첩장중, 이니셜 신랑 이니셜");

                entity.Property(e => e.groom_initial1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.groom_mother)
                    .HasMaxLength(100)
                    .HasComment("신랑 어머지");

                entity.Property(e => e.groom_mother_fname)
                    .HasMaxLength(50)
                    .HasComment("신랑 어머니 성");

                entity.Property(e => e.groom_mother_header)
                    .HasMaxLength(50)
                    .HasComment("신랑 어머니 故");

                entity.Property(e => e.groom_mother_tail)
                    .HasMaxLength(50)
                    .HasComment("신랑 어머니 세례명");

                entity.Property(e => e.groom_name)
                    .HasMaxLength(100)
                    .HasComment("신랑이름");

                entity.Property(e => e.groom_name_eng)
                    .HasMaxLength(100)
                    .HasComment("미니청첩장용 영문 이름");

                entity.Property(e => e.groom_name_eng1).HasMaxLength(100);

                entity.Property(e => e.groom_rank)
                    .HasMaxLength(50)
                    .HasComment("신랑 관계");

                entity.Property(e => e.groom_star)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.groom_tail)
                    .HasMaxLength(50)
                    .HasComment("신랑 세례명");

                entity.Property(e => e.hymn_content1).HasMaxLength(4000);

                entity.Property(e => e.hymn_content2).HasMaxLength(4000);

                entity.Property(e => e.hymn_title1).HasMaxLength(200);

                entity.Property(e => e.hymn_title2).HasMaxLength(200);

                entity.Property(e => e.invite_name)
                    .HasMaxLength(1000)
                    .HasComment("초대장일 경우 초대인 이름");

                entity.Property(e => e.isNotMapPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("1:약도인쇄안함");

                entity.Property(e => e.isNotPlacePrint)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.isbride_tail)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("신부 세례명 표기 여부");

                entity.Property(e => e.isgroom_tail)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("신랑 세례명 표기 여부");

                entity.Property(e => e.keyimg)
                    .HasMaxLength(200)
                    .HasComment("현재는 티맵 키워드 저장");

                entity.Property(e => e.lunar_event_Date)
                    .HasMaxLength(50)
                    .HasComment("음력일");

                entity.Property(e => e.lunar_yes_or_no)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("음력표기 여부");

                entity.Property(e => e.map_id).HasComment("자동초안주문인 경우 사용 약도ID");

                entity.Property(e => e.map_info)
                    .HasMaxLength(4000)
                    .HasComment("예식장 추가정보");

                entity.Property(e => e.map_trans_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("약도 전송 방법");

                entity.Property(e => e.map_uploadfile)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("사용안함");

                entity.Property(e => e.msg1).HasMaxLength(400);

                entity.Property(e => e.picture1)
                    .HasMaxLength(500)
                    .HasComment("포토청첩장일 경우 사용자 이미지");

                entity.Property(e => e.picture2)
                    .HasMaxLength(500)
                    .HasComment("포토청첩장일 경우 사용자 이미지");

                entity.Property(e => e.picture3)
                    .HasMaxLength(500)
                    .HasComment("포토청첩장일 경우 사용자 이미지");

                entity.Property(e => e.picture4).HasMaxLength(500);

                entity.Property(e => e.picture5).HasMaxLength(500);

                entity.Property(e => e.picture6).HasMaxLength(500);

                entity.Property(e => e.picture7).HasMaxLength(500);

                entity.Property(e => e.picture8).HasMaxLength(500);

                entity.Property(e => e.traffic_id).HasComment("자동초안주문인 경우 사용 교통편ID");

                entity.Property(e => e.wedd_addr)
                    .HasMaxLength(1000)
                    .HasComment("예식장 주소");

                entity.Property(e => e.wedd_date)
                    .HasMaxLength(100)
                    .HasComment("예식일(주문단에서 입력받은 행사일 정보 조합)");

                entity.Property(e => e.wedd_ename).HasMaxLength(400);

                entity.Property(e => e.wedd_idx).HasComment("바른손 예식장 키값");

                entity.Property(e => e.wedd_name)
                    .HasMaxLength(200)
                    .HasComment("예식장 이름");

                entity.Property(e => e.wedd_phone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("예식장 전화번호");

                entity.Property(e => e.wedd_place)
                    .HasMaxLength(200)
                    .HasComment("예식장소");

                entity.Property(e => e.wedd_road_Addr).HasMaxLength(1000);

                entity.Property(e => e.weddimg_idx).HasComment("바른손 약도 키값");

                entity.Property(e => e.worship_content).HasMaxLength(4000);

                entity.Property(e => e.worship_header).HasMaxLength(4);

                entity.Property(e => e.worship_name).HasMaxLength(200);

                entity.Property(e => e.worship_title).HasMaxLength(200);
            });

            modelBuilder.Entity<custom_order_agreement>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CUSTOM_ORDER_AGREEMENT");

                entity.ToTable("custom_order_agreement");

                entity.HasIndex(e => e.order_seq, "custom_order_agreement_Index_1");

                entity.Property(e => e.seq).HasComment("increment");

                entity.Property(e => e.agreement_type)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('africa')")
                    .HasComment("동의 타입 (africa, unicef)");

                entity.Property(e => e.is_agreemented)
                    .HasDefaultValueSql("((1))")
                    .HasComment("동의여부 0, 1");

                entity.Property(e => e.is_print)
                    .HasDefaultValueSql("((0))")
                    .HasComment("봉투 프린트 여부 0, 1");

                entity.Property(e => e.order_seq).HasComment("custom_order.order_seq");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록시간");
            });

            modelBuilder.Entity<custom_order_cprice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("custom_order_cprice");

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<custom_order_file>(entity =>
            {
                entity.HasKey(e => e.order_seq);

                entity.HasComment("제휴 인쇄cdr 파일 관리");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.cont_file1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.cont_file2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.cont_file3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.cont_file4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.env_file1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.env_file2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.env_file3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.env_file4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.env_file5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.regdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<custom_order_history>(entity =>
            {
                entity.HasKey(e => e.id)
                    .HasName("PK_custom_order_choan_history")
                    .IsClustered(false);

                entity.ToTable("custom_order_history");

                entity.HasComment("빠른손-처리히스토리 내역");

                entity.HasIndex(e => e.htype, "NCI-HTYPE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.order_seq, e.htype, e.reg_date }, "NCI-ORDER_SEQ-HTYPE-REG_DATE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.reg_date, "NCI-REG_DATE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.order_seq, e.reg_date, e.memo }, "nind_order_seq")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("담당자");

                entity.Property(e => e.htype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('초안등록')")
                    .HasComment("수정섹션");

                entity.Property(e => e.ipAddress)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("아이피정보");

                entity.Property(e => e.isVisible)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .HasComment("히스토리보기 여부");

                entity.Property(e => e.memo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.order_seq).HasComment("주문번호");

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.system_sql)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("관련 쿼리문");
            });

            modelBuilder.Entity<custom_order_item>(entity =>
            {
                entity.ToTable("custom_order_item");

                entity.HasComment("주문상세내역");

                entity.HasIndex(e => e.card_seq, "IDX_iorder__card_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.item_count, "IDX_iorder__item_count")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.item_type, "IDX_iorder__item_type")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_seq, "IDX_iorder__order_seq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.addnum_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("추가수량비용(셋트 이외의 수량에 대한 합계비용)");

                entity.Property(e => e.discount_rate).HasComment("할인율");

                entity.Property(e => e.item_count).HasComment("주문수량");

                entity.Property(e => e.item_price).HasComment("소비자가");

                entity.Property(e => e.item_sale_price).HasComment("판매가");

                entity.Property(e => e.item_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength(true)
                    .HasComment("manage_code.itemt_type");

                entity.Property(e => e.memo1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("기타정보(미니청첩장의경우 인쇄색상등)");
            });

            modelBuilder.Entity<custom_order_passbook>(entity =>
            {
                entity.ToTable("custom_order_passbook");

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_tbl)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.passbook_type_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.send_msg)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.sender_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<custom_order_plist>(entity =>
            {
                entity.ToTable("custom_order_plist");

                entity.HasComment("주문관련 인쇄판정보");

                entity.HasIndex(e => e.card_seq, "IDX_porder__card_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.print_count, "IDX_porder__print_count")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.print_date, "IDX_porder__print_date")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.print_type, "IDX_porder__print_type")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.order_seq, "custom_order_plist8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.isNotPrint, "nind_isnotprint")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.EnvSpecialType)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.choan_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("초안작성일");

                entity.Property(e => e.choanmerge_date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("코렐 병합일");

                entity.Property(e => e.env_addr)
                    .HasMaxLength(600)
                    .HasComment("주소");

                entity.Property(e => e.env_addr_detail)
                    .HasMaxLength(400)
                    .HasComment("상세주소");

                entity.Property(e => e.env_addr_type).HasDefaultValueSql("((0))");

                entity.Property(e => e.env_hphone)
                    .HasMaxLength(50)
                    .HasComment("핸드폰 번호");

                entity.Property(e => e.env_hphone2)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("보내는 사람 연락처");

                entity.Property(e => e.env_person1)
                    .HasMaxLength(100)
                    .HasComment("이름1");

                entity.Property(e => e.env_person1_header)
                    .HasMaxLength(50)
                    .HasComment("故");

                entity.Property(e => e.env_person1_tail)
                    .HasMaxLength(100)
                    .HasComment("이름1 세례명");

                entity.Property(e => e.env_person2)
                    .HasMaxLength(100)
                    .HasComment("이름2");

                entity.Property(e => e.env_person2_header)
                    .HasMaxLength(50)
                    .HasComment("故");

                entity.Property(e => e.env_person2_tail)
                    .HasMaxLength(100)
                    .HasComment("이름2 세례명");

                entity.Property(e => e.env_person_Tail)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('배상')")
                    .HasComment("귀하");

                entity.Property(e => e.env_phone)
                    .HasMaxLength(50)
                    .HasComment("전화번호");

                entity.Property(e => e.env_road_addr).HasMaxLength(300);

                entity.Property(e => e.env_road_addr_detail).HasMaxLength(200);

                entity.Property(e => e.env_zip)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("우편번호");

                entity.Property(e => e.etc_comment)
                    .HasMaxLength(4000)
                    .HasComment("기타 요청 내용");

                entity.Property(e => e.etc_info_s)
                    .HasMaxLength(200)
                    .HasComment("기타 정보(미니 인쇄 색상 등)");

                entity.Property(e => e.imgFolder)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("초안이미지 저장 폴더");

                entity.Property(e => e.imgName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("초안이미지 파일명");

                entity.Property(e => e.isBasic)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("기본인쇄판 여부");

                entity.Property(e => e.isEnv_person_tail)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isFPrint)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("1일 경우 앞면 인쇄판");

                entity.Property(e => e.isNotPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("1: 인쇄를 안하는 경우(백봉투) / 2:세로형 봉투:축하해 주셔서 감사합니다. /3:세로형 봉투:\"\"\"\"祝賀해 주셔서 感謝합니다. /4:가로형 봉투:축하해 주셔서 감사합니다. /5:가로형 봉투:\"\"\"\"祝賀해 주셔서 感謝합니다.");

                entity.Property(e => e.isNotPrint_Addr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.isNotSet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("추가 주문시, 카드없이 내지만 주문하는 경우 1");

                entity.Property(e => e.isPostMark)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("요금별납 인쇄 여부");

                entity.Property(e => e.isQrcode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true)
                    .HasComment("QRCODE 인쇄여부");

                entity.Property(e => e.isZipBox)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true)
                    .HasComment("받는 사람 우편번호 박스 표기 여부");

                entity.Property(e => e.option_price).HasComment("옵션 비용");

                entity.Property(e => e.order_filename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("판정보를 파일 업로드시 파일명.");

                entity.Property(e => e.postname)
                    .HasMaxLength(50)
                    .HasComment("요금별납 인쇄일 경우 해당 우체국명");

                entity.Property(e => e.postname_tail)
                    .HasMaxLength(50)
                    .HasComment("요금별납 인쇄할 경우 우체국/우편집중국 등의 정보");

                entity.Property(e => e.preview_seq).HasComment("관련 초안정보(변환 이전 데이터, 사용안함)");

                entity.Property(e => e.print_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("인쇄 담당자");

                entity.Property(e => e.print_count).HasComment("인쇄 수량");

                entity.Property(e => e.print_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("인쇄일");

                entity.Property(e => e.print_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("C:카드,I:내지,E:봉투, M:미니,P:약도카드");

                entity.Property(e => e.pstatus).HasComment("0:요청, 1:초안등록");

                entity.Property(e => e.recv_tail)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('귀하')")
                    .HasComment("받는 사람 명칭정보(귀하 등)");

                entity.Property(e => e.title)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("판이름");

                entity.Property(e => e.up_id).HasComment("추가주문시 주문한 원주문의 판정보");
            });

            modelBuilder.Entity<custom_order_plistAddD>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("custom_order_plistAddD");

                entity.HasComment("카드 추가판 날짜 정보");

                entity.Property(e => e.AddrDirectInd)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.addr_gb)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("0:둘다선택, 1:둘다선택안함, 2:지번주소만, 3:도로명주소만");

                entity.Property(e => e.event_ampm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("예식 오전/오후/낮 표기");

                entity.Property(e => e.event_day)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("예식 일");

                entity.Property(e => e.event_hour)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("예식 시");

                entity.Property(e => e.event_minute)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("예식 분");

                entity.Property(e => e.event_month)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("예식 월");

                entity.Property(e => e.event_weekname)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("예식 요일");

                entity.Property(e => e.event_year)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("예식 년");

                entity.Property(e => e.isNotMapPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.lunar_event_date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("음력일");

                entity.Property(e => e.lunar_yes_or_no)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("음력표기 여부");

                entity.Property(e => e.map_id).HasComment("AI 약도 아이디");

                entity.Property(e => e.map_trans_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.map_uploadfile)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.traffic_id).HasComment("AI 교통편 아이디");

                entity.Property(e => e.wedd_addr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("예식장 주소");

                entity.Property(e => e.wedd_idx)
                    .HasDefaultValueSql("((0))")
                    .HasComment("바른손 예식장 키값");

                entity.Property(e => e.wedd_imgidx).HasComment("바른손 약도 키값");

                entity.Property(e => e.wedd_name)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasComment("예식장 이름");

                entity.Property(e => e.wedd_phone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("예식장 전화번호");

                entity.Property(e => e.wedd_place)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("예식장소");

                entity.Property(e => e.wedd_road_Addr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("도로명주소");
            });

            modelBuilder.Entity<custom_order_plistAddG>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("custom_order_plistAddG");

                entity.HasComment("카드 추가판 인사말 정보");

                entity.Property(e => e.greeting_content)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("인사말");
            });

            modelBuilder.Entity<custom_order_plistAddN>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("custom_order_plistAddN");

                entity.HasComment("카드 추가판 이름 정보");

                entity.Property(e => e.bride_father)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComment("신부 아버지");

                entity.Property(e => e.bride_father_fname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("신부 아버지 성");

                entity.Property(e => e.bride_father_header)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("신부 아버지 故");

                entity.Property(e => e.bride_father_tail)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("신부 아버지 세례명");

                entity.Property(e => e.bride_fname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("신부 성");

                entity.Property(e => e.bride_mother)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComment("신부 어머니");

                entity.Property(e => e.bride_mother_fname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComment("신부 어머니 성");

                entity.Property(e => e.bride_mother_header)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("신부 어머니 故");

                entity.Property(e => e.bride_mother_tail)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("신부 어머니 세례명");

                entity.Property(e => e.bride_name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("신부이름");

                entity.Property(e => e.bride_rank)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("신부 관계");

                entity.Property(e => e.bride_tail)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("신부 세례명");

                entity.Property(e => e.groom_father)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComment("신랑 아버지");

                entity.Property(e => e.groom_father_fname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("신랑 아버지 성");

                entity.Property(e => e.groom_father_header)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("신랑 아버지 故");

                entity.Property(e => e.groom_father_tail)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("신랑 아버지 세례명");

                entity.Property(e => e.groom_fname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("신랑 성");

                entity.Property(e => e.groom_mother)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComment("신랑 어머니");

                entity.Property(e => e.groom_mother_fname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("신랑 어머니 성");

                entity.Property(e => e.groom_mother_header)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("신랑 어머니 故");

                entity.Property(e => e.groom_mother_tail)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("신랑 어머니 세례명");

                entity.Property(e => e.groom_name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("신랑이름");

                entity.Property(e => e.groom_rank)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("신랑 관계");

                entity.Property(e => e.groom_tail)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("신랑 세례명");

                entity.Property(e => e.invite_name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("초대장일 경우 초대인 이름");

                entity.Property(e => e.isbride_tail)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("신부 세례명 표기 여부");

                entity.Property(e => e.isgroom_tail)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("신랑 세례명 표기 여부");
            });

            modelBuilder.Entity<custom_order_plistAddT>(entity =>
            {
                entity.ToTable("custom_order_plistAddT");

                entity.HasComment("카드 추가판 기타내용");

                entity.Property(e => e.contents)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ttype)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<custom_order_plistAddText>(entity =>
            {
                entity.HasKey(e => new { e.pid, e.seq });

                entity.ToTable("custom_order_plistAddText");

                entity.Property(e => e.contents)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<custom_order_plistSVG>(entity =>
            {
                entity.HasKey(e => e.pid);

                entity.ToTable("custom_order_plistSVG");

                entity.Property(e => e.pid).ValueGeneratedNever();

                entity.Property(e => e.svgData)
                    .IsRequired()
                    .HasColumnType("text");
            });

            modelBuilder.Entity<custom_order_plist_svg>(entity =>
            {
                entity.HasKey(e => e.pid);

                entity.ToTable("custom_order_plist_svg");

                entity.Property(e => e.pid).ValueGeneratedNever();

                entity.Property(e => e.err_msg)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<custom_order_printW>(entity =>
            {
                entity.HasKey(e => e.order_seq);

                entity.ToTable("custom_order_printW");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.proc_date1).HasColumnType("smalldatetime");

                entity.Property(e => e.proc_date2).HasColumnType("smalldatetime");

                entity.Property(e => e.proc_date3).HasColumnType("smalldatetime");

                entity.Property(e => e.proc_date4).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<custom_order_print_state>(entity =>
            {
                entity.ToTable("custom_order_print_state");

                entity.Property(e => e.pdate)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<custom_order_printjob>(entity =>
            {
                entity.HasKey(e => new { e.cdate, e.cseq, e.pid });

                entity.ToTable("custom_order_printjob");

                entity.Property(e => e.cdate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.pdate)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.printer_date).HasColumnType("smalldatetime");

                entity.Property(e => e.printer_id)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ptype)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<custom_order_quick>(entity =>
            {
                entity.ToTable("custom_order_quick");

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.quick_dept)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.quick_driver_no)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.quick_reason)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.quick_type)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.receiver_address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.sender_code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<custom_order_refund>(entity =>
            {
                entity.ToTable("custom_order_refund");

                entity.HasComment("환불 관련");

                entity.Property(e => e.REFUND_TYPE_CODE)
                    .HasMaxLength(200)
                    .HasComment("환불세부유형 manage_code.code");

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.bank_account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("환불은행계좌");

                entity.Property(e => e.bank_name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("환물은행명");

                entity.Property(e => e.bank_user)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("환불은행 예금주");

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("주문자명");

                entity.Property(e => e.order_tbl)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.refund_date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("환불일");

                entity.Property(e => e.refund_gubun)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("환불 유형");

                entity.Property(e => e.refund_msg)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("메모");

                entity.Property(e => e.refund_price).HasComment("환불금액");

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.settle_date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("결제일");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("결제방법 (1:계좌이체,3:무통장,2,6:카드)");

                entity.Property(e => e.settle_price)
                    .HasDefaultValueSql("((0))")
                    .HasComment("결제금액");
            });

            modelBuilder.Entity<custom_order_tax>(entity =>
            {
                entity.ToTable("custom_order_tax");

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.msg)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.upfile)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<custom_order_tmap>(entity =>
            {
                entity.HasKey(e => e.order_seq);

                entity.ToTable("custom_order_tmap");

                entity.HasComment("old) TMAP");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.cf_date).HasColumnType("smalldatetime");

                entity.Property(e => e.nick_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.req_date).HasColumnType("smalldatetime");

                entity.Property(e => e.rstatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.waddr)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.wdate)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.wname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<custom_order_trouble>(entity =>
            {
                entity.HasKey(e => e.order_seq)
                    .HasName("PK__custom_o__82F29E50399ADDCB");

                entity.ToTable("custom_order_trouble");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.QcNumber)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RequestOutDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.trouble_comment)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.trouble_type)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.upfile)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<custom_order_unicef>(entity =>
            {
                entity.HasKey(e => e.order_seq);

                entity.ToTable("custom_order_unicef");

                entity.HasComment("유니세프 기부금관련정보");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.isjumin)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isulogo_print)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<data_dump_dt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("data_dump_dt");

                entity.Property(e => e.dump_dt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<dcake_address>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dcake_address");

                entity.Property(e => e.addr)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.branch)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.phone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<deardeer_order_rel>(entity =>
            {
                entity.HasKey(e => e.order_seq);

                entity.ToTable("deardeer_order_rel");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.partner_shop_id).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<deardeer_product>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("deardeer_product");

                entity.Property(e => e.code)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<del_tmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("del_tmp");

                entity.Property(e => e.delcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<design_env_group>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("design_env_group");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<eco_card_list>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("eco_card_list");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<env_image>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("env_image");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.etc_memo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.style_gb)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<event_CardDiscount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("event_CardDiscount");
            });

            modelBuilder.Entity<event_sale_carddiscount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("event_sale_carddiscount");
            });

            modelBuilder.Entity<event_sms_coupon>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__event_sm__DDDFBCBEA8108DDE");

                entity.ToTable("event_sms_coupon");

                entity.Property(e => e.created_tmstmp).HasColumnType("datetime");

                entity.Property(e => e.hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<evt_himo_coupon>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("evt_himo_coupon");

                entity.HasComment("하이모 이벤트");

                entity.Property(e => e.coupon_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.create_Date).HasColumnType("datetime");

                entity.Property(e => e.hphone)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<evt_leaflet_Card>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("evt_leaflet_Card");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<evt_mem_regist_gift>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__evt_mem___DDDFBCBEB791D5B5");

                entity.ToTable("evt_mem_regist_gift");

                entity.Property(e => e.end_date).HasColumnType("datetime");

                entity.Property(e => e.give_Date).HasColumnType("datetime");

                entity.Property(e => e.regist_Date).HasColumnType("datetime");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<evt_memoerybook_gift>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("evt_memoerybook_gift");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.gift_card_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<evt_travelpack_st>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("evt_travelpack_st");

                entity.Property(e => e.regist_Date).HasColumnType("datetime");

                entity.Property(e => e.travelpack_yn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_ATTEND_LIST>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_ewed_ATTEND_LIST__seq");

                entity.ToTable("ewed_ATTEND_LIST");

                entity.Property(e => e.seq).ValueGeneratedNever();

                entity.Property(e => e.buy_card_UID)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.mdate).HasColumnType("datetime");

                entity.Property(e => e.rdate).HasColumnType("datetime");

                entity.Property(e => e.result)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.rmail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.rname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_BUY_CARD>(entity =>
            {
                entity.HasKey(e => e.buy_card_SEQ);

                entity.ToTable("ewed_BUY_CARD");

                entity.Property(e => e.buy_card_SEQ).ValueGeneratedNever();

                entity.Property(e => e.buy_card_DATE).HasColumnType("datetime");

                entity.Property(e => e.buy_card_MAXDATE).HasColumnType("datetime");

                entity.Property(e => e.buy_card_UID)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_BUY_CARD_CONTENT>(entity =>
            {
                entity.HasKey(e => e.buy_card_SEQ);

                entity.ToTable("ewed_BUY_CARD_CONTENT");

                entity.Property(e => e.buy_card_SEQ).ValueGeneratedNever();

                entity.Property(e => e.buy_AMPM)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.buy_BRIDE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.buy_DAY)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.buy_GROOM)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.buy_HOUR)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.buy_LUNAR)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.buy_MENT).HasColumnType("text");

                entity.Property(e => e.buy_MENT2).HasColumnType("text");

                entity.Property(e => e.buy_MINUTE)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.buy_MONTH)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.buy_PLACE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.buy_WEEK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.buy_YEAR)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.man_description).HasColumnType("text");

                entity.Property(e => e.place_addr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.place_file_insert)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.place_file_path)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.place_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.place_phone)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.resolution).HasColumnType("text");

                entity.Property(e => e.we_file_path)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.we_meet).HasColumnType("text");

                entity.Property(e => e.woman_description).HasColumnType("text");

                entity.HasOne(d => d.buy_card_SEQNavigation)
                    .WithOne(p => p.ewed_BUY_CARD_CONTENT)
                    .HasForeignKey<ewed_BUY_CARD_CONTENT>(d => d.buy_card_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ewed_BUY_CARD_CONTENT_ewed_BUY_CARD");
            });

            modelBuilder.Entity<ewed_BUY_SETTLE_INFO>(entity =>
            {
                entity.HasKey(e => e.buy_card_SEQ);

                entity.ToTable("ewed_BUY_SETTLE_INFO");

                entity.Property(e => e.buy_card_SEQ).ValueGeneratedNever();

                entity.Property(e => e.AuthCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CardCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CardQuota)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OrderNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PGAuthDate)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PGAuthTime)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.PayMethod)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.QuotaInterest)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ResultCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ResultMsg)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.buy_card_SEQNavigation)
                    .WithOne(p => p.ewed_BUY_SETTLE_INFO)
                    .HasForeignKey<ewed_BUY_SETTLE_INFO>(d => d.buy_card_SEQ)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ewed_BUY_SETTLE_INFO_ewed_BUY_CARD");
            });

            modelBuilder.Entity<ewed_CARD_INFO>(entity =>
            {
                entity.HasKey(e => e.card_seq);

                entity.ToTable("ewed_CARD_INFO");

                entity.Property(e => e.CARD_COMPOSITION)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_DESCRIPTION)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_EtcMsg)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_FEATURE)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_S)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_INDATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CARD_NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_SHAPE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_SWF)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_TITLE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CATE_L_CODE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CATE_S_CODE)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Display_order).HasDefaultValueSql("(0)");

                entity.Property(e => e.attend_use_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.auto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.bujoo_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_img1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_img2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_img3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.card_img4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.event_img)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.isBest)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.isFull)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isview_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.job_before)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.logo_path)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.miniCD_use_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.music_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_guide)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.sms_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.swf_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true);

                entity.Property(e => e.visit_use_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.wd_bgcolor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.wd_height)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.wd_size)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.wd_width)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_CARD_USER_COMMNET>(entity =>
            {
                entity.HasKey(e => e.CMT_SEQ);

                entity.ToTable("ewed_CARD_USER_COMMNET");

                entity.Property(e => e.COMMENT)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.DIV)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsBest)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.MEMBER_NAME)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_UID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REGDATE).HasColumnType("datetime");

                entity.Property(e => e.SERVICE_MENT)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.TITLE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.site_div)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_Music_Datum>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_ewed_Music_Data__seq");

                entity.Property(e => e.m_file)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.m_title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.mdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ewed_Notice>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_ewed_Notice__seq");

                entity.ToTable("ewed_Notice");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_Notice_daum>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("ewed_Notice_daum");

                entity.Property(e => e.contents).HasColumnType("text");

                entity.Property(e => e.div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.viewcnt).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ewed_Open_Text>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_ewed_Open_Text__seq");

                entity.ToTable("ewed_Open_Text");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.idate).HasColumnType("datetime");

                entity.Property(e => e.pwd)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_Order_Detail>(entity =>
            {
                entity.HasKey(e => e.order_seq)
                    .HasName("PK_CIDX_ewed_Order_Detail__order_seq");

                entity.ToTable("ewed_Order_Detail");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.attend_use_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.b_father)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.b_mother)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.b_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.b_position)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.g_father)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.g_mother)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.g_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.g_position)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.greeting).HasColumnType("text");

                entity.Property(e => e.interview1).HasColumnType("text");

                entity.Property(e => e.interview2).HasColumnType("text");

                entity.Property(e => e.interview3).HasColumnType("text");

                entity.Property(e => e.interview4).HasColumnType("text");

                entity.Property(e => e.interview5).HasColumnType("text");

                entity.Property(e => e.lunar_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.lunar_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.man_story).HasColumnType("text");

                entity.Property(e => e.man_story_title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.map_file)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.map_memo).HasColumnType("text");

                entity.Property(e => e.map_send_way)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.music_file)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.music_use_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.p_input_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.photo_use_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.place_addr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.place_data_way)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.place_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.place_phone)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.place_wedding)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.to_bride).HasColumnType("text");

                entity.Property(e => e.to_groom).HasColumnType("text");

                entity.Property(e => e.traffic).HasColumnType("text");

                entity.Property(e => e.visit_use_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.we_b_ment).HasColumnType("text");

                entity.Property(e => e.we_file)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.we_g_ment).HasColumnType("text");

                entity.Property(e => e.we_meet).HasColumnType("text");

                entity.Property(e => e.we_plan).HasColumnType("text");

                entity.Property(e => e.we_use_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.wedd_food)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_d)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_h)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_m)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_mn)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_story).HasColumnType("text");

                entity.Property(e => e.wedding_story_title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_t)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_y)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.woman_story).HasColumnType("text");

                entity.Property(e => e.woman_story_title)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_Order_MemoDay>(entity =>
            {
                entity.HasKey(e => e.m_seq)
                    .HasName("PK_CIDX_ewed_Order_MemoDay__m_seq");

                entity.ToTable("ewed_Order_MemoDay");

                entity.HasIndex(e => e.order_seq, "IDX__order_seq")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.seq, "IDX__seq")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.m_contents)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.m_day)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.m_month)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.m_title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.m_year)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_Order_Photo>(entity =>
            {
                entity.HasKey(e => e.order_seq)
                    .HasName("PK_CIDX_ewed_Order_Photo__order_seq");

                entity.ToTable("ewed_Order_Photo");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.book_ment1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.book_ment2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.book_ment3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.book_ment4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.book_ment5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.book_ment6)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.order_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.photo1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_book1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_book2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_book3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_book4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_book5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_book6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_tmp1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_tmp2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_tmp3)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_Order_Settle>(entity =>
            {
                entity.HasKey(e => e.order_seq)
                    .HasName("PK_CIDX_ewed_Order_Settle__order_seq");

                entity.ToTable("ewed_Order_Settle");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.PGcancel_date)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.auth_date)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.auth_no)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.auth_time)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.company_code)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.isdacom)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("1일 경우 데이콤 거래");

                entity.Property(e => e.order_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_no)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.result_msg)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.transaction_no)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.virReturn_date)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_RESULT_LIST>(entity =>
            {
                entity.HasKey(e => e.seq_idx);

                entity.ToTable("ewed_RESULT_LIST");

                entity.Property(e => e.seq_idx).ValueGeneratedNever();

                entity.Property(e => e.mailto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.r_mail)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.return_date).HasColumnType("datetime");

                entity.Property(e => e.send_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_SM>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_ewed_SMS__seq");

                entity.ToTable("ewed_SMS");

                entity.Property(e => e.from_no)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.mdate).HasColumnType("datetime");

                entity.Property(e => e.ret_value)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.to_message)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.to_no)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_SMS_Service>(entity =>
            {
                entity.HasKey(e => e.uid);

                entity.ToTable("ewed_SMS_Service");

                entity.Property(e => e.uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.etc)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.isMember)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.regdate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ewed_VISIT_NOTE>(entity =>
            {
                entity.HasKey(e => e.v_seq)
                    .HasName("PK_CIDX_ewed_VISIT_NOTE__v_seq");

                entity.ToTable("ewed_VISIT_NOTE");

                entity.Property(e => e.mdate).HasColumnType("datetime");

                entity.Property(e => e.v_message)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.v_name)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.v_pwd)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.v_title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_Visit>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("ewed_Visit");

                entity.Property(e => e.mdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.v_message)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.v_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.v_pwd)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.v_title)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_Wedding_Attend>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_ewed_Wedding_Attend__seq");

                entity.ToTable("ewed_Wedding_Attend");

                entity.Property(e => e.seq).ValueGeneratedNever();

                entity.Property(e => e.attend_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mdate).HasColumnType("datetime");

                entity.Property(e => e.note)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.rdate).HasColumnType("datetime");

                entity.Property(e => e.rmail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.rname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.senderDiv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_address>(entity =>
            {
                entity.HasKey(e => e.no)
                    .IsClustered(false);

                entity.ToTable("ewed_address");

                entity.HasIndex(e => new { e.uid, e.name }, "CIDX_UID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.addr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.birth_d)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.birth_m)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.birth_y)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.c_addr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.c_addr_detail)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.c_phone)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.c_zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.c_zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.company)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.h_addr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.h_addr_detail)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.h_phone)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.h_zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.h_zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.hp)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.memo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.rdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_coupon>(entity =>
            {
                entity.HasKey(e => new { e.coupon_code, e.use_type });

                entity.ToTable("ewed_coupon");

                entity.Property(e => e.coupon_code)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.use_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('E')")
                    .IsFixedLength(true);

                entity.Property(e => e.isUsable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ewed_event_mailing>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_ewed_event_mailing__seq");

                entity.ToTable("ewed_event_mailing");

                entity.Property(e => e.mdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.send)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.umail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_event_question>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK_CIDX_ewed_event_question__seq");

                entity.ToTable("ewed_event_question");

                entity.Property(e => e.question_1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.question_2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.question_3)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.question_4)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.question_5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_miniCD_INFO>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ewed_miniCD_INFO");

                entity.Property(e => e.CARD_COMPOSITION)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_DESCRIPTION)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_EtcMsg)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_FEATURE)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_S)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_INDATE).HasColumnType("datetime");

                entity.Property(e => e.CARD_NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_SHAPE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_SWF)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_TITLE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CATE_L_CODE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CATE_S_CODE)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.attend_use_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.auto_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_seq).ValueGeneratedOnAdd();

                entity.Property(e => e.isBest)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isFull)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.miniCD_use_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.swf_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.visit_use_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.wd_bgcolor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.wd_height)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.wd_size)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.wd_width)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_order_detail_B>(entity =>
            {
                entity.HasKey(e => e.order_seq);

                entity.ToTable("ewed_order_detail_B");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.Mannam)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Mirae)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.aboutMan)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.aboutWoman)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.basic_photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_order_detail_D>(entity =>
            {
                entity.HasKey(e => e.order_seq);

                entity.ToTable("ewed_order_detail_D");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.basic_photo1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.basic_photo2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.basic_photo3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.map_photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.music_file)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.photo_album4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.photo_album5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.photo_album6)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.photo_album_desc1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc5)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc6)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum6)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_order_detail_P1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ewed_order_detail_P1");

                entity.Property(e => e.HerStory)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.HerStory_photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HerStory_title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HisStory)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.HisStory_photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HisStory_title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WeddStory)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.WeddStory_photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WeddStory_title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.basic_photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.music_file)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc5)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum5)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_order_detail_P2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ewed_order_detail_P2");

                entity.Property(e => e.basic_photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.basic_photo_blur)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.food)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.food_photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.herStory)
                    .HasMaxLength(700)
                    .IsUnicode(false);

                entity.Property(e => e.herStory_title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.hisStory)
                    .HasMaxLength(700)
                    .IsUnicode(false);

                entity.Property(e => e.hisStory_title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.music_file)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc5)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.we1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.we2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.we3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.we4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.we5)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.we_photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_order_detail_P3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ewed_order_detail_P3");

                entity.Property(e => e.basic_photo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.detail_contents)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.detail_title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.headline_contents)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.headline_photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.headline_snphoto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.headline_title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.interview_contents)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.interview_title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.music_file)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc5)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_snalbum5)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_order_detail_P4>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ewed_order_detail_P4");

                entity.Property(e => e.basic_photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.etc_contents)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.music_file)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc5)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_order_detail_T>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ewed_order_detail_T");

                entity.Property(e => e.HerStory_Photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HerStory_Title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HisStory)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.HisStory_Title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoveLetter1)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LoveLetter2)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LoveLetter_Title2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoveLetter_photo1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoveLetter_photo2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoveLetter_title1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WeddStory)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.WeddStory_Title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WeddStory_photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.basic_photo1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.basic_photo2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.basic_photo3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.cam_file)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.herStory)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.hisStory_photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.map_photo1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.map_photo2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.map_photo3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.music_file)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album10)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album9)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc10)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc5)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc6)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc7)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc8)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_desc9)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_title1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_title10)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_title2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_title3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_title4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_title5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_title6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_title7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_title8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_album_title9)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_order_info>(entity =>
            {
                entity.HasKey(e => e.order_seq);

                entity.ToTable("ewed_order_info");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.Daum_uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.auth_time)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.bj_agency)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.bj_hp)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.bj_jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.bj_use)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.cancel_reason)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.couponseq)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.end_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.etc_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.etc_price_ment)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.isAuto)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.isNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);

                entity.Property(e => e.is_bujoo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.job_confirm_date).HasColumnType("smalldatetime");

                entity.Property(e => e.job_end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.job_start_date).HasColumnType("smalldatetime");

                entity.Property(e => e.job_status).HasDefaultValueSql("(0)");

                entity.Property(e => e.last_total_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.map_path)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.minicd_adm_msg)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("미니CD주문시 관리자 특이사항 기재");

                entity.Property(e => e.mobile)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_no)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.order_status).HasDefaultValueSql("(0)");

                entity.Property(e => e.order_tp)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.output_img)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.output_swf)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.partner_div)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pg_cancel_date)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.pg_name)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.pg_shopid)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.pg_tid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.settle_cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.settle_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.settle_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.shop_card_seq).HasComment("미니CD주문시 e청첩장 주문 카드번호");

                entity.Property(e => e.shop_order_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("미니CD주문시 e청첩장 주문 카드구문");

                entity.Property(e => e.src_erp_date).HasColumnType("datetime");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wd_file)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wd_img)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.zipcode)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ewed_order_opinion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ewed_order_opinion");

                entity.Property(e => e.BBS_SEQ).ValueGeneratedOnAdd();

                entity.Property(e => e.CONTENT)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.EMAIL)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.FILE_PATH)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NOTIFY_EMAIL_YESORNO)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.REG_DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.REPLY)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true);

                entity.Property(e => e.TITLE)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.WRITER)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.WRITER_IP)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.upfile)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_order_weddinfo>(entity =>
            {
                entity.HasKey(e => e.order_seq);

                entity.ToTable("ewed_order_weddinfo");

                entity.Property(e => e.order_seq).ValueGeneratedNever();

                entity.Property(e => e.b_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.g_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.greeting)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.greeting2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.greeting3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.greeting4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.greeting5)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.link_title)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.link_url)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.linkchk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.logo_path)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.map_file)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.map_homepage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.map_memo).HasColumnType("text");

                entity.Property(e => e.map_url)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.place_addr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.place_data_way)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.place_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.place_phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.place_wedding)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_d)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_h)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_m)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_mn)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_t)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.wedding_y)
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_order_work>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ewed_order_work");

                entity.Property(e => e.Cid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Content).HasColumnType("text");

                entity.Property(e => e.EndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ModiContent).HasColumnType("text");

                entity.Property(e => e.ModiDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Wid)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ewed_user_mailgroup>(entity =>
            {
                entity.HasKey(e => e.mg_uid);

                entity.ToTable("ewed_user_mailgroup");

                entity.Property(e => e.mg_uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.mg0)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mg1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mg10)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mg11)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mg2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mg3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mg4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mg5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mg6)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mg7)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mg8)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mg9)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<eweddCD>(entity =>
            {
                entity.HasKey(e => e.ewedd_id);

                entity.ToTable("eweddCD");

                entity.Property(e => e.ewedd_id).ValueGeneratedNever();

                entity.Property(e => e.order_date).HasMaxLength(255);

                entity.Property(e => e.order_result).HasMaxLength(255);

                entity.Property(e => e.order_seq).HasMaxLength(255);

                entity.Property(e => e.productID).HasMaxLength(255);

                entity.Property(e => e.result).HasMaxLength(255);

                entity.Property(e => e.settle_cancle_date).HasMaxLength(255);

                entity.Property(e => e.settle_date).HasMaxLength(255);

                entity.Property(e => e.settle_price).HasMaxLength(255);

                entity.Property(e => e.settle_status).HasMaxLength(255);

                entity.Property(e => e.status_seq).HasMaxLength(255);

                entity.Property(e => e.useremail).HasMaxLength(255);

                entity.Property(e => e.userid).HasMaxLength(255);

                entity.Property(e => e.username).HasMaxLength(255);
            });

            modelBuilder.Entity<except_choan_view_list>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("except_choan_view_list");

                entity.Property(e => e.created_tmstmp)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<getOverture>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("getOverture");

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.site)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.userip)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<gift_company_tel>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("gift_company_tel");

                entity.Property(e => e.code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.company_info)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.company_name)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.company_tel)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.created_tmstmp)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.isYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");
            });

            modelBuilder.Entity<greeting_category_nvarchar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("greeting_category_nvarchar", "invtmng");

                entity.Property(e => e.greeting_category_name).HasMaxLength(50);
            });

            modelBuilder.Entity<greeting_nvarchar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("greeting_nvarchar", "invtmng");

                entity.Property(e => e.greeting_content).HasMaxLength(2000);

                entity.Property(e => e.greeting_name).HasMaxLength(50);

                entity.Property(e => e.isDP)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<guestbook_order>(entity =>
            {
                entity.HasKey(e => e.order_seq)
                    .HasName("PK_guest_order");

                entity.ToTable("guestbook_order");

                entity.Property(e => e.item_name1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.item_name2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.item_name3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.order_memo)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.print_commit_date)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.print_date)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.request_admin)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.request_date)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.up_file1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.up_img1)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<gurim_coupon_event>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("gurim_coupon_event");

                entity.Property(e => e.company_seq)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.coupon_seq).HasMaxLength(255);

                entity.Property(e => e.id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.used)
                    .HasMaxLength(1)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<hanjin_ErrLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hanjin_ErrLog");

                entity.HasComment("한진택배 오류");

                entity.Property(e => e.del_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.err_msg)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.order_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<hanssem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hanssem");

                entity.Property(e => e.company_seq).HasMaxLength(255);

                entity.Property(e => e.coupon_seq).HasMaxLength(255);

                entity.Property(e => e.id).HasMaxLength(255);

                entity.Property(e => e.used).HasMaxLength(255);
            });

            modelBuilder.Entity<history>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("history");

                entity.HasIndex(e => new { e.YDatetime, e.YType }, "IDX_history_")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.YDatetime).HasColumnType("smalldatetime");

                entity.Property(e => e.YDuration).HasMaxLength(255);

                entity.Property(e => e.YID).HasMaxLength(255);

                entity.Property(e => e.YMemo).HasMaxLength(255);

                entity.Property(e => e.YOwner).HasMaxLength(255);

                entity.Property(e => e.YPeerID).HasMaxLength(255);

                entity.Property(e => e.YType).HasMaxLength(255);

                entity.Property(e => e.YUniqueid).HasMaxLength(255);
            });

            modelBuilder.Entity<holiday>(entity =>
            {
                entity.HasNoKey();

                entity.HasComment("공휴일관리");

                entity.Property(e => e.YComment)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.YDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YDisplayName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<inipay_vbank_log>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("inipay_vbank_log");

                entity.HasComment("inipay 로그");

                entity.Property(e => e.AMT_INPUT)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ID_MERCHANT)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NM_INPUT)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NM_INPUTBANK)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NO_OID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NO_TID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NO_VACCT)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.seq).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<interparktour_coupon_event>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("interparktour_coupon_event");

                entity.HasComment("인터파크 쿠폰 이벤트");

                entity.Property(e => e.company_seq).HasMaxLength(255);

                entity.Property(e => e.coupon_seq).HasMaxLength(255);

                entity.Property(e => e.id).HasMaxLength(255);

                entity.Property(e => e.used).HasMaxLength(255);
            });

            modelBuilder.Entity<iwedding_Sending>(entity =>
            {
                entity.HasKey(e => e.order_seq);

                entity.ToTable("iwedding_Sending");

                entity.HasComment("제휴사 iwedding 데이터");

                entity.Property(e => e.order_seq)
                    .ValueGeneratedNever()
                    .HasComment("아이웨딩에 발송완료 주문정보 넘겨진 주문번호");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<jehu_memo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("jehu_memo");

                entity.Property(e => e.contents)
                    .HasMaxLength(900)
                    .IsUnicode(false);

                entity.Property(e => e.display_yorn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.updated_tmstmp).HasColumnType("datetime");
            });

            modelBuilder.Entity<jehu_no_coupon_event>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__jehu_no___DDDFBCBE90C075F7");

                entity.ToTable("jehu_no_coupon_event");

                entity.Property(e => e.end_dt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.event_yn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.start_dt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<jehu_send_mm>(entity =>
            {
                entity.HasNoKey();

                entity.HasComment("제휴광고 mms 문자발송");

                entity.HasIndex(e => new { e.send_Dt, e.service, e.phone_num }, "IDX_Sendmms");

                entity.Property(e => e.etc_info)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.phone_num)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.send_Dt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.send_chk)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.service)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<jehucoupon_noCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("jehucoupon_noCard");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<m_count>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("m_count");

                entity.Property(e => e.day)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<manage_code>(entity =>
            {
                entity.HasKey(e => e.code_id)
                    .HasName("PK_manage_code_1");

                entity.ToTable("manage_code");

                entity.HasComment("공통기준코드값");

                entity.Property(e => e.code)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasComment("코드");

                entity.Property(e => e.code_type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("코드타입");

                entity.Property(e => e.code_value)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("코드명");

                entity.Property(e => e.etc1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.etc2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.etc3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.parent_id)
                    .HasDefaultValueSql("((0))")
                    .HasComment("상위id");

                entity.Property(e => e.seq).HasDefaultValueSql("((0))");

                entity.Property(e => e.use_yorn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .HasComment("사용여부");
            });

            modelBuilder.Entity<mcard_Admin>(entity =>
            {
                entity.HasKey(e => e.AdminID)
                    .HasName("PK_dbo.mcard_Admin");

                entity.ToTable("mcard_Admin");

                entity.Property(e => e.AdminID).HasComment("관리자일련번호");

                entity.Property(e => e.AdminName)
                    .HasMaxLength(30)
                    .HasComment("관리자명");

                entity.Property(e => e.AdminPassword)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("관리자비밀번호");

                entity.Property(e => e.AdminRole)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("관리자역할");

                entity.Property(e => e.AdminUserID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("관리자ID");

                entity.Property(e => e.RegisterTime)
                    .HasColumnType("datetime")
                    .HasComment("등록시간");
            });

            modelBuilder.Entity<mcard_Auth>(entity =>
            {
                entity.HasKey(e => e.AuthID)
                    .HasName("PK_dbo.mcard_Auth");

                entity.ToTable("mcard_Auth");

                entity.Property(e => e.AuthIP)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.AuthTime).HasColumnType("datetime");

                entity.Property(e => e.InvitationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MemberYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OrdererEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrdererMobile)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.OrdererName).HasMaxLength(30);

                entity.Property(e => e.SessionCode)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<mcard_Comment>(entity =>
            {
                entity.HasKey(e => e.CommentID)
                    .HasName("PK_dbo.mcard_Comment");

                entity.ToTable("mcard_Comment");

                entity.HasComment("방명록");

                entity.HasIndex(e => e.InvitationID, "IX_InvitationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CommentID).HasComment("방명록일련번호");

                entity.Property(e => e.Commentary)
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasComment("내용");

                entity.Property(e => e.GuestName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("방문객명");

                entity.Property(e => e.InvitationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("초대장코드");

                entity.Property(e => e.InvitationID).HasComment("초대장일련번호");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasComment("비밀번호");

                entity.Property(e => e.RegisterIP)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("등록지IP");

                entity.Property(e => e.RegisterTime)
                    .HasColumnType("datetime")
                    .HasComment("등록시간");

                entity.Property(e => e.View_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.HasOne(d => d.Invitation)
                    .WithMany(p => p.mcard_Comments)
                    .HasForeignKey(d => d.InvitationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Comment_dbo.Invitation_InvitationID");
            });

            modelBuilder.Entity<mcard_Gallery>(entity =>
            {
                entity.HasKey(e => e.GalleryID)
                    .HasName("PK_dbo.mcard_Gallery");

                entity.ToTable("mcard_Gallery");

                entity.HasComment("포토갤러리");

                entity.HasIndex(e => e.InvitationID, "IX_InvitationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.GalleryID).HasComment("갤러리일련번호");

                entity.Property(e => e.ImageHeight).HasComment("이미지세로");

                entity.Property(e => e.ImageOrder).HasComment("이미지순서");

                entity.Property(e => e.ImagePath)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("이미지경로");

                entity.Property(e => e.ImageSize).HasComment("이미지용량");

                entity.Property(e => e.ImageWidth).HasComment("이미지가로");

                entity.Property(e => e.InvitationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("초대장코드");

                entity.Property(e => e.InvitationID).HasComment("초대장일련번호");

                entity.Property(e => e.RegisterTime)
                    .HasColumnType("datetime")
                    .HasComment("등록시간");

                entity.HasOne(d => d.Invitation)
                    .WithMany(p => p.mcard_Galleries)
                    .HasForeignKey(d => d.InvitationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Gallery_dbo.Invitation_InvitationID");
            });

            modelBuilder.Entity<mcard_Gift>(entity =>
            {
                entity.HasKey(e => e.GiftID)
                    .HasName("PK_dbo.mcard_Gift");

                entity.ToTable("mcard_Gift");

                entity.Property(e => e.GiftImageURL)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.GiftName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.GiftURL)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<mcard_Greeting>(entity =>
            {
                entity.HasKey(e => e.GreetingID)
                    .HasName("PK_dbo.mcard_Greeting");

                entity.ToTable("mcard_Greeting");

                entity.Property(e => e.GreetingType).HasMaxLength(20);

                entity.Property(e => e.GreetingWord)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InvitationType)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<mcard_Invitation>(entity =>
            {
                entity.HasKey(e => e.InvitationID)
                    .HasName("PK_dbo.mcard_Invitation");

                entity.ToTable("mcard_Invitation");

                entity.HasComment("모바일초대장");

                entity.HasIndex(e => new { e.InvitationCode, e.DeleteYN }, "IX1_MCARD_INVITATION")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InvitationID).HasComment("초대장일련번호");

                entity.Property(e => e.AdDisplayYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .HasComment("광고배너사용여부");

                entity.Property(e => e.AuthCode)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasComment("인증코드(아이디,이메일)");

                entity.Property(e => e.AuthYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("인증여부");

                entity.Property(e => e.CommentYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("방명록사용여부");

                entity.Property(e => e.CompletedTime)
                    .HasColumnType("datetime")
                    .HasComment("초대장작성완료시간");

                entity.Property(e => e.DeleteYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("삭제여부");

                entity.Property(e => e.EtcAfter)
                    .HasMaxLength(300)
                    .HasComment("피로연정보");

                entity.Property(e => e.EtcBus)
                    .HasMaxLength(3200)
                    .HasComment("버스정보");

                entity.Property(e => e.EtcCar)
                    .HasMaxLength(700)
                    .HasComment("자가용정보");

                entity.Property(e => e.EtcGuide)
                    .HasMaxLength(3500)
                    .HasComment("기타추가정보");

                entity.Property(e => e.EtcInfo)
                    .HasMaxLength(700)
                    .HasComment("기타정보");

                entity.Property(e => e.EtcParking)
                    .HasMaxLength(700)
                    .HasComment("주차정보");

                entity.Property(e => e.EtcSubway)
                    .HasMaxLength(700)
                    .HasComment("지하철정보");

                entity.Property(e => e.EventDate)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("행사일");

                entity.Property(e => e.EventEndTime)
                    .HasMaxLength(20)
                    .HasComment("행사종료시간");

                entity.Property(e => e.EventTime)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("행사시간");

                entity.Property(e => e.ExpireYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("만료여부");

                entity.Property(e => e.GalleryType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("갤러리종류");

                entity.Property(e => e.GalleryYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("갤러리사용여부");

                entity.Property(e => e.GiftYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("선물사용여부");

                entity.Property(e => e.Greeting)
                    .HasMaxLength(3000)
                    .HasComment("인사말");

                entity.Property(e => e.GuideYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("기타정보사용여부");

                entity.Property(e => e.HostYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("혼주정보사용여부(웨딩)");

                entity.Property(e => e.InvitationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("초대장코드(주문번호)");

                entity.Property(e => e.InvitationTitle)
                    .HasMaxLength(250)
                    .HasComment("초대장제목");

                entity.Property(e => e.InvitationType)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("초대장종류");

                entity.Property(e => e.LastModifiedTime)
                    .HasColumnType("datetime")
                    .HasComment("마지막수정시간");

                entity.Property(e => e.LocationAddr)
                    .HasMaxLength(400)
                    .HasComment("행사장주소");

                entity.Property(e => e.LocationDetail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("행사장상세정보");

                entity.Property(e => e.LocationMapImage)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("행사장약도");

                entity.Property(e => e.LocationMapImageHeight).HasComment("행사장약도이미지세로");

                entity.Property(e => e.LocationMapImageSize).HasComment("행사장약도이미지용량");

                entity.Property(e => e.LocationMapImageWidth).HasComment("행사장약도이미지가로");

                entity.Property(e => e.LocationMapLat)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasComment("행사장좌표Lat");

                entity.Property(e => e.LocationMapLng)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasComment("행사장좌표Lng");

                entity.Property(e => e.LocationMapType)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("행사장약도종류");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(400)
                    .HasComment("행사장명");

                entity.Property(e => e.LocationTel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("행사장연락처");

                entity.Property(e => e.MainImage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("메인(SNS)이미지");

                entity.Property(e => e.MainImageHeight).HasComment("메인이미지세로");

                entity.Property(e => e.MainImageSize).HasComment("메인이미지용량");

                entity.Property(e => e.MainImageWidth).HasComment("메인이미지가로");

                entity.Property(e => e.MoneyGiftYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('R')")
                    .HasComment("축의금기능사용여부");

                entity.Property(e => e.OnlineYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("초대장온라인여부");

                entity.Property(e => e.OrderSeq)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasComment("주문일련번호");

                entity.Property(e => e.OrdererEmail)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("주문자이메일");

                entity.Property(e => e.OrdererMobile)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("주문자연락처");

                entity.Property(e => e.OrdererName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("주문자명");

                entity.Property(e => e.PublishYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("초대장퍼블리시여부");

                entity.Property(e => e.RegisterIP)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("등록지IP");

                entity.Property(e => e.RegisterTime)
                    .HasColumnType("datetime")
                    .HasComment("등록시간");

                entity.Property(e => e.SiteCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("유입사이트코드");

                entity.Property(e => e.SkinCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("초대장스킨코드");

                entity.Property(e => e.SkinID).HasComment("스킨일련번호");

                entity.Property(e => e.SmsInvitationYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("초대장SMS전송여부");

                entity.Property(e => e.SmsMypageYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("초대장SMS전송여뷰(마이페이지)");

                entity.Property(e => e.VideoType)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("동영상종류");

                entity.Property(e => e.VideoURL)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("동영상주소");

                entity.Property(e => e.VideoYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("동영상사용여부");

                entity.HasOne(d => d.Skin)
                    .WithMany(p => p.mcard_Invitations)
                    .HasForeignKey(d => d.SkinID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Invitation_dbo.Skin_SkinID");
            });

            modelBuilder.Entity<mcard_InvitationBaby>(entity =>
            {
                entity.HasKey(e => e.BabyID)
                    .HasName("PK_dbo.mcard_InvitationBaby");

                entity.ToTable("mcard_InvitationBaby");

                entity.HasComment("돐초대장");

                entity.HasIndex(e => e.InvitationID, "IX_InvitationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BabyID).HasComment("돌초대장일련번호");

                entity.Property(e => e.BabyBirth)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("아이생일");

                entity.Property(e => e.BabyName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("아이이름");

                entity.Property(e => e.DadMobile)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("아빠연락처");

                entity.Property(e => e.DadName)
                    .HasMaxLength(30)
                    .HasComment("아빠이름");

                entity.Property(e => e.InvitationID).HasComment("초대장일련번호");

                entity.Property(e => e.MomMobile)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("엄마연락처");

                entity.Property(e => e.MomName)
                    .HasMaxLength(30)
                    .HasComment("엄마이름");

                entity.HasOne(d => d.Invitation)
                    .WithMany(p => p.mcard_InvitationBabies)
                    .HasForeignKey(d => d.InvitationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.InvitationBaby_dbo.Invitation_InvitationID");
            });

            modelBuilder.Entity<mcard_InvitationGiftRel>(entity =>
            {
                entity.HasKey(e => new { e.InvitationID, e.GiftID })
                    .HasName("PK_dbo.mcard_InvitationGiftRel");

                entity.ToTable("mcard_InvitationGiftRel");

                entity.HasIndex(e => e.GiftID, "IX_GiftID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvitationID, "IX_InvitationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InvitationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SelectYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Gift)
                    .WithMany(p => p.mcard_InvitationGiftRels)
                    .HasForeignKey(d => d.GiftID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.InvitationGiftRel_dbo.Gift_GiftID");

                entity.HasOne(d => d.Invitation)
                    .WithMany(p => p.mcard_InvitationGiftRels)
                    .HasForeignKey(d => d.InvitationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.InvitationGiftRel_dbo.Invitation_InvitationID");
            });

            modelBuilder.Entity<mcard_InvitationParty>(entity =>
            {
                entity.HasKey(e => e.PartyID)
                    .HasName("PK_dbo.mcard_InvitationParty");

                entity.ToTable("mcard_InvitationParty");

                entity.HasComment("모바일초대장 기본정보(문의하기)");

                entity.HasIndex(e => e.InvitationID, "IX_InvitationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PartyID).HasComment("기타초대장일련번호");

                entity.Property(e => e.GroupMobile)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("주최사(자)담당연락처");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("주최사(자)명");

                entity.Property(e => e.GuideName)
                    .HasMaxLength(50)
                    .HasComment("주요정보타이틀명");

                entity.Property(e => e.GuideNote)
                    .HasMaxLength(1000)
                    .HasComment("주요정보내용");

                entity.Property(e => e.InvitationID).HasComment("초대장일련번호");

                entity.HasOne(d => d.Invitation)
                    .WithMany(p => p.mcard_InvitationParties)
                    .HasForeignKey(d => d.InvitationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.InvitationParty_dbo.Invitation_InvitationID");
            });

            modelBuilder.Entity<mcard_InvitationWedding>(entity =>
            {
                entity.HasKey(e => e.WeddingID)
                    .HasName("PK_dbo.mcard_InvitationWedding");

                entity.ToTable("mcard_InvitationWedding");

                entity.HasComment("모바일초대장 신부신랑정보");

                entity.HasIndex(e => e.InvitationID, "IX_InvitationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WeddingID).HasComment("청첩장일련번호");

                entity.Property(e => e.BrideAccountBank)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BrideAccountBank2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BrideAccountName).HasMaxLength(30);

                entity.Property(e => e.BrideAccountName2).HasMaxLength(30);

                entity.Property(e => e.BrideAccountNumber).HasMaxLength(100);

                entity.Property(e => e.BrideAccountNumber2).HasMaxLength(100);

                entity.Property(e => e.BrideAccountRelation).HasMaxLength(50);

                entity.Property(e => e.BrideAccountRelation2).HasMaxLength(50);

                entity.Property(e => e.BrideAccountYN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BrideAccountYN2)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BrideHostMobile1)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("신부측혼주연락처1");

                entity.Property(e => e.BrideHostMobile2)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("신부측혼주연락처2");

                entity.Property(e => e.BrideHostName1)
                    .HasMaxLength(30)
                    .HasComment("신부측혼주이름1");

                entity.Property(e => e.BrideHostName2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("신부측혼주이름2");

                entity.Property(e => e.BrideHostRel1)
                    .HasMaxLength(20)
                    .HasComment("신부측혼주관계1");

                entity.Property(e => e.BrideHostRel2)
                    .HasMaxLength(20)
                    .HasComment("신부측혼주관계2");

                entity.Property(e => e.BrideMobile)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("신부연락처");

                entity.Property(e => e.BrideName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("신부이름");

                entity.Property(e => e.GroomAccountBank)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroomAccountBank2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GroomAccountName).HasMaxLength(30);

                entity.Property(e => e.GroomAccountName2).HasMaxLength(30);

                entity.Property(e => e.GroomAccountNumber).HasMaxLength(100);

                entity.Property(e => e.GroomAccountNumber2).HasMaxLength(100);

                entity.Property(e => e.GroomAccountRelation).HasMaxLength(50);

                entity.Property(e => e.GroomAccountRelation2).HasMaxLength(50);

                entity.Property(e => e.GroomAccountYN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.GroomAccountYN2)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.GroomHostMobile1)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("신랑측혼주연락처1");

                entity.Property(e => e.GroomHostMobile2)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("신랑측혼주연락처2");

                entity.Property(e => e.GroomHostName1)
                    .HasMaxLength(30)
                    .HasComment("신랑측혼주이름1");

                entity.Property(e => e.GroomHostName2)
                    .HasMaxLength(30)
                    .HasComment("신랑측혼주이름2");

                entity.Property(e => e.GroomHostRel1)
                    .HasMaxLength(20)
                    .HasComment("신랑측혼주관계1");

                entity.Property(e => e.GroomHostRel2)
                    .HasMaxLength(20)
                    .HasComment("신랑측혼주관계2");

                entity.Property(e => e.GroomMobile)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("신랑연락처");

                entity.Property(e => e.GroomName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("신랑이름");

                entity.Property(e => e.InvitationID).HasComment("초대장일련번호");

                entity.HasOne(d => d.Invitation)
                    .WithMany(p => p.mcard_InvitationWeddings)
                    .HasForeignKey(d => d.InvitationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.InvitationWedding_dbo.Invitation_InvitationID");
            });

            modelBuilder.Entity<mcard_Invitation_log>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mcard_Invitation_log");

                entity.Property(e => e.memo)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.seq).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<mcard_LogInvitation>(entity =>
            {
                entity.HasKey(e => e.LogID)
                    .HasName("PK_dbo.mcard_LogInvitation");

                entity.ToTable("mcard_LogInvitation");

                entity.Property(e => e.LogID).ValueGeneratedNever();
            });

            modelBuilder.Entity<mcard_Skin>(entity =>
            {
                entity.HasKey(e => e.SkinID)
                    .HasName("PK_dbo.mcard_Skin");

                entity.ToTable("mcard_Skin");

                entity.HasComment("모바일 스킨정보");

                entity.Property(e => e.SkinID).HasComment("스킨일련번호");

                entity.Property(e => e.DateENKR)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("날짜언어");

                entity.Property(e => e.DateSeparater)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("날짜구분자");

                entity.Property(e => e.InvitationType)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true)
                    .HasComment("초대장종류");

                entity.Property(e => e.MainImageYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("메인이미지사용여부");

                entity.Property(e => e.MainRatioH)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasComment("스킨비율세로");

                entity.Property(e => e.MainRatioW)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasComment("스킨비율가로");

                entity.Property(e => e.SkinCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasComment("스킨코드");

                entity.Property(e => e.SkinNameEN)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("스킨명(영어)");

                entity.Property(e => e.SkinNameKR)
                    .HasMaxLength(30)
                    .HasComment("스킨명(한글)");

                entity.Property(e => e.SkinPath)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasComment("스킨경로");
            });

            modelBuilder.Entity<mcard_TmpInvitation>(entity =>
            {
                entity.HasKey(e => e.InvitationID)
                    .HasName("PK_dbo.mcard_TmpInvitation");

                entity.ToTable("mcard_TmpInvitation");

                entity.HasIndex(e => e.SkinID, "IX_SkinID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AuthYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BabyBirth)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BabyName).HasMaxLength(30);

                entity.Property(e => e.BrideHostMobile1)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.BrideHostMobile2)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.BrideHostName1).HasMaxLength(30);

                entity.Property(e => e.BrideHostName2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BrideHostRel1).HasMaxLength(20);

                entity.Property(e => e.BrideHostRel2).HasMaxLength(20);

                entity.Property(e => e.BrideMobile)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.BrideName).HasMaxLength(30);

                entity.Property(e => e.CommentYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CompletedTime).HasColumnType("datetime");

                entity.Property(e => e.DadMobile)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DadName).HasMaxLength(30);

                entity.Property(e => e.EtcAfter).HasMaxLength(300);

                entity.Property(e => e.EtcBus).HasMaxLength(300);

                entity.Property(e => e.EtcCar).HasMaxLength(300);

                entity.Property(e => e.EtcGuide).HasMaxLength(3500);

                entity.Property(e => e.EtcInfo).HasMaxLength(300);

                entity.Property(e => e.EtcParking).HasMaxLength(300);

                entity.Property(e => e.EtcSubway).HasMaxLength(300);

                entity.Property(e => e.EventDate).HasMaxLength(20);

                entity.Property(e => e.EventEndTime).HasMaxLength(20);

                entity.Property(e => e.EventTime).HasMaxLength(20);

                entity.Property(e => e.ExpireYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GalleryType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GalleryYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GiftYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Greeting).HasMaxLength(1000);

                entity.Property(e => e.GroomHostMobile1)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.GroomHostMobile2)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.GroomHostName1).HasMaxLength(30);

                entity.Property(e => e.GroomHostName2).HasMaxLength(30);

                entity.Property(e => e.GroomHostRel1).HasMaxLength(20);

                entity.Property(e => e.GroomHostRel2).HasMaxLength(20);

                entity.Property(e => e.GroomMobile)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.GroomName).HasMaxLength(30);

                entity.Property(e => e.GroupMobile)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName).HasMaxLength(30);

                entity.Property(e => e.GuideName).HasMaxLength(50);

                entity.Property(e => e.GuideNote).HasMaxLength(200);

                entity.Property(e => e.GuideYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.HostYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InvitationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InvitationTitle).HasMaxLength(50);

                entity.Property(e => e.InvitationType)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LastModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.LocationAddr).HasMaxLength(100);

                entity.Property(e => e.LocationDetail).HasMaxLength(50);

                entity.Property(e => e.LocationMapImage)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMapLat)
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMapLng)
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMapType)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LocationName).HasMaxLength(50);

                entity.Property(e => e.LocationTel)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MainImage)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MomMobile)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.MomName).HasMaxLength(30);

                entity.Property(e => e.OnlineYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OrdererEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrdererMobile)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.OrdererName).HasMaxLength(30);

                entity.Property(e => e.PublishYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RegisterIP)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterTime).HasColumnType("datetime");

                entity.Property(e => e.SmsInvitationYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SmsMypageYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.VideoType).HasMaxLength(4);

                entity.Property(e => e.VideoURL)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.VideoYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Skin)
                    .WithMany(p => p.mcard_TmpInvitations)
                    .HasForeignKey(d => d.SkinID)
                    .HasConstraintName("FK_dbo.TmpInvitation_dbo.Skin_SkinID");
            });

            modelBuilder.Entity<mcard_TmpInvitationGiftRel>(entity =>
            {
                entity.HasKey(e => new { e.InvitationID, e.GiftID })
                    .HasName("PK_dbo.mcard_TmpInvitationGiftRel");

                entity.ToTable("mcard_TmpInvitationGiftRel");

                entity.HasIndex(e => e.GiftID, "IX_GiftID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvitationID, "IX_InvitationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InvitationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SelectYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Gift)
                    .WithMany(p => p.mcard_TmpInvitationGiftRels)
                    .HasForeignKey(d => d.GiftID)
                    .HasConstraintName("FK_dbo.TmpInvitationGiftRel_dbo.Gift_GiftID");

                entity.HasOne(d => d.Invitation)
                    .WithMany(p => p.mcard_TmpInvitationGiftRels)
                    .HasForeignKey(d => d.InvitationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.TmpInvitationGiftRel_dbo.TmpInvitation_InvitationID");
            });

            modelBuilder.Entity<mcard_TmpInvitationOption>(entity =>
            {
                entity.HasKey(e => e.OptionID)
                    .HasName("PK_dbo.mcard_TmpInvitationOption");

                entity.ToTable("mcard_TmpInvitationOption");

                entity.HasIndex(e => e.InvitationID, "IX_InvitationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.OptionItem)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.OptionValue)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RegisterTime).HasColumnType("datetime");

                entity.HasOne(d => d.Invitation)
                    .WithMany(p => p.mcard_TmpInvitationOptions)
                    .HasForeignKey(d => d.InvitationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.TmpInvitationOption_dbo.TmpInvitation_InvitationID");
            });

            modelBuilder.Entity<metingg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("metingg");

                entity.Property(e => e.card_price).HasMaxLength(255);

                entity.Property(e => e.card_seq).HasMaxLength(255);

                entity.Property(e => e.company_seq).HasMaxLength(255);
            });

            modelBuilder.Entity<mobile_ad_visit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mobile_ad_visit");

                entity.Property(e => e.create_date).HasColumnType("datetime");

                entity.Property(e => e.ip)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<oneclick_sample>(entity =>
            {
                entity.HasKey(e => e.oc_Sample_Seq)
                    .HasName("PK__oneclick__16A02C3ACD0DA562");

                entity.ToTable("oneclick_sample");

                entity.HasComment("원클릭샘플이벤트");

                entity.Property(e => e.Card_Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Reg_Date).HasColumnType("datetime");

                entity.Property(e => e.Use_YN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("사용여부");

                entity.Property(e => e.evt_nm)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("샘플그룹명");
            });

            modelBuilder.Entity<ordList_new>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ordList_new");

                entity.Property(e => e.CARD_CODE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_NAME)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Expr2).HasColumnType("smalldatetime");

                entity.Property(e => e.couponseq)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.etc_name)
                    .HasMaxLength(265)
                    .IsUnicode(false);

                entity.Property(e => e.isBaesongRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isChoanRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCompose)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isSpecial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ishandmade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isinpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.map_trans_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.order_add_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_add_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pay_Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sales_Gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.src_compose_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_compose_mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_jebon_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_modRequest_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_packing_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printW_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_print_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_send_date).HasColumnType("smalldatetime");

                entity.Property(e => e.wedd_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<orderLst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("orderLst");

                entity.Property(e => e.CARD_CODE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_NAME)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.couponseq)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.etc_name)
                    .HasMaxLength(225)
                    .IsUnicode(false);

                entity.Property(e => e.isChoanRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCompose)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ishandmade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isinpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.order_add_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_add_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pay_Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sales_Gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.src_compose_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_modRequest_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_packing_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printW_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_print_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_send_date).HasColumnType("smalldatetime");

                entity.Property(e => e.wedd_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<orderLst_20080922>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("orderLst_20080922");

                entity.Property(e => e.CARD_CODE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_NAME)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Expr2).HasColumnType("smalldatetime");

                entity.Property(e => e.couponseq)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.etc_name)
                    .HasMaxLength(265)
                    .IsUnicode(false);

                entity.Property(e => e.isBaesongRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isChoanRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCompose)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isSpecial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ishandmade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isinpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.map_trans_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.order_add_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_add_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pay_Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sales_Gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.src_CloseCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_compose_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_compose_mod_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_jebon_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_modRequest_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_packing_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printW_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_print_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_send_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trouble_type)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<orderLst_new>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("orderLst_new");

                entity.Property(e => e.CARD_CODE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_NAME)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Expr2).HasColumnType("smalldatetime");

                entity.Property(e => e.couponseq)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.etc_name)
                    .HasMaxLength(265)
                    .IsUnicode(false);

                entity.Property(e => e.isBaesongRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isChoanRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorInpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isColorPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCompose)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isHanji)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isSpecial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ishandmade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isinpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.map_trans_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.order_add_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_add_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pay_Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sales_Gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.src_CloseCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_compose_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_compose_mod_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_mod_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_jebon_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_modRequest_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_packing_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printW_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_print_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_send_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trouble_type)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<orderLst_test>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("orderLst_test");

                entity.Property(e => e.CARD_CODE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_NAME)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Expr2).HasColumnType("smalldatetime");

                entity.Property(e => e.couponseq)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.etc_name)
                    .HasMaxLength(265)
                    .IsUnicode(false);

                entity.Property(e => e.isBaesongRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isChoanRisk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCompose)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isCorel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isSpecial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ishandmade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isinpaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.map_trans_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.member_id)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.order_add_flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_add_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pay_Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sales_Gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.src_compose_admin_id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.src_compose_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_confirm_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_jebon_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_modRequest_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_packing_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printCopy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_printW_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_print_date).HasColumnType("smalldatetime");

                entity.Property(e => e.src_send_date).HasColumnType("smalldatetime");

                entity.Property(e => e.wedd_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<photobook_myCouponList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("photobook_myCouponList");

                entity.Property(e => e.Isthrowaway)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.coupon_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.coupon_msg)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.disrate_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.end_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.prod_cate2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.site_code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.start_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.use_yn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<photobook_order_detailV>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("photobook_order_detailV");

                entity.Property(e => e.coating_yn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.cover_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.cover_style)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.delivery_code)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.item_option)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.makecom_code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.p_delivery_date)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.prod_cate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.prod_cate2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.prod_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.prod_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.prod_size)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.product_order_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.thumbnail_url)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<photobook_order_detail_erp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("photobook_order_detail_erp");

                entity.Property(e => e.erp_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.prod_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.product_order_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<photobook_prod_price>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("photobook_prod_price");

                entity.Property(e => e.disrate_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.makecom_code)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mc_prod_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.prod_cate2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.prod_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.prod_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.prod_size)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<preView_ChkList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("preView_ChkList");

                entity.HasComment("초안 체크리스트");

                entity.Property(e => e.checkVar)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.isCard)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<printjob_order_seq>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("printjob_order_seq");
            });

            modelBuilder.Entity<recycle_agree_log>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__recycle___DDDFBCBE17EAA7B8");

                entity.ToTable("recycle_agree_log");

                entity.Property(e => e.created_tmstmp)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<research_log>(entity =>
            {
                entity.ToTable("research_log");

                entity.Property(e => e.ans1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans3_1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans4)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans5)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans5_1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans6)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ans6_str)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<research_qlist_Detail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("research_qlist_Detail");

                entity.Property(e => e.ans)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<s2_card_dd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s2_card_dd");

                entity.Property(e => e.card_code)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<s2_event_UserComment_url>(entity =>
            {
                entity.HasKey(e => e.c_idx)
                    .HasName("PK__s2_event__0656B781A22EAF3C");

                entity.ToTable("s2_event_UserComment_url");

                entity.Property(e => e.c_cancle_reply)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.c_regDate).HasColumnType("datetime");

                entity.Property(e => e.c_title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.c_uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.c_uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.c_url)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<s4_CardBest100>(entity =>
            {
                entity.HasKey(e => new { e.Card_seq, e.Company_seq })
                    .HasName("PK__s4_CardB__80D3BA1A047F6C3B");

                entity.ToTable("s4_CardBest100");

                entity.Property(e => e.Gubun01)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.Gubun02)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.Gubun03)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.Gubun04)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.Gubun05)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.Gubun06)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.Gubun07)
                    .HasMaxLength(1)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<s4_md_choice_jehu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("s4_md_choice_jehu");

                entity.Property(e => e.isDisplay)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.jehu_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<s4_poll_user_reply>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("s4_poll_user_reply");

                entity.Property(e => e.reg_date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<sb_samplebook_item>(entity =>
            {
                entity.HasKey(e => e.seq)
                    .HasName("PK__sb_sampl__DDDFBCBE2D0C8B54");

                entity.ToTable("sb_samplebook_item");

                entity.Property(e => e.ViewYN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<shakr_coupon_event>(entity =>
            {
                entity.HasKey(e => e.seq);

                entity.ToTable("shakr_coupon_event");

                entity.HasComment("쉐이커 쿠폰 이벤트");

                entity.Property(e => e.bhands_used).HasMaxLength(255);

                entity.Property(e => e.company_seq).HasMaxLength(255);

                entity.Property(e => e.coupon_seq).HasMaxLength(255);

                entity.Property(e => e.cp_end_date).HasColumnType("datetime");

                entity.Property(e => e.cp_price).HasMaxLength(50);

                entity.Property(e => e.cp_reg_date).HasColumnType("datetime");

                entity.Property(e => e.id).HasMaxLength(255);

                entity.Property(e => e.shakr_used).HasMaxLength(255);

                entity.Property(e => e.temp1).HasMaxLength(255);

                entity.Property(e => e.temp2).HasMaxLength(255);
            });

            modelBuilder.Entity<sticker_count>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("sticker_count");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<super7day_sm>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.idx).ValueGeneratedOnAdd();

                entity.Property(e => e.regdate).HasColumnType("datetime");

                entity.Property(e => e.sendYN)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.uid)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.uphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tCouponMst>(entity =>
            {
                entity.HasKey(e => e.CouponCD)
                    .HasName("pk_tCouponMst");

                entity.ToTable("tCouponMst");

                entity.HasComment("(old) 더카드 쿠폰");

                entity.Property(e => e.CouponCD)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AddFile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ApplyType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('MULTI')")
                    .HasComment("쿠폰적용여부 ( ONLY : 한상품만, MULTI : 제한없음 )");

                entity.Property(e => e.Cd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CouponURL)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CoverageComment)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryOverSaleYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .HasComment("배송비쿠폰설정 - 다른쿠폰과 중복사용 가능한가..");

                entity.Property(e => e.DeliveryYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("배송비 지원쿠폰 여부");

                entity.Property(e => e.EmpYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FromDT).HasColumnType("datetime");

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IssueDayCnt)
                    .HasDefaultValueSql("((1))")
                    .HasComment("발급일기준 몇일까지인가..");

                entity.Property(e => e.IssueYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("발급일기준");

                entity.Property(e => e.LimitAmtChkYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LimitSaleItemCD)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("지정상품설정");

                entity.Property(e => e.LimitSaleItemCnt)
                    .HasDefaultValueSql("((2))")
                    .HasComment("지정상품 몇개이상 구매시 이용가능한지..");

                entity.Property(e => e.LimitSaleItemYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("지정상품 사용여부");

                entity.Property(e => e.LimitSalePrice).HasComment("판매단가 ~ 이상일경우 사용가능");

                entity.Property(e => e.LimitSalePriceUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("판매단가 제한여부");

                entity.Property(e => e.MobileOnlyYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.MultiUseYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SalePriceViewYN)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.Subject)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TakeCNT).HasDefaultValueSql("((0))");

                entity.Property(e => e.TermBrandUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("조건설정_특정브랜드");

                entity.Property(e => e.TermCategoryUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("조건설정_특정카테고리지정");

                entity.Property(e => e.TermEventUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("조건설정_특정이벤트지정");

                entity.Property(e => e.TermItemUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("조건설정_특정상품지정");

                entity.Property(e => e.TermMargin)
                    .HasDefaultValueSql("((20))")
                    .HasComment("기준마진율");

                entity.Property(e => e.TermMarginUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("조건설정_마진율");

                entity.Property(e => e.TermType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('M')")
                    .IsFixedLength(true)
                    .HasComment("대상품목 자동등록 여부 ( A : 자동, M : 수동 )");

                entity.Property(e => e.TermVndUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("조건설정_특정업체지정");

                entity.Property(e => e.ToDT).HasColumnType("datetime");

                entity.Property(e => e.UseStoreCD)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.UseTarget)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UseYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.amtGb)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.partnerYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tCouponMst_SmartAD>(entity =>
            {
                entity.HasKey(e => e.CouponCD)
                    .HasName("pk_tCouponMst_SmartAD");

                entity.ToTable("tCouponMst_SmartAD");

                entity.Property(e => e.CouponCD)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AddFile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ApplyType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('MULTI')")
                    .HasComment("쿠폰적용여부 ( ONLY : 한상품만, MULTI : 제한없음 )");

                entity.Property(e => e.Cd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CouponURL)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CoverageComment)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryOverSaleYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .HasComment("배송비쿠폰설정 - 다른쿠폰과 중복사용 가능한가..");

                entity.Property(e => e.DeliveryYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("배송비 지원쿠폰 여부");

                entity.Property(e => e.EmpYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FromDT).HasColumnType("datetime");

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IssueDayCnt)
                    .HasDefaultValueSql("((1))")
                    .HasComment("발급일기준 몇일까지인가..");

                entity.Property(e => e.IssueYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("발급일기준");

                entity.Property(e => e.LimitAmtChkYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LimitSaleItemCD)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("지정상품설정");

                entity.Property(e => e.LimitSaleItemCnt)
                    .HasDefaultValueSql("((2))")
                    .HasComment("지정상품 몇개이상 구매시 이용가능한지..");

                entity.Property(e => e.LimitSaleItemYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("지정상품 사용여부");

                entity.Property(e => e.LimitSalePrice).HasComment("판매단가 ~ 이상일경우 사용가능");

                entity.Property(e => e.LimitSalePriceUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("판매단가 제한여부");

                entity.Property(e => e.MobileOnlyYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.MultiUseYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SalePriceViewYN)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.Subject)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TakeCNT).HasDefaultValueSql("((0))");

                entity.Property(e => e.TermBrandUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("조건설정_특정브랜드");

                entity.Property(e => e.TermCategoryUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("조건설정_특정카테고리지정");

                entity.Property(e => e.TermEventUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("조건설정_특정이벤트지정");

                entity.Property(e => e.TermItemUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("조건설정_특정상품지정");

                entity.Property(e => e.TermMargin)
                    .HasDefaultValueSql("((20))")
                    .HasComment("기준마진율");

                entity.Property(e => e.TermMarginUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("조건설정_마진율");

                entity.Property(e => e.TermType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('M')")
                    .IsFixedLength(true)
                    .HasComment("대상품목 자동등록 여부 ( A : 자동, M : 수동 )");

                entity.Property(e => e.TermVndUseYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true)
                    .HasComment("조건설정_특정업체지정");

                entity.Property(e => e.ToDT).HasColumnType("datetime");

                entity.Property(e => e.UseStoreCD)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.UseTarget)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UseYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.amtGb)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.partnerYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tCouponOff>(entity =>
            {
                entity.HasKey(e => new { e.CouponCD, e.OffCD })
                    .HasName("pk_tCouponOff");

                entity.ToTable("tCouponOff");

                entity.Property(e => e.CouponCD)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OffCD)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CouponNum)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PrintYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.TakeDT).HasColumnType("datetime");

                entity.Property(e => e.TakeYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tCouponSub>(entity =>
            {
                entity.HasKey(e => new { e.CouponCD, e.CouponNum })
                    .HasName("PK_tCouponSub_1");

                entity.ToTable("tCouponSub");

                entity.HasIndex(e => e.UserID, "NCI_TCOUPONSUB_USERID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CouponCD)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CouponNum)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TakeDT).HasColumnType("datetime");

                entity.Property(e => e.TakeYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.TimeCD)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UseDT).HasColumnType("datetime");

                entity.Property(e => e.UseYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.UserEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserID)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.sendMailYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.userDelYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tCouponSub1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tCouponSub1");

                entity.Property(e => e.CouponCD)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CouponNum)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.InsertDT).HasColumnType("smalldatetime");

                entity.Property(e => e.TakeDT).HasColumnType("smalldatetime");

                entity.Property(e => e.TakeYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TimeCD)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UseDT).HasColumnType("smalldatetime");

                entity.Property(e => e.UseYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserID)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.sendMailYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.userDelYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tCouponSub_SmartAD>(entity =>
            {
                entity.HasKey(e => new { e.CouponCD, e.CouponNum })
                    .HasName("PK_tCouponSub_SmartAD_1");

                entity.ToTable("tCouponSub_SmartAD");

                entity.Property(e => e.CouponCD)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CouponNum)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TakeDT).HasColumnType("datetime");

                entity.Property(e => e.TakeYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.TimeCD)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UseDT).HasColumnType("datetime");

                entity.Property(e => e.UseYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.UserEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserID)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.sendMailYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.userDelYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tCouponTarget>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tCouponTarget");

                entity.Property(e => e.CouponCD)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserID)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tCouponTermBrand>(entity =>
            {
                entity.HasKey(e => new { e.CouponCD, e.BrandIdx });

                entity.ToTable("tCouponTermBrand");

                entity.Property(e => e.CouponCD)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProcType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('F')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tCouponTermCategory>(entity =>
            {
                entity.HasKey(e => new { e.CouponCD, e.CatLCD, e.CatMCD, e.CatSCD, e.CatVCD });

                entity.ToTable("tCouponTermCategory");

                entity.Property(e => e.CouponCD)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CatLCD)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CatMCD)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('00')")
                    .IsFixedLength(true);

                entity.Property(e => e.CatSCD)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('00')")
                    .IsFixedLength(true);

                entity.Property(e => e.CatVCD)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('00')")
                    .IsFixedLength(true);

                entity.Property(e => e.Idx).ValueGeneratedOnAdd();

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProcType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('F')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tCouponTermEvent>(entity =>
            {
                entity.HasKey(e => new { e.CouponCD, e.EventIdx });

                entity.ToTable("tCouponTermEvent");

                entity.Property(e => e.CouponCD)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProcType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('F')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tCouponTermItem>(entity =>
            {
                entity.HasKey(e => new { e.CouponCD, e.ItemCD });

                entity.ToTable("tCouponTermItem");

                entity.Property(e => e.CouponCD)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ItemCD)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProcType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('F')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tCouponTermVnd>(entity =>
            {
                entity.HasKey(e => new { e.CouponCD, e.VndCD });

                entity.ToTable("tCouponTermVnd");

                entity.Property(e => e.CouponCD)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.VndCD)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProcType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('F')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tCouponUseItem>(entity =>
            {
                entity.HasKey(e => new { e.CouponCD, e.ItemCD });

                entity.ToTable("tCouponUseItem");

                entity.Property(e => e.CouponCD)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ItemCD)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tEvent>(entity =>
            {
                entity.HasKey(e => e.EventIdx);

                entity.ToTable("tEvent");

                entity.HasComment("더카드이벤트 관리");

                entity.Property(e => e.Banner)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CatLCD)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Contents)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.EventGB)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EventNM)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FSEventYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.FromDt).HasColumnType("datetime");

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemCD)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MainHtml)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.MainImage)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MainText)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.NaviYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("Y:내부 네비게이션 사용, N:내부 네비게이션 미사용");

                entity.Property(e => e.PageWidth)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("");

                entity.Property(e => e.SnsImageURL)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SnsYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TitleBarType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('P')")
                    .IsFixedLength(true)
                    .HasComment("P:타이틀 Bar 형식 일반형식, N:타이틀 Bar 형식 네비형식");

                entity.Property(e => e.ToDt).HasColumnType("datetime");

                entity.Property(e => e.Top6Image1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Top6Image2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Top6Image3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Top6Image4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Top6Image5)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Top6Image6)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Top6ImageURL1)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Top6ImageURL2)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Top6ImageURL3)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Top6ImageURL4)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Top6ImageURL5)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Top6ImageURL6)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ViewYN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.projectYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true)
                    .HasComment("기본노출 Y:사용, N:미사용");

                entity.Property(e => e.templateUrl)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.templateYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tEventBotItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tEventBotItem");

                entity.Property(e => e.BotItemCD)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotItemIdx).ValueGeneratedOnAdd();

                entity.Property(e => e.BotSize)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tEventBotTemplete>(entity =>
            {
                entity.HasKey(e => e.BotIdx)
                    .HasName("PK_tEventBotTempleteNew");

                entity.ToTable("tEventBotTemplete");

                entity.Property(e => e.BotBanner)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BotCopy)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BotNavi)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.BotType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotUrl)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.addBtnUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.addBtnYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tEventRelationBanner>(entity =>
            {
                entity.HasKey(e => e.idx);

                entity.ToTable("tEventRelationBanner");

                entity.Property(e => e.BannerFile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BannerLink)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Contents)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.InsertDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PartnerYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDT)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UseYN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserID)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tJobCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tJobCode");

                entity.HasComment("직업코드");

                entity.Property(e => e.code)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tMember_secede>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tMember_secede");

                entity.Property(e => e.ddate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ms_etc_reason)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ms_idx).ValueGeneratedOnAdd();

                entity.Property(e => e.ms_reason)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ms_uid)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tNeo_Queue>(entity =>
            {
                entity.HasKey(e => e.mid)
                    .HasName("PK_CIDX_tNeo_Queue__mid");

                entity.ToTable("tNeo_Queue");

                entity.HasComment("메일발송리스토리");

                entity.HasIndex(e => e.org_date, "IDX_tNEO_Queue__org_date")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ERROR_MSG).IsUnicode(false);

                entity.Property(e => e.SEND_DATE).HasColumnType("datetime");

                entity.Property(e => e.barid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.c_category)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.c_hosting)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.c_site)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.cardno)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isSend)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.mcontent)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.mdate).HasColumnType("datetime");

                entity.Property(e => e.msave)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.mstatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.mtitle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.mtype)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true);

                entity.Property(e => e.org_date).HasColumnType("datetime");

                entity.Property(e => e.rmail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.rname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.smail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.sname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tUserInfo>(entity =>
            {
                entity.HasKey(e => e.uid)
                    .IsClustered(false);

                entity.ToTable("tUserInfo");

                entity.HasIndex(e => e.mail, "IDX_mail")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.name, "nind_name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.jumin, "tUserInfo_Index_1")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.uid)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.addr_detail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.addressCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.birth).HasColumnType("datetime");

                entity.Property(e => e.chk_ad)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_event)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_mailservice)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.chk_penpal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.hand_phone)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.inpath)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.is_marriage)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.job)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.login_date).HasColumnType("datetime");

                entity.Property(e => e.login_date_latest).HasColumnType("datetime");

                entity.Property(e => e.mail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.marry_d)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.marry_m)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.marry_y)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.nickname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.phone)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.phoneCHK)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.pw)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.pwd_hint_anwser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.rdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.site_div)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zip1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zip2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<t_card>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_card");

                entity.Property(e => e.bg)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.effect_1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_10)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_11)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_12)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_13)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_14)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_15)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_16)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_17)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_18)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_19)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_20)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_21)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_22)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_23)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_24)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_25)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_26)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_27)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_28)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_29)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_30)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_31)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_32)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_33)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_34)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_35)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_36)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_37)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_38)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_39)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_4)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_40)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_41)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_42)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_43)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_44)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_45)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_46)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_47)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_48)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_5)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_6)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_7)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_8)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.effect_9)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.folderday)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.location)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.map)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.music)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.name1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.name2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.order_num)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.photo_1)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_10)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_11)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_12)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_13)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_14)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_15)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_16)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_17)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_18)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_19)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_2)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_20)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_21)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_22)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_23)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_24)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_25)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_26)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_27)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_28)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_29)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_3)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_30)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_31)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_32)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_33)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_34)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_35)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_36)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_37)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_38)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_39)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_4)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_40)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_41)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_42)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_43)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_44)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_45)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_46)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_47)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_48)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_5)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_6)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_7)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_8)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.photo_9)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.seq).ValueGeneratedOnAdd();

                entity.Property(e => e.wedding_day)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<temp0307>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp0307");

                entity.Property(e => e.phone_num).HasMaxLength(255);

                entity.Property(e => e.service).HasMaxLength(255);
            });

            modelBuilder.Entity<temp0322>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp0322");

                entity.Property(e => e.ViewYN).HasMaxLength(255);

                entity.Property(e => e.card_code).HasMaxLength(255);

                entity.Property(e => e.gubun).HasMaxLength(255);
            });

            modelBuilder.Entity<temp190405>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp190405");

                entity.Property(e => e.phone_num).HasMaxLength(255);

                entity.Property(e => e.send_chk).HasMaxLength(255);

                entity.Property(e => e.service).HasMaxLength(255);
            });

            modelBuilder.Entity<temp_choansum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_choansum");

                entity.Property(e => e.gubun)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<temp_gift_company>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_gift_company");

                entity.Property(e => e.company_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.company_type_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pw)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<temp_year>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_year");

                entity.Property(e => e.yyyymm)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tmp_20200622>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_20200622");

                entity.Property(e => e.print_date).HasColumnType("smalldatetime");

                entity.Property(e => e.printer).HasMaxLength(50);

                entity.Property(e => e.title).HasMaxLength(50);
            });

            modelBuilder.Entity<tmp_order_flow_180314>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_order_flow_180314");

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.가입경로)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tmp_sample_order>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_sample_order");

                entity.Property(e => e.Member_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Request_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vCardWeight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vCardWeight");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vPB_PROD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPB_PROD");

                entity.Property(e => e.COATING_YN)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.COVER_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CT_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OASIS_IDX)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PAGES)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PRDT_TYPE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SIZE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.makecom_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<view_Bestseller>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_Bestseller");

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_ms)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.disrate_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.gubun)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.regdate).HasColumnType("smalldatetime");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<view_Comment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_Comment");

                entity.Property(e => e.MEMBER_NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REGDATE).HasColumnType("datetime");

                entity.Property(e => e.TITLE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.card_cate)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.card_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.card_img_xs)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.comm_div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.comment)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<view_CopyItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_CopyItem");

                entity.Property(e => e.item_code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.item_title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.item_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.plc_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<view_DeliveryLst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_DeliveryLst");

                entity.Property(e => e.ERP_PartCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.company_name)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.delivery_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.delivery_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.delivery_com)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.otype)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.packing_date).HasColumnType("smalldatetime");

                entity.Property(e => e.recv_address)
                    .HasMaxLength(601)
                    .IsUnicode(false);

                entity.Property(e => e.recv_name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<view_OB_Card>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_OB_Card");

                entity.Property(e => e.ADMIN_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ADMIN_MEMO)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.B2B_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BEST_STR)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BEST_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_CATE)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_CODE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_DESCRIPTION)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_ENVELOPE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_FPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CARD_IMG_B1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B10)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B11)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B12)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B13)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B14)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B15)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_B9)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_D)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_M6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_MS)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_ORDER1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_ORDER2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_S)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_IMG_XS)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_NAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_OSI)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_PAPER)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_SIZE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DISPLAY_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DISRATE_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ERP_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Env_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ISHAVE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ISInPaper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is100)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1001)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1002)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1003)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1004)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1005)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is1009)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is200)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is300)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is400)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Is500)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsEmbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsEnvInsert)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsFPrint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsFlower)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsGold)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsHandMade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsHanji)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsHeart)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOBDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOffBest)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOffDDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOffDisplay)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsOsiGaro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsRibon)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsSBaesong)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsSample)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsSilk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsUsrComment)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsUsrimg1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsUsrimg2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsUsrimg3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsWonang)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsYu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LAST_UPDATE).HasColumnType("datetime");

                entity.Property(e => e.NEW_YES_OR_NO)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RECOMEND_YES_OR_NO)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.REGIST_DATE).HasColumnType("datetime");

                entity.Property(e => e.acc_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.cont_code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.cont_code_o)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.env_code_o)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.online_yes_or_no)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<view_OB_Company>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_OB_Company");

                entity.Property(e => e.ACCOUNT_NO)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ACC_E_MAIL)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.ACC_HP_NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACC_NM)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACC_TEL_NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BACK_ADDR)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BANK_NM)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BOSS_NM)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BOSS_TEL_NO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CHG_DT).HasColumnType("datetime");

                entity.Property(e => e.CHG_ID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_NAME)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_NUM)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.COMPANY_SEQ).ValueGeneratedOnAdd();

                entity.Property(e => e.CORP_EXP)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.END_DATE).HasColumnType("datetime");

                entity.Property(e => e.ERP_CODE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ERP_CostCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ERP_Dept)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ERP_PGcheck)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ERP_PartCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ERP_PriceLevel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ERP_StaffCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ERP_TaxType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.E_MAIL)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.FAX_NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FRONT_ADDR)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IMG_DIR)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.INFO_TMP)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.INFO_TMP2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.JAEHU_KIND)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.JUMUN_TYPE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.KIND)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LOGIN_ID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MNG_ADDRESS)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MNG_ADDR_DETAIL)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MNG_E_MAIL)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.MNG_HP_NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MNG_NM)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MNG_TEL_NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MNG_ZIP_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ONOFF)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PASSWD)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.REGIST_DATE).HasColumnType("datetime");

                entity.Property(e => e.REG_ID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SALES_GUBUN)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SASIK_GUBUN)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.START_DATE).HasColumnType("datetime");

                entity.Property(e => e.STATUS)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.UP_TAE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UP_TAE_STR)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ZIP_CODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<view_OB_Order>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_OB_Order");

                entity.Property(e => e.fticket_price)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.isReceipt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.item_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.order_date).HasColumnType("smalldatetime");

                entity.Property(e => e.order_hphone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.order_name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.pg_resultinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.posflag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settle_method)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sticker_price)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<view_S4EventInstall>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_S4EventInstall");

                entity.Property(e => e.addr)
                    .IsRequired()
                    .HasMaxLength(251)
                    .IsUnicode(false);

                entity.Property(e => e.company_name)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.desktop_install)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.favorite_install)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.hphone)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.isSelection)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.isUsed)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.reg_date)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<view_SampleList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_SampleList");

                entity.Property(e => e.DELIVERY_CODE_NUM)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_ADDRESS)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_EMAIL)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_FAX)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_HPHONE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_PHONE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MEMBER_ZIP)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MEMO)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.card_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.member_address_detail)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.old_code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<view_UsrInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_UsrInfo");

                entity.Property(e => e.hand_phone)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.jumin)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.phone)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.pwd)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("datetime");

                entity.Property(e => e.site_name)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.tbl_name)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.uid)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.umail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.uname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<view_UsrQnA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_UsrQnA");

                entity.Property(e => e.A_stat)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CARD_CODE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Q_content)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.Q_kind)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Q_title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.a_dt).HasColumnType("datetime");

                entity.Property(e => e.a_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.a_research1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.a_research2)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.a_research_date)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.company_name)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.e_mail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.isS2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.member_id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.member_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_dt).HasColumnType("datetime");

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.tel_no)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<view_cardRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_cardRank");
            });

            modelBuilder.Entity<view_emBoard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_emBoard");

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RegDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Uid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.content).HasMaxLength(4000);

                entity.Property(e => e.order_email)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<wed_Notice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("wed_Notice");

                entity.Property(e => e.auth)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)")
                    .IsFixedLength(true)
                    .HasComment("0:전체,1:부분");

                entity.Property(e => e.contents)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.div)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.seq).ValueGeneratedOnAdd();

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.vlevel).HasDefaultValueSql("(9)");
            });

            modelBuilder.Entity<wedd_biztalk>(entity =>
            {
                entity.ToTable("wedd_biztalk");

                entity.HasComment("비즈톡 템플릿");

                entity.Property(e => e.USE_YORN)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.callback)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1644-9713')");

                entity.Property(e => e.content)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.div)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.kko_btn_info)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.kko_btn_type)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.lms_subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.sales_gubun)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.sender_key)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.template_code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.template_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<weddinghall_information>(entity =>
            {
                entity.HasKey(e => e.wedd_idx);

                entity.ToTable("weddinghall_information");

                entity.HasComment("웨딩홀 소개");

                entity.Property(e => e.wedd_idx).ValueGeneratedNever();

                entity.Property(e => e.bus_str)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.etc_str)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.mycar_str)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.subway_str)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_addr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.wedd_phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<weddinghall_tmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("weddinghall_tmp");

                entity.Property(e => e.admin_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.approve_date).HasColumnType("smalldatetime");

                entity.Property(e => e.folder)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.reg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.waddress)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.wname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.wphone)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<weddinghallbest_click>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("weddinghallbest_click");

                entity.Property(e => e.GUID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TODAY_DT)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<wish_rate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("wish_rate");

                entity.Property(e => e.a).HasMaxLength(255);
            });

            modelBuilder.Entity<zip_busan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_busan");

                entity.HasComment("주소-부산");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_name_merge).HasMaxLength(200);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.street_name_merge).HasMaxLength(200);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_ch_buk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_ch_buk");

                entity.HasComment("주소-충청북도");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_ch_nam>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_ch_nam");

                entity.HasComment("주소-충전남도");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_daegu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_daegu");

                entity.HasComment("주소-대구");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_daejeon>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_daejeon");

                entity.HasComment("주소-대전");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_gangwon>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_gangwon");

                entity.HasComment("주소-강원");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_gwangju>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_gwangju");

                entity.HasComment("주소-광주");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_gyeonggi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_gyeonggi");

                entity.HasComment("주소-경기도");

                entity.HasIndex(e => new { e.gungu, e.sigungu_build_name }, "build_name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.gungu, e.b_name }, "dong")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.gungu, e.b_name, e.jibun_no }, "dong_jibun")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.gungu, "sigungu")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.gungu, e.street_name }, "street_name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.gungu, e.street_name, e.build_no }, "street_name_build_no")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_incheon>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_incheon");

                entity.HasComment("주소-인천광역시");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_jeju>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_jeju");

                entity.HasComment("주소-제주");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_junbuk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_junbuk");

                entity.HasComment("주소-전라북도");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_junnam>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_junnam");

                entity.HasComment("주소-전라남도");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_ks_buk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_ks_buk");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_ks_nam>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_ks_nam");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_sejong>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_sejong");

                entity.HasComment("주소-세종");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_seoul>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_seoul");

                entity.HasComment("주소-서울");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zip_ulsan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zip_ulsan");

                entity.HasComment("주소-울산");

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(50);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zipcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zipcode");

                entity.HasIndex(e => e.juso, "IDX_juso")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.detail).HasMaxLength(50);

                entity.Property(e => e.dong).HasMaxLength(30);

                entity.Property(e => e.gugun).HasMaxLength(30);

                entity.Property(e => e.juso).HasMaxLength(255);

                entity.Property(e => e.mod_date).HasMaxLength(8);

                entity.Property(e => e.ri).HasMaxLength(20);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(20);

                entity.Property(e => e.su).HasMaxLength(30);

                entity.Property(e => e.zipcode1)
                    .HasMaxLength(6)
                    .HasColumnName("zipcode");
            });

            modelBuilder.Entity<zipcode_hanjin>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zipcode_hanjin", "invtmng");

                entity.Property(e => e.gugun).HasMaxLength(255);

                entity.Property(e => e.si).HasMaxLength(255);

                entity.Property(e => e.terminal1_code).HasMaxLength(255);

                entity.Property(e => e.terminal1_dong).HasMaxLength(255);

                entity.Property(e => e.terminal1_name).HasMaxLength(255);

                entity.Property(e => e.terminal2_code).HasMaxLength(255);

                entity.Property(e => e.terminal2_name).HasMaxLength(255);

                entity.Property(e => e.tm3).HasMaxLength(255);
            });

            modelBuilder.Entity<zipcode_new>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zipcode_new");

                entity.HasIndex(e => e.juso, "IX_zipcode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.detail).HasMaxLength(50);

                entity.Property(e => e.dong).HasMaxLength(30);

                entity.Property(e => e.gugun).HasMaxLength(30);

                entity.Property(e => e.juso).HasMaxLength(255);

                entity.Property(e => e.mod_date).HasMaxLength(8);

                entity.Property(e => e.ri).HasMaxLength(20);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(20);

                entity.Property(e => e.su).HasMaxLength(30);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zipcode_street>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zipcode_street");

                entity.HasIndex(e => e.b_name, "IDX_b_name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.b_name_merge, "IDX_b_name_merge")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.b_ri, "IDX_b_ri")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.build_no, "IDX_build_no")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.build_sub_no, "IDX_build_sub_no")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.gungu, "IDX_gungu")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.jibun_no, "IDX_jibun_no")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.jibun_sub_no, "IDX_jibun_sub_no")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.street_name, e.build_no, e.sigungu_build_name, e.b_name }, "IDX_search1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.sido, "IDX_sido")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.sigungu_build_name, "IDX_sigungu_build_name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.street_name, "IDX_street_name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.zipcode, "IDX_zipcode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_name_merge).HasMaxLength(200);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(30);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.street_name_merge).HasMaxLength(200);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zipcode_street_N>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zipcode_street_N");

                entity.HasIndex(e => e.b_name, "IDX_b_name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.b_name_merge, "IDX_b_name_merge")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.b_ri, "IDX_b_ri")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.build_no, "IDX_build_no")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.build_sub_no, "IDX_build_sub_no")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.gungu, "IDX_gungu")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.jibun_no, "IDX_jibun_no")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.jibun_sub_no, "IDX_jibun_sub_no")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.street_name, e.build_no, e.sigungu_build_name, e.b_name }, "IDX_search1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.sido, "IDX_sido")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.sigungu_build_name, "IDX_sigungu_build_name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.street_name, "IDX_street_name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.zipcode, "IDX_zipcode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.b_code).HasMaxLength(10);

                entity.Property(e => e.b_name).HasMaxLength(20);

                entity.Property(e => e.b_name_merge).HasMaxLength(200);

                entity.Property(e => e.b_ri).HasMaxLength(20);

                entity.Property(e => e.b_san)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.build_mng_no).HasMaxLength(50);

                entity.Property(e => e.delivery_name).HasMaxLength(50);

                entity.Property(e => e.dong_no).HasMaxLength(6);

                entity.Property(e => e.e_gungu).HasMaxLength(30);

                entity.Property(e => e.e_myoun).HasMaxLength(50);

                entity.Property(e => e.e_sido).HasMaxLength(30);

                entity.Property(e => e.e_street_name).HasMaxLength(100);

                entity.Property(e => e.gungu).HasMaxLength(30);

                entity.Property(e => e.myoun).HasMaxLength(30);

                entity.Property(e => e.seq).HasMaxLength(3);

                entity.Property(e => e.sido).HasMaxLength(30);

                entity.Property(e => e.sigungu_build_name).HasMaxLength(50);

                entity.Property(e => e.street_code).HasMaxLength(14);

                entity.Property(e => e.street_name).HasMaxLength(50);

                entity.Property(e => e.street_name_merge).HasMaxLength(200);

                entity.Property(e => e.under_street)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.zipcode).HasMaxLength(6);
            });

            modelBuilder.Entity<zipcode_tbl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("zipcode_tbl", "invtmng");

                entity.Property(e => e.detail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.detail_e)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.detail_s)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.dong)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.dosu)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.gungu)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ju_e)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ju_e1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ju_s)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ju_s1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.juso)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ri)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.san)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.seq)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.sido)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.zipcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
        #endregion
    }
}
